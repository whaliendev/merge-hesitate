[
    {
        "a_contents": "const std::string& Node::GetName() const {",
        "b_contents": "std::chrono::milliseconds Node::Update(bool log_error) {\n    std::size_t value_index = default_val_index_;\n    std::chrono::milliseconds expire_time = std::chrono::milliseconds::max();\n\n    // Find the highest outstanding request's expire time\n    for (std::size_t i = 0; i < req_sorted_.size(); i++) {\n        if (req_sorted_[i].GetExpireTime(&expire_time)) {\n            value_index = i;\n            break;\n        }\n    }\n\n    // Update node only if request index changes\n    if (value_index != current_val_index_) {\n        std::string req_value = req_sorted_[value_index].GetRequestValue();\n\n        fd_.reset(TEMP_FAILURE_RETRY(\n            open(node_path_.c_str(), O_WRONLY | O_CLOEXEC | O_TRUNC)));\n\n        if (fd_ == -1 || !android::base::WriteStringToFd(req_value, fd_)) {\n            if (log_error) {\n                LOG(WARNING) << \"Failed to write to node: \" << node_path_\n                             << \" with value: \" << req_value << \", fd: \" << fd_;\n            }\n            // Retry in 500ms or sooner\n            expire_time = std::min(expire_time, std::chrono::milliseconds(500));\n        } else {\n            // For regular file system, we need fsync\n            fsync(fd_);\n            // Some dev node requires file to remain open during the entire hint\n            // duration e.g. /dev/cpu_dma_latency, so fd_ is intentionally kept\n            // open during any requested value other than default one. If\n            // request a default value, node will write the value and then\n            // release the fd.\n            if ((!hold_fd_) || value_index == default_val_index_) {\n                fd_.reset();\n            }\n            // Update current index only when succeed\n            current_val_index_ = value_index;\n        }\n    }\n    return expire_time;\n}\n\nstd::string Node::GetName() const {",
        "base_contents": "std::chrono::milliseconds Node::Update() {\n    std::size_t value_index = default_val_index_;\n    std::chrono::milliseconds expire_time = std::chrono::milliseconds::max();\n\n    // Find the highest outstanding request's expire time\n    for (std::size_t i = 0; i < req_sorted_.size(); i++) {\n        if (req_sorted_[i].GetExpireTime(&expire_time)) {\n            value_index = i;\n            break;\n        }\n    }\n\n    // Update node only if request index changes\n    if (value_index != current_val_index_) {\n        std::string req_value = req_sorted_[value_index].GetRequestValue();\n\n        fd_.reset(TEMP_FAILURE_RETRY(\n            open(node_path_.c_str(), O_WRONLY | O_CLOEXEC | O_TRUNC)));\n\n        if (fd_ == -1 || !android::base::WriteStringToFd(req_value, fd_)) {\n            LOG(ERROR) << \"Failed to write to node: \" << node_path_\n                       << \" with value: \" << req_value << \", fd: \" << fd_;\n            // Retry in 500ms or sooner\n            expire_time = std::min(expire_time, std::chrono::milliseconds(500));\n        } else {\n            // For regular file system, we need fsync\n            fsync(fd_);\n            // Some dev node requires file to remain open during the entire hint\n            // duration e.g. /dev/cpu_dma_latency, so fd_ is intentionally kept\n            // open during any requested value other than default one. If\n            // request a default value, node will write the value and then\n            // release the fd.\n            if ((!hold_fd_) || value_index == default_val_index_) {\n                fd_.reset();\n            }\n            // Update current index only when succeed\n            current_val_index_ = value_index;\n        }\n    }\n    return expire_time;\n}\n\nstd::string Node::GetName() const {",
        "res_region": "const std::string& Node::GetName() const {",
        "lookback": "    return name_;",
        "lookahead": "    return name_;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 62,
        "end_line": 154,
        "merge_gen_region": null,
        "confidence": 0.2276042103767395,
        "hesitated": true
    }
]