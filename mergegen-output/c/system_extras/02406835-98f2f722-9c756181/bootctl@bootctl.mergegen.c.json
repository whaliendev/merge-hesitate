[
    {
        "a_contents": "/*\n * Copyright (C) 2015 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sysexits.h>\n\n#include <errno.h>\n#include <limits.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <hardware/hardware.h>\n#include <hardware/boot_control.h>\n\nstatic void usage(FILE* where, int argc, char* argv[])\n{\n    fprintf(where,\n            \"%s - command-line wrapper for the boot_control HAL.\\n\"\n            \"\\n\"\n            \"Usage:\\n\"\n            \"  %s COMMAND\\n\"\n            \"\\n\"\n            \"Commands:\\n\"\n            \"  %s hal-info                    - Show info about boot_control HAL used.\\n\"\n            \"  %s get-number-slots            - Prints number of slots.\\n\"\n            \"  %s get-current-slot            - Prints currently running SLOT.\\n\"\n            \"  %s mark-boot-successful        - Mark current slot as GOOD.\\n\"\n            \"  %s set-active-boot-slot SLOT   - On next boot, load and execute SLOT.\\n\"\n            \"  %s set-slot-as-unbootable SLOT - Mark SLOT as invalid.\\n\"\n            \"  %s is-slot-bootable SLOT       - Returns 0 only if SLOT is bootable.\\n\"\n            \"  %s get-suffix SLOT             - Prints suffix for SLOT.\\n\"\n            \"\\n\"\n            \"SLOT parameter is the zero-based slot-number.\\n\",\n            argv[0], argv[0], argv[0], argv[0], argv[0],\n            argv[0], argv[0], argv[0], argv[0], argv[0]);\n}\n\nstatic int do_hal_info(const hw_module_t *hw_module)\n{\n    fprintf(stdout,\n            \"HAL name:            %s\\n\"\n            \"HAL author:          %s\\n\"\n            \"HAL module version:  %d.%d\\n\",\n            hw_module->name,\n            hw_module->author,\n            hw_module->module_api_version>>8,\n            hw_module->module_api_version&0xff);\n    return EX_OK;\n}\n\nstatic int do_get_number_slots(boot_control_module_t *module)\n{\n    int num_slots = module->getNumberSlots(module);\n    fprintf(stdout, \"%d\\n\", num_slots);\n    return EX_OK;\n}\n\nstatic int do_get_current_slot(boot_control_module_t *module)\n{\n    int cur_slot = module->getCurrentSlot(module);\n    fprintf(stdout, \"%d\\n\", cur_slot);\n    return EX_OK;\n}\n\nstatic int do_mark_boot_successful(boot_control_module_t *module)\n{\n    int ret = module->markBootSuccessful(module);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error marking as having booted successfully: %s\\n\",\n            strerror(-ret));\n    return EX_SOFTWARE;\n}\n\nstatic int do_set_active_boot_slot(boot_control_module_t *module,\n                                   int slot_number)\n{\n    int ret = module->setActiveBootSlot(module, slot_number);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error setting active boot slot: %s\\n\", strerror(-ret));\n    return EX_SOFTWARE;\n}\n\nstatic int do_set_slot_as_unbootable(boot_control_module_t *module,\n                                     int slot_number)\n{\n    int ret = module->setSlotAsUnbootable(module, slot_number);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error setting slot as unbootable: %s\\n\", strerror(-ret));\n    return EX_SOFTWARE;\n}\n\n\nstatic int do_is_slot_bootable(boot_control_module_t *module, int slot_number)\n{\n    int ret = module->isSlotBootable(module, slot_number);\n    if (ret == 0)\n        return EX_SOFTWARE;\n    return EX_OK;\n}\n\n\nstatic int do_get_suffix(boot_control_module_t *module, int slot_number)\n{\n    const char* suffix = module->getSuffix(module, slot_number);\n    fprintf(stdout, \"%s\\n\", suffix);\n    return EX_OK;\n}\n\nstatic int parse_slot(int pos, int argc, char *argv[])\n{\n    if (pos > argc - 1) {\n        usage(stderr, argc, argv);\n        exit(EX_USAGE);\n        return -1;\n    }\n    int ret = strtol(argv[pos], NULL, 10);\n    if (ret == LONG_MIN || ret == LONG_MAX) {\n        usage(stderr, argc, argv);\n        exit(EX_USAGE);\n        return -1;\n    }\n    return ret;\n}\n\nint main(int argc, char *argv[])\n{\n    const hw_module_t *hw_module;\n    boot_control_module_t *module;\n    int ret;\n\n    if (argc < 2) {\n        usage(stderr, argc, argv);\n        return EX_USAGE;\n    }\n\n    ret = hw_get_module(\"bootctrl\", &hw_module);\n    if (ret != 0) {\n        fprintf(stderr, \"Error getting bootctrl module.\\n\");\n        return EX_SOFTWARE;\n    }\n    module = (boot_control_module_t*) hw_module;\n    module->init(module);\n\n    if (strcmp(argv[1], \"hal-info\") == 0) {\n        return do_hal_info(hw_module);\n    } else if (strcmp(argv[1], \"get-number-slots\") == 0) {\n        return do_get_number_slots(module);\n    } else if (strcmp(argv[1], \"get-current-slot\") == 0) {\n        return do_get_current_slot(module);\n    } else if (strcmp(argv[1], \"mark-boot-successful\") == 0) {\n        return do_mark_boot_successful(module);\n    } else if (strcmp(argv[1], \"set-active-boot-slot\") == 0) {\n        return do_set_active_boot_slot(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"set-slot-as-unbootable\") == 0) {\n        return do_set_slot_as_unbootable(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"is-slot-bootable\") == 0) {\n        return do_is_slot_bootable(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"get-suffix\") == 0) {\n        return do_get_suffix(module, parse_slot(2, argc, argv));\n    } else {\n        usage(stderr, argc, argv);\n        return EX_USAGE;\n    }\n\n    return 0;\n}",
        "b_contents": "/*\n * Copyright (C) 2015 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sysexits.h>\n\n#include <errno.h>\n#include <limits.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <hardware/hardware.h>\n#include <hardware/boot_control.h>\n\nstatic void usage(FILE* where, int argc, char* argv[])\n{\n    fprintf(where,\n            \"%s - command-line wrapper for the boot_control HAL.\\n\"\n            \"\\n\"\n            \"Usage:\\n\"\n            \"  %s COMMAND\\n\"\n            \"\\n\"\n            \"Commands:\\n\"\n            \"  %s hal-info                    - Show info about boot_control HAL used.\\n\"\n            \"  %s get-number-slots            - Prints number of slots.\\n\"\n            \"  %s get-current-slot            - Prints currently running SLOT.\\n\"\n            \"  %s mark-boot-successful        - Mark current slot as GOOD.\\n\"\n            \"  %s set-active-boot-slot SLOT   - On next boot, load and execute SLOT.\\n\"\n            \"  %s set-slot-as-unbootable SLOT - Mark SLOT as invalid.\\n\"\n            \"  %s is-slot-bootable SLOT       - Returns 0 only if SLOT is bootable.\\n\"\n            \"  %s get-suffix SLOT             - Prints suffix for SLOT.\\n\"\n            \"\\n\"\n            \"SLOT parameter is the zero-based slot-number.\\n\",\n            argv[0], argv[0], argv[0], argv[0], argv[0],\n            argv[0], argv[0], argv[0], argv[0], argv[0]);\n}\n\nstatic int do_hal_info(const hw_module_t *hw_module)\n{\n    fprintf(stdout,\n            \"HAL name:            %s\\n\"\n            \"HAL author:          %s\\n\"\n            \"HAL module version:  %d.%d\\n\",\n            hw_module->name,\n            hw_module->author,\n            hw_module->module_api_version>>8,\n            hw_module->module_api_version&0xff);\n    return EX_OK;\n}\n\nstatic int do_get_number_slots(boot_control_module_t *module)\n{\n    int num_slots = module->getNumberSlots(module);\n    fprintf(stdout, \"%d\\n\", num_slots);\n    return EX_OK;\n}\n\nstatic int do_get_current_slot(boot_control_module_t *module)\n{\n    int cur_slot = module->getCurrentSlot(module);\n    fprintf(stdout, \"%d\\n\", cur_slot);\n    return EX_OK;\n}\n\nstatic int do_mark_boot_successful(boot_control_module_t *module)\n{\n    int ret = module->markBootSuccessful(module);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error marking as having booted successfully: %s\\n\",\n            strerror(-ret));\n    return EX_SOFTWARE;\n}\n\nstatic int do_set_active_boot_slot(boot_control_module_t *module,\n                                   int slot_number)\n{\n    int ret = module->setActiveBootSlot(module, slot_number);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error setting active boot slot: %s\\n\", strerror(-ret));\n    return EX_SOFTWARE;\n}\n\nstatic int do_set_slot_as_unbootable(boot_control_module_t *module,\n                                     int slot_number)\n{\n    int ret = module->setSlotAsUnbootable(module, slot_number);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error setting slot as unbootable: %s\\n\", strerror(-ret));\n    return EX_SOFTWARE;\n}\n\n\nstatic int do_is_slot_bootable(boot_control_module_t *module, int slot_number)\n{\n    int ret = module->isSlotBootable(module, slot_number);\n    if (ret == 0)\n        return EX_SOFTWARE;\n    return EX_OK;\n}\n\n\nstatic int do_get_suffix(boot_control_module_t *module, int slot_number)\n{\n    const char* suffix = module->getSuffix(module, slot_number);\n    fprintf(stdout, \"%s\\n\", suffix);\n    return EX_OK;\n}\n\nstatic int parse_slot(int pos, int argc, char *argv[])\n{\n    if (pos > argc - 1) {\n        usage(stderr, argc, argv);\n        exit(EX_USAGE);\n        return -1;\n    }\n    int ret = strtol(argv[pos], NULL, 10);\n    if (ret == LONG_MIN || ret == LONG_MAX) {\n        usage(stderr, argc, argv);\n        exit(EX_USAGE);\n        return -1;\n    }\n    return ret;\n}\n\nint main(int argc, char *argv[])\n{\n    const hw_module_t *hw_module;\n    boot_control_module_t *module;\n    int ret;\n\n    ret = hw_get_module(\"bootctrl\", &hw_module);\n    if (ret != 0) {\n        fprintf(stderr, \"Error getting bootctrl module.\\n\");\n        return EX_SOFTWARE;\n    }\n    module = (boot_control_module_t*) hw_module;\n    module->init(module);\n\n    if (argc < 2) {\n        usage(stderr, argc, argv);\n        return EX_USAGE;\n    }\n\n    if (strcmp(argv[1], \"hal-info\") == 0) {\n        return do_hal_info(hw_module);\n    } else if (strcmp(argv[1], \"get-number-slots\") == 0) {\n        return do_get_number_slots(module);\n    } else if (strcmp(argv[1], \"get-current-slot\") == 0) {\n        return do_get_current_slot(module);\n    } else if (strcmp(argv[1], \"mark-boot-successful\") == 0) {\n        return do_mark_boot_successful(module);\n    } else if (strcmp(argv[1], \"set-active-boot-slot\") == 0) {\n        return do_set_active_boot_slot(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"set-slot-as-unbootable\") == 0) {\n        return do_set_slot_as_unbootable(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"is-slot-bootable\") == 0) {\n        return do_is_slot_bootable(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"get-suffix\") == 0) {\n        return do_get_suffix(module, parse_slot(2, argc, argv));\n    } else {\n        usage(stderr, argc, argv);\n        return EX_USAGE;\n    }\n\n    return 0;\n}",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2015 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sysexits.h>\n\n#include <errno.h>\n#include <limits.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <hardware/hardware.h>\n#include <hardware/boot_control.h>\n\nstatic void usage(FILE* where, int argc, char* argv[])\n{\n    fprintf(where,\n            \"%s - command-line wrapper for the boot_control HAL.\\n\"\n            \"\\n\"\n            \"Usage:\\n\"\n            \"  %s COMMAND\\n\"\n            \"\\n\"\n            \"Commands:\\n\"\n            \"  %s hal-info                    - Show info about boot_control HAL used.\\n\"\n            \"  %s get-number-slots            - Prints number of slots.\\n\"\n            \"  %s get-current-slot            - Prints currently running SLOT.\\n\"\n            \"  %s mark-boot-successful        - Mark current slot as GOOD.\\n\"\n            \"  %s set-active-boot-slot SLOT   - On next boot, load and execute SLOT.\\n\"\n            \"  %s set-slot-as-unbootable SLOT - Mark SLOT as invalid.\\n\"\n            \"  %s is-slot-bootable SLOT       - Returns 0 only if SLOT is bootable.\\n\"\n            \"  %s get-suffix SLOT             - Prints suffix for SLOT.\\n\"\n            \"\\n\"\n            \"SLOT parameter is the zero-based slot-number.\\n\",\n            argv[0], argv[0], argv[0], argv[0], argv[0],\n            argv[0], argv[0], argv[0], argv[0], argv[0]);\n}\n\nstatic int do_hal_info(const hw_module_t *hw_module)\n{\n    fprintf(stdout,\n            \"HAL name:            %s\\n\"\n            \"HAL author:          %s\\n\"\n            \"HAL module version:  %d.%d\\n\",\n            hw_module->name,\n            hw_module->author,\n            hw_module->module_api_version>>8,\n            hw_module->module_api_version&0xff);\n    return EX_OK;\n}\n\nstatic int do_get_number_slots(boot_control_module_t *module)\n{\n    int num_slots = module->getNumberSlots(module);\n    fprintf(stdout, \"%d\\n\", num_slots);\n    return EX_OK;\n}\n\nstatic int do_get_current_slot(boot_control_module_t *module)\n{\n    int cur_slot = module->getCurrentSlot(module);\n    fprintf(stdout, \"%d\\n\", cur_slot);\n    return EX_OK;\n}\n\nstatic int do_mark_boot_successful(boot_control_module_t *module)\n{\n    int ret = module->markBootSuccessful(module);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error marking as having booted successfully: %s\\n\",\n            strerror(-ret));\n    return EX_SOFTWARE;\n}\n\nstatic int do_set_active_boot_slot(boot_control_module_t *module,\n                                   int slot_number)\n{\n    int ret = module->setActiveBootSlot(module, slot_number);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error setting active boot slot: %s\\n\", strerror(-ret));\n    return EX_SOFTWARE;\n}\n\nstatic int do_set_slot_as_unbootable(boot_control_module_t *module,\n                                     int slot_number)\n{\n    int ret = module->setSlotAsUnbootable(module, slot_number);\n    if (ret == 0)\n        return EX_OK;\n    fprintf(stderr, \"Error setting slot as unbootable: %s\\n\", strerror(-ret));\n    return EX_SOFTWARE;\n}\n\n\nstatic int do_is_slot_bootable(boot_control_module_t *module, int slot_number)\n{\n    int ret = module->isSlotBootable(module, slot_number);\n    if (ret == 0)\n        return EX_SOFTWARE;\n    return EX_OK;\n}\n\n\nstatic int do_get_suffix(boot_control_module_t *module, int slot_number)\n{\n    const char* suffix = module->getSuffix(module, slot_number);\n    fprintf(stdout, \"%s\\n\", suffix);\n    return EX_OK;\n}\n\nstatic int parse_slot(int pos, int argc, char *argv[])\n{\n    if (pos > argc - 1) {\n        usage(stderr, argc, argv);\n        exit(EX_USAGE);\n        return -1;\n    }\n    int ret = strtol(argv[pos], NULL, 10);\n    if (ret == LONG_MIN || ret == LONG_MAX) {\n        usage(stderr, argc, argv);\n        exit(EX_USAGE);\n        return -1;\n    }\n    return ret;\n}\n\nint main(int argc, char *argv[])\n{\n    const hw_module_t *hw_module;\n    boot_control_module_t *module;\n    int ret;\n\n    if (argc < 2) {\n        usage(stderr, argc, argv);\n        return EX_USAGE;\n    }\n\n    ret = hw_get_module(\"bootctrl\", &hw_module);\n    if (ret != 0) {\n        fprintf(stderr, \"Error getting bootctrl module.\\n\");\n        return EX_SOFTWARE;\n    }\n    module = (boot_control_module_t*) hw_module;\n    module->init(module);\n\n    if (strcmp(argv[1], \"hal-info\") == 0) {\n        return do_hal_info(hw_module);\n    } else if (strcmp(argv[1], \"get-number-slots\") == 0) {\n        return do_get_number_slots(module);\n    } else if (strcmp(argv[1], \"get-current-slot\") == 0) {\n        return do_get_current_slot(module);\n    } else if (strcmp(argv[1], \"mark-boot-successful\") == 0) {\n        return do_mark_boot_successful(module);\n    } else if (strcmp(argv[1], \"set-active-boot-slot\") == 0) {\n        return do_set_active_boot_slot(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"set-slot-as-unbootable\") == 0) {\n        return do_set_slot_as_unbootable(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"is-slot-bootable\") == 0) {\n        return do_is_slot_bootable(module, parse_slot(2, argc, argv));\n    } else if (strcmp(argv[1], \"get-suffix\") == 0) {\n        return do_get_suffix(module, parse_slot(2, argc, argv));\n    } else {\n        usage(stderr, argc, argv);\n        return EX_USAGE;\n    }\n\n    return 0;\n}",
        "lookback": " * Copyright (C) 2015 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 373,
        "merge_gen_region": " CopyrightC 2015 Android Source/* CopyrightC 2015 2015 Android Source * Licensed the Apache, 2. ( \" \"\"); you not this except in with the. * may a of License * may a of License * *://../licensesLICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WITHOUT OR OF KIND either or. See License the for specific governing and limitations the License */includesystypesh>includesys/.>includesysstath # <fcntlh # <syitsh # <errnoh # <limitsh # <stdioh # <stdlibh # <stringh # <hardwarehardwareh # </_.>.> void(* where int,*[]) {(,s commandline for boot_ HAL.\\\"n \"\\\"Usagen\" % COMMANDn \"\\\"Commandsn \"s halinfo Show about_ HAL usedn \"s\" %s-- -s of.\\\" % getnumber- -s of.\\\" % getcurrentslot Print currently SLOTn \"s--.\\\" % markbootsuccessful Mark slot GO.\\\" % setactivebootslot - next, and SLOTn \"s-.\\\" % setslotasunable - SLOT as.\\\"",
        "confidence": 0.936946451663971,
        "hesitated": false,
        "resolved": false
    }
]