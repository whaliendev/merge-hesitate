[
    {
        "a_contents": "",
        "b_contents": "bool IsInNativeAbi() {\n  static int in_native_abi = -1;\n  if (in_native_abi == -1) {\n    FILE* fp = popen(\"uname -m\", \"re\");\n    char buf[40];\n    memset(buf, '\\0', sizeof(buf));\n    CHECK_EQ(fgets(buf, sizeof(buf), fp), buf);\n    pclose(fp);\n    std::string s = buf;\n    in_native_abi = 1;\n    if (GetBuildArch() == ARCH_X86_32 || GetBuildArch() == ARCH_X86_64) {\n      if (s.find(\"86\") == std::string::npos) {\n        in_native_abi = 0;\n      }\n    } else if (GetBuildArch() == ARCH_ARM || GetBuildArch() == ARCH_ARM64) {\n      if (s.find(\"arm\") == std::string::npos && s.find(\"aarch64\") == std::string::npos) {\n        in_native_abi = 0;\n      }\n    }\n  }\n  return in_native_abi == 1;\n}\n\nbool HasTracepointEvents() {\n  static int has_tracepoint_events = -1;\n  if (has_tracepoint_events == -1) {\n    has_tracepoint_events = (GetTraceFsDir() != nullptr) ? 1 : 0;\n  }\n  return has_tracepoint_events == 1;\n}\n\nbool HasHardwareCounter() {\n  static int has_hw_counter = -1;\n  if (has_hw_counter == -1) {\n    has_hw_counter = 1;\n#if defined(__x86__) || defined(__x86_64__)\n    // On x86 and x86_64, it's likely to run on an emulator or vm without hardware perf counters.\n    // It's hard to enumerate them all. So check the support at runtime.\n    const EventType* type = FindEventTypeByName(\"cpu-cycles\", false);\n    CHECK(type != nullptr);\n    perf_event_attr attr = CreateDefaultPerfEventAttr(*type);\n    has_hw_counter = IsEventAttrSupported(attr, \"cpu-cycles\") ? 1 : 0;\n#elif defined(__arm__)\n    std::string cpu_info;\n    if (android::base::ReadFileToString(\"/proc/cpuinfo\", &cpu_info)) {\n      std::string hardware = GetHardwareFromCpuInfo(cpu_info);\n      if (std::regex_search(hardware, std::regex(R\"(i\\.MX6.*Quad)\")) ||\n          std::regex_search(hardware, std::regex(R\"(SC7731e)\")) ||\n          std::regex_search(hardware, std::regex(R\"(Qualcomm Technologies, Inc MSM8909)\")) ||\n          std::regex_search(hardware, std::regex(R\"(Broadcom STB \\(Flattened Device Tree\\))\"))) {\n        has_hw_counter = 0;\n      }\n    }\n#endif  // defined(__arm__)\n  }\n  return has_hw_counter == 1;\n}\n\nbool HasPmuCounter() {\n  static int has_pmu_counter = -1;\n  if (has_pmu_counter == -1) {\n    has_pmu_counter = 0;\n    for (auto& event_type : GetAllEventTypes()) {\n      if (event_type.IsPmuEvent()) {\n        has_pmu_counter = 1;\n        break;\n      }\n    }\n  }\n  return has_pmu_counter == 1;\n}\n",
        "base_contents": "bool IsInNativeAbi() {\n  static int in_native_abi = -1;\n  if (in_native_abi == -1) {\n    FILE* fp = popen(\"uname -m\", \"re\");\n    char buf[40];\n    memset(buf, '\\0', sizeof(buf));\n    CHECK_EQ(fgets(buf, sizeof(buf), fp), buf);\n    pclose(fp);\n    std::string s = buf;\n    in_native_abi = 1;\n    if (GetBuildArch() == ARCH_X86_32 || GetBuildArch() == ARCH_X86_64) {\n      if (s.find(\"86\") == std::string::npos) {\n        in_native_abi = 0;\n      }\n    } else if (GetBuildArch() == ARCH_ARM || GetBuildArch() == ARCH_ARM64) {\n      if (s.find(\"arm\") == std::string::npos && s.find(\"aarch64\") == std::string::npos) {\n        in_native_abi = 0;\n      }\n    }\n  }\n  return in_native_abi == 1;\n}\n\nstatic bool InCloudAndroid() {\n#if defined(__i386__) || defined(__x86_64__)\n#if defined(__ANDROID__)\n  std::string prop_value = android::base::GetProperty(\"ro.build.flavor\", \"\");\n  if (android::base::StartsWith(prop_value, \"cf_x86_phone\") ||\n      android::base::StartsWith(prop_value, \"aosp_cf_x86_phone\")) {\n    return true;\n  }\n#endif\n#endif\n  return false;\n}\n\nbool HasTracepointEvents() {\n  static int has_tracepoint_events = -1;\n  if (has_tracepoint_events == -1) {\n    // Cloud Android doesn't support tracepoint events.\n    has_tracepoint_events = InCloudAndroid() ? 0 : 1;\n  }\n  return has_tracepoint_events == 1;\n}\n\nbool HasHardwareCounter() {\n  static int has_hw_counter = -1;\n  if (has_hw_counter == -1) {\n    // Cloud Android doesn't have hardware counters.\n    has_hw_counter = InCloudAndroid() ? 0 : 1;\n#if defined(__arm__)\n    std::string cpu_info;\n    if (android::base::ReadFileToString(\"/proc/cpuinfo\", &cpu_info)) {\n      std::string hardware = GetHardwareFromCpuInfo(cpu_info);\n      if (std::regex_search(hardware, std::regex(R\"(i\\.MX6.*Quad)\")) ||\n          std::regex_search(hardware, std::regex(R\"(SC7731e)\")) ||\n          std::regex_search(hardware, std::regex(R\"(Qualcomm Technologies, Inc MSM8909)\")) ||\n          std::regex_search(hardware, std::regex(R\"(Broadcom STB \\(Flattened Device Tree\\))\"))) {\n        has_hw_counter = 0;\n      }\n    }\n#endif\n  }\n  return has_hw_counter == 1;\n}\n\nbool HasPmuCounter() {\n  static int has_pmu_counter = -1;\n  if (has_pmu_counter == -1) {\n    has_pmu_counter = 0;\n    for (auto& event_type : GetAllEventTypes()) {\n      if (event_type.IsPmuEvent()) {\n        has_pmu_counter = 1;\n        break;\n      }\n    }\n  }\n  return has_pmu_counter == 1;\n}\n",
        "res_region": "",
        "lookback": "  OMIT_TEST_ON_NON_NATIVE_ABIS();",
        "lookahead": "TEST(record_cmd, dwarf_callchain_sampling) {",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 247,
        "end_line": 402,
        "merge_gen_region": null,
        "confidence": 0.4155220091342926,
        "hesitated": true
    }
]