[
    {
        "a_contents": "",
        "b_contents": "",
        "base_contents": "#include <fcntl.h>\n",
        "res_region": "",
        "lookback": "",
        "lookahead": "#include <zlib.h>",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 28,
        "end_line": 34,
        "merge_gen_region": null,
        "confidence": 0.5607293248176575,
        "hesitated": true
    },
    {
        "a_contents": "struct output_file *open_output_file(const char *filename, int gz, int sparse,\n        int chunks, int crc, int wipe) {\n\n\tint fd;\n\tstruct output_file *file;\n\n\tif (strcmp(filename, \"-\")) {\n\t\tfd = open(filename, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0644);\n\t\tif (fd < 0) {\n\t\t\terror_errno(\"open\");\n\t\t\treturn NULL;\n\t\t}\n\t} else {\n\t\tfd = STDOUT_FILENO;\n\t}\n\n\tfile = open_output_fd(fd, gz, sparse, chunks, crc, wipe);\n\tif (!file) {\n\t\tclose(fd);\n\t\treturn NULL;\n\t}\n\n\tfile->close_fd = true; // we opened descriptor thus we responsible for closing it\n\n\treturn file;\n}\n",
        "b_contents": "struct output_file *open_output_file(const char *filename, int gz, int sparse,\n        int chunks, int crc, int wipe) {\n\n\tint fd;\n\tstruct output_file *file;\n\n\tif (strcmp(filename, \"-\")) {\n\t\tfd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);\n\t\tif (fd < 0) {\n\t\t\terror_errno(\"open\");\n\t\t\treturn NULL;\n\t\t}\n\t} else {\n\t\tfd = STDOUT_FILENO;\n\t}\n\n\tfile = open_output_fd(fd, gz, sparse, chunks, crc, wipe);\n\tif (!file) {\n\t\tclose(fd);\n\t\treturn NULL;\n\t}\n\n\tfile->close_fd = true; // we opened descriptor thus we responsible for closing it\n\n\treturn file;\n}\n",
        "base_contents": "",
        "res_region": "struct output_file *open_output_file(const char *filename, int gz, int sparse,\n        int chunks, int crc, int wipe) {\n\n\tint fd;\n\tstruct output_file *file;\n\n\tif (strcmp(filename, \"-\")) {\n\t\tfd = open(filename, O_WRONLY | O_CREAT | O_TRUNC | O_BINARY, 0644);\n\t\tif (fd < 0) {\n\t\t\terror_errno(\"open\");\n\t\t\treturn NULL;\n\t\t}\n\t} else {\n\t\tfd = STDOUT_FILENO;\n\t}\n\n\tfile = open_output_fd(fd, gz, sparse, chunks, crc, wipe);\n\tif (!file) {\n\t\tclose(fd);\n\t\treturn NULL;\n\t}\n\n\tfile->close_fd = true; // we opened descriptor thus we responsible for closing it\n\n\treturn file;\n}\n",
        "lookback": "        int chunks, int crc, int wipe) {",
        "lookahead": "void pad_output_file(struct output_file *out, u64 len)",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 416,
        "end_line": 473,
        "merge_gen_region": null,
        "confidence": 0.8662221431732178,
        "hesitated": true
    }
]