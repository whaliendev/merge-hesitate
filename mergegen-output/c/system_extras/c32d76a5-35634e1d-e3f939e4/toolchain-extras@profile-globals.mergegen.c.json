[
    {
        "a_contents": "/*\n * Copyright (C) 2019 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n// This file provides a wrapper for getenv that appends the userid (geteuid())\n// of the current process to GCOV_PREFIX.  This avoids conflicts and permissions\n// issues when different processes try to create/access the same directories and\n// files under $GCOV_PREFIX.\n//\n// When this file is linked to a binary, the -Wl,--wrap,getenv flag must be\n// used.  The linker redirects calls to getenv to __wrap_getenv and sets\n// __real_getenv to point to libc's getenv.\n\nchar *__real_getenv(const char *name);\n\nstatic char modified_gcov_prefix[128];\n\n__attribute__((weak)) char *__wrap_getenv(const char *name) {\n  if (strcmp(name, \"GCOV_PREFIX\") != 0) {\n    return __real_getenv(name);\n  }\n\n  sprintf(modified_gcov_prefix, \"%s/%u\", __real_getenv(name), geteuid());\n  mkdir(modified_gcov_prefix, 0777);\n  return modified_gcov_prefix;\n}",
        "b_contents": "/*\n * Copyright (C) 2019 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n// This file provides a wrapper for getenv that appends the userid (geteuid())\n// of the current process to GCOV_PREFIX.  This avoids conflicts and permissions\n// issues when different processes try to create/access the same directories and\n// files under $GCOV_PREFIX.\n//\n// When this file is linked to a binary, the -Wl,--wrap,getenv flag must be\n// used.  The linker redirects calls to getenv to __wrap_getenv and sets\n// __real_getenv to point to libc's getenv.\n\nchar *__real_getenv(const char *name);\n\nstatic char modified_gcov_prefix[128];\n\n__attribute__((weak)) char *__wrap_getenv(const char *name) {\n  if (strcmp(name, \"GCOV_PREFIX\") != 0) {\n    return __real_getenv(name);\n  }\n\n  sprintf(modified_gcov_prefix, \"%s/%u\", __real_getenv(name), geteuid());\n  return modified_gcov_prefix;\n}",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2019 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n// This file provides a wrapper for getenv that appends the userid (geteuid())\n// of the current process to GCOV_PREFIX.  This avoids conflicts and permissions\n// issues when different processes try to create/access the same directories and\n// files under $GCOV_PREFIX.\n//\n// When this file is linked to a binary, the -Wl,--wrap,getenv flag must be\n// used.  The linker redirects calls to getenv to __wrap_getenv and sets\n// __real_getenv to point to libc's getenv.\n\nchar *__real_getenv(const char *name);\n\nstatic char modified_gcov_prefix[128];\n\n__attribute__((weak)) char *__wrap_getenv(const char *name) {\n  if (strcmp(name, \"GCOV_PREFIX\") != 0) {\n    return __real_getenv(name);\n  }\n\n  sprintf(modified_gcov_prefix, \"%s/%u\", __real_getenv(name), geteuid());\n  mkdir(modified_gcov_prefix, 0777);\n  return modified_gcov_prefix;\n}",
        "lookback": " * Copyright (C) 2019 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 89,
        "merge_gen_region": " CopyrightC 2019 Android Source/* CopyrightC 2019 Android Source * Licensed the License, 20theLicense * may use file in with the. * may a of License * *://..//LICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the the for specific governing and limitations the License */includestdlibh # <stringh # <unistdh # <sysstath # <systypesh> This provides wrapper getenv append theid (euid // the process GVPREFIX This conflicts permissions issues different try to/ the directories // underGVPREFIX // this is to binary theW,wrapgetenv must //realgetenv point libc getenv charreal_( charname static modifiedg_covprefix128 ____(()) *___( charname { ((,GVPREFIX !=) returnrealgetenvname } sprintfmodifiedg_covprefix \"%/%\",realgetenvname),euid mk(_covg_,777 return_covprefix }",
        "confidence": 0.9395385384559631,
        "hesitated": false,
        "resolved": false
    }
]