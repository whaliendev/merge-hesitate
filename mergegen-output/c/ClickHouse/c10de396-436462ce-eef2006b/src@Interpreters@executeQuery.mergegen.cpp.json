[
    {
        "a_contents": "        if (settings[Setting::log_processors_profiles])\n        {\n            if (auto processors_profile_log = context->getProcessorsProfileLog())\n            {\n                ProcessorProfileLogElement processor_elem;\n                processor_elem.event_time = elem.event_time;\n                processor_elem.event_time_microseconds = elem.event_time_microseconds;\n                processor_elem.initial_query_id = elem.client_info.initial_query_id;\n                processor_elem.query_id = elem.client_info.current_query_id;\n\n                auto get_proc_id = [](const IProcessor & proc) -> UInt64 { return reinterpret_cast<std::uintptr_t>(&proc); };\n\n                for (const auto & processor : query_pipeline.getProcessors())\n                {\n                    std::vector<UInt64> parents;\n                    for (const auto & port : processor->getOutputs())\n                    {\n                        if (!port.isConnected())\n                            continue;\n                        const IProcessor & next = port.getInputPort().getProcessor();\n                        parents.push_back(get_proc_id(next));\n                    }\n\n                    processor_elem.id = get_proc_id(*processor);\n                    processor_elem.parent_ids = std::move(parents);\n\n                    processor_elem.plan_step = reinterpret_cast<std::uintptr_t>(processor->getQueryPlanStep());\n                    processor_elem.plan_step_name = processor->getPlanStepName();\n                    processor_elem.plan_step_description = processor->getPlanStepDescription();\n                    processor_elem.plan_group = processor->getQueryPlanStepGroup();\n                    processor_elem.processor_uniq_id = processor->getUniqID();\n                    processor_elem.step_uniq_id = processor->getStepUniqID();\n\n                    processor_elem.processor_name = processor->getName();\n\n                    processor_elem.elapsed_us = static_cast<UInt64>(processor->getElapsedNs() / 1000U);\n                    processor_elem.input_wait_elapsed_us = static_cast<UInt64>(processor->getInputWaitElapsedNs() / 1000U);\n                    processor_elem.output_wait_elapsed_us = static_cast<UInt64>(processor->getOutputWaitElapsedNs() / 1000U);",
        "b_contents": "",
        "base_contents": "        if (settings[Setting::log_processors_profiles])\n        {\n            if (auto processors_profile_log = context->getProcessorsProfileLog())\n            {\n                ProcessorProfileLogElement processor_elem;\n                processor_elem.event_time = elem.event_time;\n                processor_elem.event_time_microseconds = elem.event_time_microseconds;\n                processor_elem.initial_query_id = elem.client_info.initial_query_id;\n                processor_elem.query_id = elem.client_info.current_query_id;\n\n                auto get_proc_id = [](const IProcessor & proc) -> UInt64 { return reinterpret_cast<std::uintptr_t>(&proc); };\n\n                for (const auto & processor : query_pipeline.getProcessors())\n                {\n                    std::vector<UInt64> parents;\n                    for (const auto & port : processor->getOutputs())\n                    {\n                        if (!port.isConnected())\n                            continue;\n                        const IProcessor & next = port.getInputPort().getProcessor();\n                        parents.push_back(get_proc_id(next));\n                    }\n\n                    processor_elem.id = get_proc_id(*processor);\n                    processor_elem.parent_ids = std::move(parents);\n\n                    processor_elem.plan_step = reinterpret_cast<std::uintptr_t>(processor->getQueryPlanStep());\n                    processor_elem.plan_step_name = processor->getPlanStepName();\n                    processor_elem.plan_step_description = processor->getPlanStepDescription();\n                    processor_elem.plan_group = processor->getQueryPlanStepGroup();\n\n                    processor_elem.processor_name = processor->getName();\n\n                    processor_elem.elapsed_us = static_cast<UInt64>(processor->getElapsedNs() / 1000U);\n                    processor_elem.input_wait_elapsed_us = static_cast<UInt64>(processor->getInputWaitElapsedNs() / 1000U);\n                    processor_elem.output_wait_elapsed_us = static_cast<UInt64>(processor->getOutputWaitElapsedNs() / 1000U);",
        "res_region": "",
        "lookback": "        logProcessorProfile(context, query_pipeline.getProcessors());",
        "lookahead": "",
        "label": [
            "base",
            "base_empty"
        ],
        "start_line": 553,
        "end_line": 630,
        "merge_gen_region": null,
        "confidence": 0.44848769903182983,
        "hesitated": true
    }
]