[
    {
        "a_contents": "    auto db_disk = getContext()->getDatabaseDisk();",
        "b_contents": "    // Compute allowed max length directly\n    size_t allowed_max_length = computeMaxTableNameLength(database_name, getContext());",
        "base_contents": "",
        "res_region": "    // Compute allowed max length directly\n    size_t allowed_max_length = computeMaxTableNameLength(database_name, getContext());",
        "lookback": "    size_t allowed_max_length = computeMaxTableNameLength(database_name, getContext());",
        "lookahead": "    String table_metadata_path = getObjectMetadataPath(to_table_name);",
        "label": [
            "base",
            "one_side_deletion"
        ],
        "start_line": 409,
        "end_line": 415,
        "merge_gen_region": null,
        "confidence": 0.8207753300666809,
        "hesitated": true
    },
    {
        "a_contents": "    if (db_disk->existsFile(table_metadata_path))",
        "b_contents": "    const auto escaped_name_length = escapeForFileName(to_table_name).length();\n\n    if (escaped_name_length > allowed_max_length)\n        throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND,\n                        \"The max length of table name for database {} is {}, current length is {}\",\n                        database_name, allowed_max_length, escaped_name_length);\n\n    if (fs::exists(table_metadata_path))",
        "base_contents": "    if (fs::exists(table_metadata_path))",
        "res_region": "    const auto escaped_name_length = escapeForFileName(to_table_name).length();\n\n    if (escaped_name_length > allowed_max_length)\n        throw Exception(ErrorCodes::ARGUMENT_OUT_OF_BOUND,\n                        \"The max length of table name for database {} is {}, current length is {}\",\n                        database_name, allowed_max_length, escaped_name_length);\n\n    auto db_disk = getContext()->getDatabaseDisk();\n\n    if (db_disk->existsFile(table_metadata_path))",
        "lookback": "",
        "lookahead": "    {",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 418,
        "end_line": 431,
        "merge_gen_region": null,
        "confidence": 0.7982531785964966,
        "hesitated": true
    },
    {
        "a_contents": "        if (db_disk->existsFile(detached_permanently_flag))\n            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS, \"Table {}.{} already exists (detached permanently)\",",
        "b_contents": "        if (fs::exists(detached_permanently_flag))\n            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS,\n                            \"Table {}.{} already exists (detached permanently)\",\n                            backQuote(database_name), backQuote(to_table_name));\n        else\n            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS,\n                            \"Table {}.{} already exists (detached)\",",
        "base_contents": "        if (fs::exists(detached_permanently_flag))\n            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS, \"Table {}.{} already exists (detached permanently)\",",
        "res_region": "        if (db_disk->existsFile(detached_permanently_flag))\n            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS,\n                            \"Table {}.{} already exists (detached permanently)\",\n                            backQuote(database_name), backQuote(to_table_name));\n        else\n            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS,\n                            \"Table {}.{} already exists (detached)\",",
        "lookback": "            throw Exception(ErrorCodes::TABLE_ALREADY_EXISTS,",
        "lookahead": "                            backQuote(database_name), backQuote(to_table_name));",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 435,
        "end_line": 449,
        "merge_gen_region": null,
        "confidence": 0.8452883958816528,
        "hesitated": true
    }
]