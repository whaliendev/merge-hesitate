[
    {
        "a_contents": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_publish\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"tcUrl\", SrsJsonAny::str(req->tcUrl.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    \n    std::string data = obj->dumps();",
        "b_contents": "    string stream = req->stream;\n    // Pass params in stream, @see https://github.com/ossrs/srs/issues/1031#issuecomment-409745733\n    if (!req->param.empty()) {\n        if (req->param.find(\"?\") != 0) {\n            stream += \"?\";\n        }\n        stream += req->param;\n    }\n    \n    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_publish\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"tcUrl\", req->tcUrl) << SRS_JFIELD_CONT  // Add tcUrl for auth publish rtmp stream client\n        << SRS_JFIELD_STR(\"stream\", stream)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "base_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_publish\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"tcUrl\", req->tcUrl) << SRS_JFIELD_CONT  // Add tcUrl for auth publish rtmp stream client\n        << SRS_JFIELD_STR(\"stream\", req->stream)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "res_region": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_publish\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"tcUrl\", SrsJsonAny::str(req->tcUrl.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    \n    std::string data = obj->dumps();",
        "lookback": "    SrsAutoFree(SrsJsonObject, obj);",
        "lookahead": "    std::string res;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 133,
        "end_line": 182,
        "merge_gen_region": null,
        "confidence": 0.8495468497276306,
        "hesitated": true
    },
    {
        "a_contents": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_unpublish\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    \n    std::string data = obj->dumps();",
        "b_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_unpublish\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream)<< SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"param\", req->param)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "base_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_unpublish\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "res_region": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_unpublish\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    \n    std::string data = obj->dumps();",
        "lookback": "    SrsAutoFree(SrsJsonObject, obj);",
        "lookahead": "    std::string res;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 204,
        "end_line": 242,
        "merge_gen_region": "rsObject obj SJson* =rsAnyobject Soutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutput",
        "confidence": 0.8801937103271484,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_play\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    obj->set(\"pageUrl\", SrsJsonAny::str(req->pageUrl.c_str()));\n    \n    std::string data = obj->dumps();",
        "b_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_play\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"param\", req->param) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"pageUrl\", req->pageUrl)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "base_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_play\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"pageUrl\", req->pageUrl)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "res_region": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_play\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    obj->set(\"pageUrl\", SrsJsonAny::str(req->pageUrl.c_str()));\n    \n    std::string data = obj->dumps();",
        "lookback": "    SrsAutoFree(SrsJsonObject, obj);",
        "lookahead": "    std::string res;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 267,
        "end_line": 308,
        "merge_gen_region": "rsObject SJson* =rsAnyobject SAuto(rsJson, SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson::::String& S SJson::::String& S const::&& S const::&& S const::&& S const::&& S const::&& S const::& * const const::& * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const * const *",
        "confidence": 0.8937143683433533,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_stop\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    \n    std::string data = obj->dumps();",
        "b_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_stop\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"param\", req->param)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "base_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_stop\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "res_region": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_stop\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    \n    std::string data = obj->dumps();",
        "lookback": "    SrsAutoFree(SrsJsonObject, obj);",
        "lookahead": "    std::string res;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 330,
        "end_line": 368,
        "merge_gen_region": null,
        "confidence": 0.8759021759033203,
        "hesitated": true
    },
    {
        "a_contents": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_dvr\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    obj->set(\"cwd\", SrsJsonAny::str(cwd.c_str()));\n    obj->set(\"file\", SrsJsonAny::str(file.c_str()));\n    \n    std::string data = obj->dumps();",
        "b_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_dvr\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"param\", req->param) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"cwd\", cwd) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"file\", file)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "base_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_dvr\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"cwd\", cwd) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"file\", file)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "res_region": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_dvr\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    obj->set(\"cwd\", SrsJsonAny::str(cwd.c_str()));\n    obj->set(\"file\", SrsJsonAny::str(file.c_str()));\n    \n    std::string data = obj->dumps();",
        "lookback": "    SrsAutoFree(SrsJsonObject, obj);",
        "lookahead": "    std::string res;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 394,
        "end_line": 438,
        "merge_gen_region": "rsObject SJson::output SrsObject SJson::output SrsObject SJson::String S S SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:::: SJson:: SJson:::: SJson:::: SJson:::: S SJsonString;:: S:: SJsonString:: S SJson::output S SJson:::: S S SJson::output S SJson:::: S S SJson:: Sink S SJson:: Sink S SJson:: Sink S SJson:: Sink S SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJsonoutput SJson:: S S Sink Sink SJson:: Sink S SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: SJson:: S SJson:: S Sink",
        "confidence": 0.8933849930763245,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_hls\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    obj->set(\"duration\", SrsJsonAny::number(duration));\n    obj->set(\"cwd\", SrsJsonAny::str(cwd.c_str()));\n    obj->set(\"file\", SrsJsonAny::str(file.c_str()));\n    obj->set(\"url\", SrsJsonAny::str(ts_url.c_str()));\n    obj->set(\"m3u8\", SrsJsonAny::str(m3u8.c_str()));\n    obj->set(\"m3u8_url\", SrsJsonAny::str(m3u8_url.c_str()));\n    obj->set(\"seq_no\", SrsJsonAny::integer(sn));\n    \n    std::string data = obj->dumps();",
        "b_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_hls\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"param\", req->param) << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"duration\", duration) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"cwd\", cwd) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"file\", file) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"url\", ts_url) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"m3u8\", m3u8) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"m3u8_url\", m3u8_url) << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"seq_no\", sn)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "base_contents": "    std::stringstream ss;\n    ss << SRS_JOBJECT_START\n        << SRS_JFIELD_STR(\"action\", \"on_hls\") << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"client_id\", client_id) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"ip\", req->ip) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"vhost\", req->vhost) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"app\", req->app) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"stream\", req->stream) << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"duration\", duration) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"cwd\", cwd) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"file\", file) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"url\", ts_url) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"m3u8\", m3u8) << SRS_JFIELD_CONT\n        << SRS_JFIELD_STR(\"m3u8_url\", m3u8_url) << SRS_JFIELD_CONT\n        << SRS_JFIELD_ORG(\"seq_no\", sn)\n        << SRS_JOBJECT_END;\n        \n    std::string data = ss.str();",
        "res_region": "    SrsJsonObject* obj = SrsJsonAny::object();\n    SrsAutoFree(SrsJsonObject, obj);\n    \n    obj->set(\"action\", SrsJsonAny::str(\"on_hls\"));\n    obj->set(\"client_id\", SrsJsonAny::integer(client_id));\n    obj->set(\"ip\", SrsJsonAny::str(req->ip.c_str()));\n    obj->set(\"vhost\", SrsJsonAny::str(req->vhost.c_str()));\n    obj->set(\"app\", SrsJsonAny::str(req->app.c_str()));\n    obj->set(\"stream\", SrsJsonAny::str(req->stream.c_str()));\n    obj->set(\"param\", SrsJsonAny::str(req->param.c_str()));\n    obj->set(\"duration\", SrsJsonAny::number(duration));\n    obj->set(\"cwd\", SrsJsonAny::str(cwd.c_str()));\n    obj->set(\"file\", SrsJsonAny::str(file.c_str()));\n    obj->set(\"url\", SrsJsonAny::str(ts_url.c_str()));\n    obj->set(\"m3u8\", SrsJsonAny::str(m3u8.c_str()));\n    obj->set(\"m3u8_url\", SrsJsonAny::str(m3u8_url.c_str()));\n    obj->set(\"seq_no\", SrsJsonAny::integer(sn));\n    \n    std::string data = obj->dumps();",
        "lookback": "    SrsAutoFree(SrsJsonObject, obj);",
        "lookahead": "    std::string res;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 467,
        "end_line": 526,
        "merge_gen_region": "rsObject obj SJson* =rsAnyobject SAuto(rsJson,);->(\"\",rsAny::();rs SAuto(rsJson,);->\",action SrsAny::(\"_\",rsString SJson::output SrsObject obj SJson::String S SJson:: S SJson:: S S SJson:: S S SJson:: S S SJson:: S S SJson:: S S S SJson:: S S S SJson:: S S SJson,_); }rs(\"\",rsJson::(->._()));->(\"\",rsJson::(->._())); objsetvhost SrsAny::(->vhostcstr objsetapp SrsAny::(->appcstr obj->(\"\", SJson::(->._()));->(\"\", SJson::(->\",cstr objsetstream SrsAny::(->._())); objsetparam SrsAnystrreqparamcstr objsetduration SrsAny::( S S SJson:: S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S S",
        "confidence": 0.9035884737968445,
        "hesitated": false,
        "resolved": false
    }
]