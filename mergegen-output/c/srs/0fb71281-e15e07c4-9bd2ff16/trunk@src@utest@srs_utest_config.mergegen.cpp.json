[
    {
        "a_contents": "VOID TEST(ConfigMainTest, ParseFullConf)\n{\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vector<string> listens = conf.get_listens();\n    EXPECT_EQ(1, (int)listens.size());\n    EXPECT_STREQ(\"1935\", listens.at(0).c_str());\n    \n    EXPECT_STREQ(\"./objs/srs.pid\", conf.get_pid_file().c_str());\n    EXPECT_EQ(60000, conf.get_chunk_size(\"\"));\n    EXPECT_STREQ(\"./objs\", conf.get_ffmpeg_log_dir().c_str());\n    EXPECT_TRUE(conf.get_log_tank_file());\n    EXPECT_STREQ(\"trace\", conf.get_log_level().c_str());\n    EXPECT_STREQ(\"./objs/srs.log\", conf.get_log_file().c_str());\n    EXPECT_EQ(1000, conf.get_max_connections());\n    EXPECT_TRUE(conf.get_deamon());\n    \n    EXPECT_FALSE(conf.get_heartbeat_enabled());\n    EXPECT_EQ(9300, conf.get_heartbeat_interval());\n    EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/servers\", conf.get_heartbeat_url().c_str());\n    EXPECT_STREQ(\"my-srs-device\", conf.get_heartbeat_device_id().c_str());\n    EXPECT_FALSE(conf.get_heartbeat_summaries());\n\n    EXPECT_EQ(0, conf.get_stats_network());\n    ASSERT_TRUE(conf.get_stats_disk_device() != NULL);\n    EXPECT_EQ(4, (int)conf.get_stats_disk_device()->args.size());\n    \n    EXPECT_TRUE(conf.get_http_api_enabled());\n    EXPECT_STREQ(\"1985\", conf.get_http_api_listen().c_str());\n    \n    EXPECT_TRUE(conf.get_http_stream_enabled());\n    EXPECT_STREQ(\"8080\", conf.get_http_stream_listen().c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_http_stream_dir().c_str());\n    \n    EXPECT_EQ(10000, conf.get_pithy_print_ms());\n    \n    EXPECT_TRUE(NULL != conf.get_vhost(\"__defaultVhost__\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"same.edge.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"change.edge.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"dvr.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"ingest.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"http.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"with-hls.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"no-hls.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"hooks.callback.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"min.delay.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"refer.anti_suck.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"same.vhost.forward.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"change.vhost.forward.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"mirror.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"crop.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"logo.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"audio.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"vn.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"copy.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"all.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"ffempty.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"app.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"stream.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"bandcheck.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"chunksize.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"jitter.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"atc.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"removed.srs.com\"));\n    \n    string vhost;\n    \n    ////////////////////////////////////////////////////////////////\n    // default vhost template.\n    ////////////////////////////////////////////////////////////////\n    vhost = \"__defaultVhost__\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n    ////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_same_edge)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"same.edge.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_TRUE(conf.get_vhost_is_edge(vhost));\n    EXPECT_TRUE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL != conf.get_vhost_edge_origin(vhost));\n    if (true) {\n        SrsConfDirective* edge = conf.get_vhost_edge_origin(vhost);\n        EXPECT_STREQ(\"127.0.0.1:1935\", edge->arg0().c_str());\n        EXPECT_STREQ(\"localhost:1935\", edge->arg1().c_str());\n    }\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_change_edge)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"change.edge.srs.com\";\n    // TODO: FIXME: implements it.\n    /*EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));*/\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_dvr)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"dvr.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_TRUE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_ingest)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"ingest.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    ASSERT_TRUE(conf.get_ingesters(vhost).size() == 1);\n    if (true) {\n        SrsConfDirective* ingest = conf.get_ingesters(vhost).at(0);\n        EXPECT_STREQ(\"livestream\", ingest->arg0().c_str());\n        \n        EXPECT_TRUE(ingest == conf.get_ingest_by_id(vhost, \"livestream\"));\n        EXPECT_TRUE(conf.get_ingest_enabled(ingest));\n        EXPECT_STREQ(\n            \"./objs/ffmpeg/bin/ffmpeg\", \n            conf.get_ingest_ffmpeg(ingest).c_str()\n        );\n        EXPECT_STREQ(\"file\", conf.get_ingest_input_type(ingest).c_str());\n        EXPECT_STREQ(\n            \"./doc/source.200kbps.768x320.flv\", \n            conf.get_ingest_input_url(ingest).c_str()\n        );\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(ingest);\n        ASSERT_EQ(1, (int)engines.size());\n        \n        SrsConfDirective* transcode = engines.at(0);\n        EXPECT_FALSE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/live?vhost=[vhost]/livestream\", \n            conf.get_engine_output(transcode).c_str()\n        );\n    }\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_http)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"http.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_hls_enabled)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"with-hls.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_TRUE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_hls_disabled)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"no-hls.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_http_hooks)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"hooks.callback.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL != conf.get_vhost_on_connect(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_connect(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/clients\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/clients\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_close(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_close(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/clients\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/clients\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_publish(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_publish(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/streams\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/streams\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_unpublish(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_unpublish(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/streams\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/streams\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_play(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_play(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/sessions\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/sessions\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_stop(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_stop(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/sessions\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/sessions\", callback->arg1().c_str());\n    }\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_min_delay)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"min.delay.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_FALSE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(10, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_refer_anti_suck)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"refer.anti_suck.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(conf.get_refer_enabled(vhost));\n    if (true) {\n        SrsConfDirective* refer = conf.get_refer_all(vhost);\n        EXPECT_STREQ(\"github.com\", refer->arg0().c_str());\n        EXPECT_STREQ(\"github.io\", refer->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_refer_play(vhost));\n    if (true) {\n        SrsConfDirective* refer = conf.get_refer_play(vhost);\n        EXPECT_STREQ(\"github.com\", refer->arg0().c_str());\n        EXPECT_STREQ(\"github.io\", refer->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_refer_publish(vhost));\n    if (true) {\n        SrsConfDirective* refer = conf.get_refer_publish(vhost);\n        EXPECT_STREQ(\"github.com\", refer->arg0().c_str());\n        EXPECT_STREQ(\"github.io\", refer->arg1().c_str());\n    }\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_forward_same_vhost)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"same.vhost.forward.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(conf.get_forward_enabled(vhost));\n    if (true) {\n        SrsConfDirective* forward = conf.get_forwards(vhost);\n        EXPECT_STREQ(\"127.0.0.1:1936\", forward->arg0().c_str());\n        EXPECT_STREQ(\"127.0.0.1:1937\", forward->arg1().c_str());\n    }\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_forward_change_vhost)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"change.vhost.forward.srs.com\";\n    // TODO: FIXME: implements it.\n    /*EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());*/\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_mirror)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"mirror.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_crop)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"crop.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_logo)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"logo.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_audio)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"audio.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_vn)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"vn.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"vn\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_copy)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"copy.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"copy\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_all)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"all.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(1500, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(25, conf.get_engine_vfps(engine));\n            EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(320, conf.get_engine_vheight(engine));\n            EXPECT_EQ(12, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"main\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"medium\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() > 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(70, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() > 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(1);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(1200, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(25, conf.get_engine_vfps(engine));\n            EXPECT_EQ(1382, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(576, conf.get_engine_vheight(engine));\n            EXPECT_EQ(6, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"main\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"medium\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(70, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(2);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(800, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(25, conf.get_engine_vfps(engine));\n            EXPECT_EQ(1152, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(480, conf.get_engine_vheight(engine));\n            EXPECT_EQ(4, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"main\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"fast\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(60, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(3);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(20, conf.get_engine_vfps(engine));\n            EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(320, conf.get_engine_vheight(engine));\n            EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(4);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(5);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(20, conf.get_engine_vfps(engine));\n            EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(320, conf.get_engine_vheight(engine));\n            EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(6);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"copy\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_ffempty)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"ffempty.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/research/ffempty\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_app)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"app.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"live\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"live\");\n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_FALSE(conf.get_engine_enabled(engine));\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_stream)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"stream.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"live/livestream\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"live/livestream\");\n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_FALSE(conf.get_engine_enabled(engine));\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_bandcheck)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"bandcheck.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(65000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_TRUE(conf.get_bw_check_enabled(vhost));\n    EXPECT_STREQ(\"35c9b402c12a7246868752e2878f7e0e\", conf.get_bw_check_key(vhost).c_str());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(4000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_chunksize)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"chunksize.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(128, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_jitter)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"jitter.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_atc)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"atc.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_TRUE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_removed)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"removed.srs.com\";\n    EXPECT_FALSE(conf.get_vhost_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(!conf.get_refer_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(!conf.get_forward_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n",
        "b_contents": "",
        "base_contents": "VOID TEST(ConfigMainTest, ParseFullConf)\n{\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vector<string> listens = conf.get_listens();\n    EXPECT_EQ(1, (int)listens.size());\n    EXPECT_STREQ(\"1935\", listens.at(0).c_str());\n    \n    EXPECT_STREQ(\"./objs/srs.pid\", conf.get_pid_file().c_str());\n    EXPECT_EQ(60000, conf.get_chunk_size(\"\"));\n    EXPECT_STREQ(\"./objs\", conf.get_ffmpeg_log_dir().c_str());\n    EXPECT_TRUE(conf.get_log_tank_file());\n    EXPECT_STREQ(\"trace\", conf.get_log_level().c_str());\n    EXPECT_STREQ(\"./objs/srs.log\", conf.get_log_file().c_str());\n    EXPECT_EQ(1000, conf.get_max_connections());\n    EXPECT_TRUE(conf.get_deamon());\n    \n    EXPECT_FALSE(conf.get_heartbeat_enabled());\n    EXPECT_EQ(9300, conf.get_heartbeat_interval());\n    EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/servers\", conf.get_heartbeat_url().c_str());\n    EXPECT_STREQ(\"my-srs-device\", conf.get_heartbeat_device_id().c_str());\n    EXPECT_FALSE(conf.get_heartbeat_summaries());\n\n    EXPECT_EQ(0, conf.get_stats_network());\n    ASSERT_TRUE(conf.get_stats_disk_device() != NULL);\n    EXPECT_EQ(4, (int)conf.get_stats_disk_device()->args.size());\n    \n    EXPECT_TRUE(conf.get_http_api_enabled());\n    EXPECT_STREQ(\"1985\", conf.get_http_api_listen().c_str());\n    \n    EXPECT_TRUE(conf.get_http_stream_enabled());\n    EXPECT_STREQ(\"8080\", conf.get_http_stream_listen().c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_http_stream_dir().c_str());\n    \n    EXPECT_EQ(10000, conf.get_pithy_print_ms());\n    \n    EXPECT_TRUE(NULL != conf.get_vhost(\"__defaultVhost__\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"same.edge.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"change.edge.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"dvr.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"ingest.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"http.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"with-hls.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"no-hls.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"hooks.callback.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"min.delay.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"refer.anti_suck.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"same.vhost.forward.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"change.vhost.forward.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"mirror.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"crop.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"logo.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"audio.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"vn.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"copy.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"all.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"ffempty.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"app.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"stream.transcode.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"bandcheck.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"chunksize.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"jitter.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"atc.srs.com\"));\n    EXPECT_TRUE(NULL != conf.get_vhost(\"removed.srs.com\"));\n    \n    string vhost;\n    \n    ////////////////////////////////////////////////////////////////\n    // default vhost template.\n    ////////////////////////////////////////////////////////////////\n    vhost = \"__defaultVhost__\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n    ////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_same_edge)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"same.edge.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_TRUE(conf.get_vhost_is_edge(vhost));\n    EXPECT_TRUE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL != conf.get_vhost_edge_origin(vhost));\n    if (true) {\n        SrsConfDirective* edge = conf.get_vhost_edge_origin(vhost);\n        EXPECT_STREQ(\"127.0.0.1:1935\", edge->arg0().c_str());\n        EXPECT_STREQ(\"localhost:1935\", edge->arg1().c_str());\n    }\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_change_edge)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"change.edge.srs.com\";\n    // TODO: FIXME: implements it.\n    /*EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));*/\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_dvr)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"dvr.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_TRUE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_ingest)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"ingest.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    ASSERT_TRUE(conf.get_ingesters(vhost).size() == 1);\n    if (true) {\n        SrsConfDirective* ingest = conf.get_ingesters(vhost).at(0);\n        EXPECT_STREQ(\"livestream\", ingest->arg0().c_str());\n        \n        EXPECT_TRUE(ingest == conf.get_ingest_by_id(vhost, \"livestream\"));\n        EXPECT_TRUE(conf.get_ingest_enabled(ingest));\n        EXPECT_STREQ(\n            \"./objs/ffmpeg/bin/ffmpeg\", \n            conf.get_ingest_ffmpeg(ingest).c_str()\n        );\n        EXPECT_STREQ(\"file\", conf.get_ingest_input_type(ingest).c_str());\n        EXPECT_STREQ(\n            \"./doc/source.200kbps.768x320.flv\", \n            conf.get_ingest_input_url(ingest).c_str()\n        );\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(ingest);\n        ASSERT_EQ(1, (int)engines.size());\n        \n        SrsConfDirective* transcode = engines.at(0);\n        EXPECT_FALSE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/live?vhost=[vhost]/livestream\", \n            conf.get_engine_output(transcode).c_str()\n        );\n    }\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_http)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"http.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_hls_enabled)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"with-hls.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_TRUE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_hls_disabled)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"no-hls.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_http_hooks)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"hooks.callback.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_TRUE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL != conf.get_vhost_on_connect(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_connect(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/clients\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/clients\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_close(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_close(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/clients\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/clients\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_publish(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_publish(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/streams\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/streams\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_unpublish(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_unpublish(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/streams\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/streams\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_play(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_play(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/sessions\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/sessions\", callback->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_vhost_on_stop(vhost));\n    if (true) {\n        SrsConfDirective* callback = conf.get_vhost_on_stop(vhost);\n        EXPECT_STREQ(\"http://127.0.0.1:8085/api/v1/sessions\", callback->arg0().c_str());\n        EXPECT_STREQ(\"http://localhost:8085/api/v1/sessions\", callback->arg1().c_str());\n    }\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_min_delay)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n    \n    vhost = \"min.delay.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_FALSE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(10, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_refer_anti_suck)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"refer.anti_suck.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL != conf.get_refer(vhost));\n    if (true) {\n        SrsConfDirective* refer = conf.get_refer(vhost);\n        EXPECT_STREQ(\"github.com\", refer->arg0().c_str());\n        EXPECT_STREQ(\"github.io\", refer->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_refer_play(vhost));\n    if (true) {\n        SrsConfDirective* refer = conf.get_refer_play(vhost);\n        EXPECT_STREQ(\"github.com\", refer->arg0().c_str());\n        EXPECT_STREQ(\"github.io\", refer->arg1().c_str());\n    }\n    EXPECT_TRUE(NULL != conf.get_refer_publish(vhost));\n    if (true) {\n        SrsConfDirective* refer = conf.get_refer_publish(vhost);\n        EXPECT_STREQ(\"github.com\", refer->arg0().c_str());\n        EXPECT_STREQ(\"github.io\", refer->arg1().c_str());\n    }\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_forward_same_vhost)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"same.vhost.forward.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL != conf.get_forward(vhost));\n    if (true) {\n        SrsConfDirective* forward = conf.get_forward(vhost);\n        EXPECT_STREQ(\"127.0.0.1:1936\", forward->arg0().c_str());\n        EXPECT_STREQ(\"127.0.0.1:1937\", forward->arg1().c_str());\n    }\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_forward_change_vhost)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"change.vhost.forward.srs.com\";\n    // TODO: FIXME: implements it.\n    /*EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());*/\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_mirror)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"mirror.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_crop)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"crop.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_logo)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"logo.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_audio)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"audio.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_vn)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"vn.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"vn\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_copy)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"copy.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"copy\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_all)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"all.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/ffmpeg/bin/ffmpeg\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        if (true) {\n            SrsConfDirective* engine = engines.at(0);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() > 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(1500, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(25, conf.get_engine_vfps(engine));\n            EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(320, conf.get_engine_vheight(engine));\n            EXPECT_EQ(12, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"main\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"medium\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() > 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(70, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() > 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(1);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(1200, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(25, conf.get_engine_vfps(engine));\n            EXPECT_EQ(1382, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(576, conf.get_engine_vheight(engine));\n            EXPECT_EQ(6, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"main\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"medium\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(70, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(2);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(800, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(25, conf.get_engine_vfps(engine));\n            EXPECT_EQ(1152, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(480, conf.get_engine_vheight(engine));\n            EXPECT_EQ(4, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"main\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"fast\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(60, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(3);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(20, conf.get_engine_vfps(engine));\n            EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(320, conf.get_engine_vheight(engine));\n            EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(4);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n            EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n            EXPECT_EQ(2, conf.get_engine_achannels(engine));\n            EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(5);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n            EXPECT_EQ(20, conf.get_engine_vfps(engine));\n            EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n            EXPECT_EQ(320, conf.get_engine_vheight(engine));\n            EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n            EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n            EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n        if (true) {\n            SrsConfDirective* engine = engines.at(6);\n            EXPECT_TRUE(conf.get_engine_enabled(engine));\n            EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n            EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n            EXPECT_STREQ(\"copy\", conf.get_engine_vcodec(engine).c_str());\n            EXPECT_STREQ(\"copy\", conf.get_engine_acodec(engine).c_str());\n            EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n            EXPECT_STREQ(\n                \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n                conf.get_engine_output(engine).c_str()\n            );\n        }\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_ffempty)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"ffempty.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"\");\n        \n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        EXPECT_STREQ(\"./objs/research/ffempty\", conf.get_transcode_ffmpeg(transcode).c_str());\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_TRUE(conf.get_engine_enabled(engine));\n        EXPECT_STREQ(\"flv\", conf.get_engine_iformat(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vfilter(engine).size() == 0);\n        EXPECT_STREQ(\"libx264\", conf.get_engine_vcodec(engine).c_str());\n        EXPECT_EQ(300, conf.get_engine_vbitrate(engine));\n        EXPECT_EQ(20, conf.get_engine_vfps(engine));\n        EXPECT_EQ(768, conf.get_engine_vwidth(engine));\n        EXPECT_EQ(320, conf.get_engine_vheight(engine));\n        EXPECT_EQ(2, conf.get_engine_vthreads(engine));\n        EXPECT_STREQ(\"baseline\", conf.get_engine_vprofile(engine).c_str());\n        EXPECT_STREQ(\"superfast\", conf.get_engine_vpreset(engine).c_str());\n        EXPECT_TRUE((int)conf.get_engine_vparams(engine).size() == 0);\n        EXPECT_STREQ(\"libfdk_aac\", conf.get_engine_acodec(engine).c_str());\n        EXPECT_EQ(45, conf.get_engine_abitrate(engine));\n        EXPECT_EQ(44100, conf.get_engine_asample_rate(engine));\n        EXPECT_EQ(2, conf.get_engine_achannels(engine));\n        EXPECT_TRUE((int)conf.get_engine_aparams(engine).size() == 0);\n        EXPECT_STREQ(\"flv\", conf.get_engine_oformat(engine).c_str());\n        EXPECT_STREQ(\n            \"rtmp://127.0.0.1:[port]/[app]?vhost=[vhost]/[stream]_[engine]\", \n            conf.get_engine_output(engine).c_str()\n        );\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_app)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"app.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"live\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"live\");\n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_FALSE(conf.get_engine_enabled(engine));\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_transcode_stream)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"stream.transcode.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(NULL != conf.get_transcode(vhost, \"live/livestream\"));\n    if (true) {\n        SrsConfDirective* transcode = conf.get_transcode(vhost, \"live/livestream\");\n        EXPECT_TRUE(conf.get_transcode_enabled(transcode));\n        \n        vector<SrsConfDirective*> engines = conf.get_transcode_engines(transcode);\n        ASSERT_TRUE((int)engines.size() != 0);\n        \n        SrsConfDirective* engine = engines.at(0);\n        EXPECT_FALSE(conf.get_engine_enabled(engine));\n    }\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_bandcheck)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"bandcheck.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(65000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_TRUE(conf.get_bw_check_enabled(vhost));\n    EXPECT_STREQ(\"35c9b402c12a7246868752e2878f7e0e\", conf.get_bw_check_key(vhost).c_str());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(4000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_chunksize)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"chunksize.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(128, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_jitter)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"jitter.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_atc)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"atc.srs.com\";\n    EXPECT_TRUE(conf.get_vhost_enabled(vhost));\n    EXPECT_TRUE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_TRUE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n\nVOID TEST(ConfigMainTest, ParseFullConf_removed)\n{\n    string vhost;\n    MockSrsConfig conf;\n    EXPECT_TRUE(ERROR_SUCCESS == conf.parse(_full_conf));\n\n    vhost = \"removed.srs.com\";\n    EXPECT_FALSE(conf.get_vhost_enabled(vhost));\n    EXPECT_FALSE(conf.get_vhost_enabled(conf.get_vhost(vhost)));\n    EXPECT_TRUE(conf.get_gop_cache(vhost));\n    EXPECT_TRUE(conf.get_debug_srs_upnode(vhost));\n    EXPECT_FALSE(conf.get_atc(vhost));\n    EXPECT_TRUE(conf.get_atc_auto(vhost));\n    EXPECT_TRUE(conf.get_time_jitter(vhost) == SrsRtmpJitterAlgorithmFULL);\n    EXPECT_FLOAT_EQ(30, conf.get_queue_length(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_refer_publish(vhost));\n    EXPECT_EQ(60000, conf.get_chunk_size(vhost));\n    EXPECT_TRUE(NULL == conf.get_forward(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_hooks_enabled(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_connect(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_close(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_publish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_unpublish(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_play(vhost));\n    EXPECT_TRUE(NULL == conf.get_vhost_on_stop(vhost));\n    EXPECT_FALSE(conf.get_bw_check_enabled(vhost));\n    EXPECT_TRUE(conf.get_bw_check_key(vhost).empty());\n    EXPECT_EQ(30000, conf.get_bw_check_interval_ms(vhost));\n    EXPECT_EQ(1000, conf.get_bw_check_limit_kbps(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(vhost));\n    EXPECT_FALSE(conf.get_vhost_is_edge(conf.get_vhost(vhost)));\n    EXPECT_TRUE(NULL == conf.get_vhost_edge_origin(vhost));\n    EXPECT_FALSE(conf.get_vhost_edge_token_traverse(vhost));\n    EXPECT_TRUE(NULL == conf.get_transcode(vhost, \"\"));\n    EXPECT_FALSE(conf.get_transcode_enabled(NULL));\n    EXPECT_TRUE(conf.get_transcode_ffmpeg(NULL).empty());\n    EXPECT_TRUE(conf.get_transcode_engines(NULL).size() == 0);\n    EXPECT_FALSE(conf.get_engine_enabled(NULL));\n    EXPECT_STREQ(\"flv\", conf.get_engine_iformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_vfilter(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_vcodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vbitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vfps(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vwidth(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vheight(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vthreads(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_vprofile(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vpreset(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_vparams(NULL).size() == 0);\n    EXPECT_TRUE(conf.get_engine_acodec(NULL).empty());\n    EXPECT_TRUE(conf.get_engine_abitrate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_asample_rate(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_achannels(NULL) == 0);\n    EXPECT_TRUE(conf.get_engine_aparams(NULL).size() == 0);\n    EXPECT_STREQ(\"flv\", conf.get_engine_oformat(NULL).c_str());\n    EXPECT_TRUE(conf.get_engine_output(NULL).empty());\n    EXPECT_TRUE(conf.get_ingesters(vhost).size() == 0);\n    EXPECT_TRUE(NULL == conf.get_ingest_by_id(vhost, \"\"));\n    EXPECT_FALSE(conf.get_ingest_enabled(NULL));\n    EXPECT_TRUE(conf.get_ingest_ffmpeg(NULL).empty());\n    EXPECT_STREQ(\"file\", conf.get_ingest_input_type(NULL).c_str());\n    EXPECT_TRUE(conf.get_ingest_input_url(NULL).empty());\n    EXPECT_FALSE(conf.get_hls_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_hls_path(vhost).c_str());\n    EXPECT_EQ(10, conf.get_hls_fragment(vhost));\n    EXPECT_EQ(60, conf.get_hls_window(vhost));\n    EXPECT_FALSE(conf.get_dvr_enabled(vhost));\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_dvr_path(vhost).c_str());\n    EXPECT_STREQ(\"session\", conf.get_dvr_plan(vhost).c_str());\n    EXPECT_EQ(30, conf.get_dvr_duration(vhost));\n    EXPECT_TRUE(conf.get_dvr_wait_keyframe(vhost));\n    EXPECT_TRUE(SrsRtmpJitterAlgorithmFULL == conf.get_dvr_time_jitter(vhost));\n    EXPECT_FALSE(conf.get_vhost_http_enabled(vhost));\n    EXPECT_STREQ(\"[vhost]/\", conf.get_vhost_http_mount(vhost).c_str());\n    EXPECT_STREQ(\"./objs/nginx/html\", conf.get_vhost_http_dir(vhost).c_str());\n}\n",
        "res_region": "",
        "lookback": "{",
        "lookahead": "VOID TEST(ConfigMainTest, CheckConf_listen)",
        "label": [
            "base",
            "base_empty"
        ],
        "start_line": 708,
        "end_line": 5821,
        "merge_gen_region": null,
        "confidence": 0.8100180625915527,
        "hesitated": true
    }
]