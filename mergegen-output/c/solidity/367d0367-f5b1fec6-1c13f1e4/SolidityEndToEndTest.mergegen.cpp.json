[
    {
        "a_contents": "BOOST_AUTO_TEST_CASE(overloaded_function_call_resolve_to_first)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction g() returns(uint d) { return f(3); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(3));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_call_resolve_to_second)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction g() returns(uint d) { return f(3, 7); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(10));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_call_with_if_else)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction g(bool flag) returns(uint d) {\n\t\t\t\tif (flag)\n\t\t\t\t\treturn f(3);\n\t\t\t\telse\n\t\t\t\t\treturn f(3, 7);\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", true) == encodeArgs(3));\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", false) == encodeArgs(10));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_with_var)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction g(bool flag) returns(uint d) {\n\t\t\t\tvar x = f;\n\t\t\t\tif (flag)\n\t\t\t\t\treturn x(3);\n\t\t\t\telse\n\t\t\t\t\treturn x(3, 7);\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", true) == encodeArgs(3));\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", false) == encodeArgs(10));\n}\n\nBOOST_AUTO_TEST_CASE(derived_overload_base_function_direct)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract B { function f() returns(uint) { return 10; } }\n\t\tcontract C is B {\n\t\t\tfunction f(uint i) returns(uint) { return 2 * i; }\n\t\t\tfunction g() returns(uint) { return f(1); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode, 0, \"C\");\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(2));\n}\n\nBOOST_AUTO_TEST_CASE(derived_overload_base_function_indirect)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract A { function f(uint a) returns(uint) { return 2 * a; } }\n\t\tcontract B { function f() returns(uint) { return 10; } }\n\t\tcontract C is A, B {\n\t\t\tfunction g() returns(uint) { return f(); }\n\t\t\tfunction h() returns(uint) { return f(1); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode, 0, \"C\");\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(10));\n\tBOOST_CHECK(callContractFunction(\"h()\") == encodeArgs(2));\n}",
        "b_contents": "BOOST_AUTO_TEST_CASE(simple_constant_variables_test)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract Foo {\n\t\t\tfunction getX() returns (uint r) { return x; }\n\t\t\tuint constant x = 56;\n\t})\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"getX()\") == encodeArgs(56));\n}\n\nBOOST_AUTO_TEST_CASE(constant_variables)\n{\n\t//for now constant specifier is valid only for uint bytesXX and enums\n\tchar const* sourceCode = R\"(\n\t\tcontract Foo {\n\t\t\tuint constant x = 56;\n\t\t\tenum ActionChoices { GoLeft, GoRight, GoStraight, Sit }\n\t\t\tActionChoices constant choices = ActionChoices.GoLeft;\n\t\t\tbytes32 constant st = \"abc\\x00\\xff__\";\n\t})\";\n\tcompileAndRun(sourceCode);\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_uint)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct str { uint8 a; uint16 b; uint248 c; }\n\t\t\tstr data;\n\t\t\tfunction test() returns (uint) {\n\t\t\t\tdata.a = 2;\n\t\t\t\tif (data.a != 2) return 2;\n\t\t\t\tdata.b = 0xabcd;\n\t\t\t\tif (data.b != 0xabcd) return 3;\n\t\t\t\tdata.c = 0x1234567890;\n\t\t\t\tif (data.c != 0x1234567890) return 4;\n\t\t\t\tif (data.a != 2) return 5;\n\t\t\t\tdata.a = 8;\n\t\t\t\tif (data.a != 8) return 6;\n\t\t\t\tif (data.b != 0xabcd) return 7;\n\t\t\t\tdata.b = 0xdcab;\n\t\t\t\tif (data.b != 0xdcab) return 8;\n\t\t\t\tif (data.c != 0x1234567890) return 9;\n\t\t\t\tdata.c = 0x9876543210;\n\t\t\t\tif (data.c != 0x9876543210) return 10;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(1));\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_enum)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tenum small { A, B, C, D }\n\t\t\tenum larger { A, B, C, D, E}\n\t\t\tstruct str { small a; small b; larger c; larger d; }\n\t\t\tstr data;\n\t\t\tfunction test() returns (uint) {\n\t\t\t\tdata.a = small.B;\n\t\t\t\tif (data.a != small.B) return 2;\n\t\t\t\tdata.b = small.C;\n\t\t\t\tif (data.b != small.C) return 3;\n\t\t\t\tdata.c = larger.D;\n\t\t\t\tif (data.c != larger.D) return 4;\n\t\t\t\tif (data.a != small.B) return 5;\n\t\t\t\tdata.a = small.C;\n\t\t\t\tif (data.a != small.C) return 6;\n\t\t\t\tif (data.b != small.C) return 7;\n\t\t\t\tdata.b = small.D;\n\t\t\t\tif (data.b != small.D) return 8;\n\t\t\t\tif (data.c != larger.D) return 9;\n\t\t\t\tdata.c = larger.B;\n\t\t\t\tif (data.c != larger.B) return 10;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(1));\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_bytes)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct s1 { byte a; byte b; bytes10 c; bytes9 d; bytes10 e; }\n\t\t\tstruct s2 { byte a; s1 inner; byte b; byte c; }\n\t\t\tbyte x;\n\t\t\ts2 data;\n\t\t\tbyte y;\n\t\t\tfunction test() returns (bool) {\n\t\t\t\tx = 1;\n\t\t\t\tdata.a = 2;\n\t\t\t\tdata.inner.a = 3;\n\t\t\t\tdata.inner.b = 4;\n\t\t\t\tdata.inner.c = \"1234567890\";\n\t\t\t\tdata.inner.d = \"123456789\";\n\t\t\t\tdata.inner.e = \"abcdefghij\";\n\t\t\t\tdata.b = 5;\n\t\t\t\tdata.c = 6;\n\t\t\t\ty = 7;\n\t\t\t\treturn x == 1 && data.a == 2 && data.inner.a == 3 && data.inner.b == 4 &&\n\t\t\t\t\tdata.inner.c == \"1234567890\" && data.inner.d == \"123456789\" &&\n\t\t\t\t\tdata.inner.e == \"abcdefghij\" && data.b == 5 && data.c == 6 && y == 7;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(true));\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_delete)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct str { uint8 a; uint16 b; uint8 c; }\n\t\t\tuint8 x;\n\t\t\tuint16 y;\n\t\t\tstr data;\n\t\t\tfunction test() returns (uint) {\n\t\t\t\tx = 1;\n\t\t\t\ty = 2;\n\t\t\t\tdata.a = 2;\n\t\t\t\tdata.b = 0xabcd;\n\t\t\t\tdata.c = 0xfa;\n\t\t\t\tif (x != 1 || y != 2 || data.a != 2 || data.b != 0xabcd || data.c != 0xfa)\n\t\t\t\t\treturn 2;\n\t\t\t\tdelete y;\n\t\t\t\tdelete data.b;\n\t\t\t\tif (x != 1 || y != 0 || data.a != 2 || data.b != 0 || data.c != 0xfa)\n\t\t\t\t\treturn 3;\n\t\t\t\tdelete x;\n\t\t\t\tdelete data;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(1));\n\tBOOST_CHECK(m_state.storage(m_contractAddress).empty());\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_with_bytes0)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct str { uint8 a; bytes0 b; uint8 c; }\n\t\t\tuint8 a;\n\t\t\tbytes0 x;\n\t\t\tuint8 b;\n\t\t\tstr data;\n\t\t\tfunction test() returns (bool) {\n\t\t\t\ta = 2;\n\t\t\t\tb = 3;\n\t\t\t\tdata.a = 4;\n\t\t\t\tdata.c = 5;\n\t\t\t\tdelete x;\n\t\t\t\tdelete data.b;\n\t\t\t\treturn a == 2 && b == 3 && data.a == 4 && data.c == 5;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(true));\n}",
        "base_contents": "",
        "res_region": "BOOST_AUTO_TEST_CASE(simple_constant_variables_test)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract Foo {\n\t\t\tfunction getX() returns (uint r) { return x; }\n\t\t\tuint constant x = 56;\n\t})\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"getX()\") == encodeArgs(56));\n}\n\nBOOST_AUTO_TEST_CASE(constant_variables)\n{\n\t//for now constant specifier is valid only for uint bytesXX and enums\n\tchar const* sourceCode = R\"(\n\t\tcontract Foo {\n\t\t\tuint constant x = 56;\n\t\t\tenum ActionChoices { GoLeft, GoRight, GoStraight, Sit }\n\t\t\tActionChoices constant choices = ActionChoices.GoLeft;\n\t\t\tbytes32 constant st = \"abc\\x00\\xff__\";\n\t})\";\n\tcompileAndRun(sourceCode);\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_uint)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct str { uint8 a; uint16 b; uint248 c; }\n\t\t\tstr data;\n\t\t\tfunction test() returns (uint) {\n\t\t\t\tdata.a = 2;\n\t\t\t\tif (data.a != 2) return 2;\n\t\t\t\tdata.b = 0xabcd;\n\t\t\t\tif (data.b != 0xabcd) return 3;\n\t\t\t\tdata.c = 0x1234567890;\n\t\t\t\tif (data.c != 0x1234567890) return 4;\n\t\t\t\tif (data.a != 2) return 5;\n\t\t\t\tdata.a = 8;\n\t\t\t\tif (data.a != 8) return 6;\n\t\t\t\tif (data.b != 0xabcd) return 7;\n\t\t\t\tdata.b = 0xdcab;\n\t\t\t\tif (data.b != 0xdcab) return 8;\n\t\t\t\tif (data.c != 0x1234567890) return 9;\n\t\t\t\tdata.c = 0x9876543210;\n\t\t\t\tif (data.c != 0x9876543210) return 10;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(1));\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_enum)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tenum small { A, B, C, D }\n\t\t\tenum larger { A, B, C, D, E}\n\t\t\tstruct str { small a; small b; larger c; larger d; }\n\t\t\tstr data;\n\t\t\tfunction test() returns (uint) {\n\t\t\t\tdata.a = small.B;\n\t\t\t\tif (data.a != small.B) return 2;\n\t\t\t\tdata.b = small.C;\n\t\t\t\tif (data.b != small.C) return 3;\n\t\t\t\tdata.c = larger.D;\n\t\t\t\tif (data.c != larger.D) return 4;\n\t\t\t\tif (data.a != small.B) return 5;\n\t\t\t\tdata.a = small.C;\n\t\t\t\tif (data.a != small.C) return 6;\n\t\t\t\tif (data.b != small.C) return 7;\n\t\t\t\tdata.b = small.D;\n\t\t\t\tif (data.b != small.D) return 8;\n\t\t\t\tif (data.c != larger.D) return 9;\n\t\t\t\tdata.c = larger.B;\n\t\t\t\tif (data.c != larger.B) return 10;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(1));\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_bytes)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct s1 { byte a; byte b; bytes10 c; bytes9 d; bytes10 e; }\n\t\t\tstruct s2 { byte a; s1 inner; byte b; byte c; }\n\t\t\tbyte x;\n\t\t\ts2 data;\n\t\t\tbyte y;\n\t\t\tfunction test() returns (bool) {\n\t\t\t\tx = 1;\n\t\t\t\tdata.a = 2;\n\t\t\t\tdata.inner.a = 3;\n\t\t\t\tdata.inner.b = 4;\n\t\t\t\tdata.inner.c = \"1234567890\";\n\t\t\t\tdata.inner.d = \"123456789\";\n\t\t\t\tdata.inner.e = \"abcdefghij\";\n\t\t\t\tdata.b = 5;\n\t\t\t\tdata.c = 6;\n\t\t\t\ty = 7;\n\t\t\t\treturn x == 1 && data.a == 2 && data.inner.a == 3 && data.inner.b == 4 &&\n\t\t\t\t\tdata.inner.c == \"1234567890\" && data.inner.d == \"123456789\" &&\n\t\t\t\t\tdata.inner.e == \"abcdefghij\" && data.b == 5 && data.c == 6 && y == 7;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(true));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_call_resolve_to_first)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction g() returns(uint d) { return f(3); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(3));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_call_resolve_to_second)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction g() returns(uint d) { return f(3, 7); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(10));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_call_with_if_else)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction g(bool flag) returns(uint d) {\n\t\t\t\tif (flag)\n\t\t\t\t\treturn f(3);\n\t\t\t\telse\n\t\t\t\t\treturn f(3, 7);\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", true) == encodeArgs(3));\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", false) == encodeArgs(10));\n}\n\nBOOST_AUTO_TEST_CASE(overloaded_function_with_var)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract test {\n\t\t\tfunction f(uint k) returns(uint d) { return k; }\n\t\t\tfunction f(uint a, uint b) returns(uint d) { return a + b; }\n\t\t\tfunction g(bool flag) returns(uint d) {\n\t\t\t\tvar x = f;\n\t\t\t\tif (flag)\n\t\t\t\t\treturn x(3);\n\t\t\t\telse\n\t\t\t\t\treturn x(3, 7);\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", true) == encodeArgs(3));\n\tBOOST_CHECK(callContractFunction(\"g(bool)\", false) == encodeArgs(10));\n}\n\nBOOST_AUTO_TEST_CASE(derived_overload_base_function_direct)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract B { function f() returns(uint) { return 10; } }\n\t\tcontract C is B {\n\t\t\tfunction f(uint i) returns(uint) { return 2 * i; }\n\t\t\tfunction g() returns(uint) { return f(1); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode, 0, \"C\");\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(2));\n}\n\nBOOST_AUTO_TEST_CASE(derived_overload_base_function_indirect)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract A { function f(uint a) returns(uint) { return 2 * a; } }\n\t\tcontract B { function f() returns(uint) { return 10; } }\n\t\tcontract C is A, B {\n\t\t\tfunction g() returns(uint) { return f(); }\n\t\t\tfunction h() returns(uint) { return f(1); }\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode, 0, \"C\");\n\tBOOST_CHECK(callContractFunction(\"g()\") == encodeArgs(10));\n\tBOOST_CHECK(callContractFunction(\"h()\") == encodeArgs(2));\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_delete)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct str { uint8 a; uint16 b; uint8 c; }\n\t\t\tuint8 x;\n\t\t\tuint16 y;\n\t\t\tstr data;\n\t\t\tfunction test() returns (uint) {\n\t\t\t\tx = 1;\n\t\t\t\ty = 2;\n\t\t\t\tdata.a = 2;\n\t\t\t\tdata.b = 0xabcd;\n\t\t\t\tdata.c = 0xfa;\n\t\t\t\tif (x != 1 || y != 2 || data.a != 2 || data.b != 0xabcd || data.c != 0xfa)\n\t\t\t\t\treturn 2;\n\t\t\t\tdelete y;\n\t\t\t\tdelete data.b;\n\t\t\t\tif (x != 1 || y != 0 || data.a != 2 || data.b != 0 || data.c != 0xfa)\n\t\t\t\t\treturn 3;\n\t\t\t\tdelete x;\n\t\t\t\tdelete data;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(1));\n\tBOOST_CHECK(m_state.storage(m_contractAddress).empty());\n}\n\nBOOST_AUTO_TEST_CASE(packed_storage_structs_with_bytes0)\n{\n\tchar const* sourceCode = R\"(\n\t\tcontract C {\n\t\t\tstruct str { uint8 a; bytes0 b; uint8 c; }\n\t\t\tuint8 a;\n\t\t\tbytes0 x;\n\t\t\tuint8 b;\n\t\t\tstr data;\n\t\t\tfunction test() returns (bool) {\n\t\t\t\ta = 2;\n\t\t\t\tb = 3;\n\t\t\t\tdata.a = 4;\n\t\t\t\tdata.c = 5;\n\t\t\t\tdelete x;\n\t\t\t\tdelete data.b;\n\t\t\t\treturn a == 2 && b == 3 && data.a == 4 && data.c == 5;\n\t\t\t}\n\t\t}\n\t)\";\n\tcompileAndRun(sourceCode);\n\tBOOST_CHECK(callContractFunction(\"test()\") == encodeArgs(true));\n}",
        "lookback": "{",
        "lookahead": "",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 3457,
        "end_line": 3722,
        "merge_gen_region": null,
        "confidence": 0.5062445998191833,
        "hesitated": true
    }
]