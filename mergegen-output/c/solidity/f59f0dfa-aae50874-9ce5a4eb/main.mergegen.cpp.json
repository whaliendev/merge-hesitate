[
    {
        "a_contents": "\tcout << \"Syntax trees:\" << endl << endl;\n\tfor (auto const& sourceCode: sourceCodes)\n\t{\n\t\tcout << endl << \"======= \" << sourceCode.first << \" =======\" << endl;\n\t\tASTPrinter printer(compiler.getAST(sourceCode.first), sourceCode.second);\n\t\tprinter.print(cout);\n\t}\n\tvector<string> contracts = compiler.getContractNames();\n\tcout << endl << \"Contracts:\" << endl;\n\tfor (string const& contract: contracts)\n\t{\n\t\tcout << endl << \"======= \" << contract << \" =======\" << endl\n\t\t\t << \"EVM assembly:\" << endl;\n\t\tcompiler.streamAssembly(cout, contract);\n\t\tcout << \"Opcodes:\" << endl\n\t\t\t << eth::disassemble(compiler.getBytecode(contract)) << endl\n\t\t\t << \"Binary: \" << toHex(compiler.getBytecode(contract)) << endl\n\t\t\t << \"Interface specification: \" << compiler.getInterface(contract) << endl;\n\t}",
        "b_contents": "\tcout << \"Syntax tree for the contract:\" << endl;\n\tASTPrinter printer(compiler.getAST(), sourceCode);\n\tprinter.print(cout);\n\tcout << \"EVM assembly:\" << endl;\n\tcompiler.streamAssembly(cout);\n\tcout << \"Opcodes:\" << endl;\n\tcout << eth::disassemble(compiler.getBytecode()) << endl;\n\tcout << \"Binary: \" << toHex(compiler.getBytecode()) << endl;\n\tcout << \"Interface specification: \" << compiler.getJsonDocumentation(ABI_INTERFACE) << endl;\n\tcout << \"Natspec user documentation: \" << compiler.getJsonDocumentation(NATSPEC_USER) << endl;\n\tcout << \"Natspec developer documentation: \" << compiler.getJsonDocumentation(NATSPEC_DEV) << endl;",
        "base_contents": "\tcout << \"Syntax tree for the contract:\" << endl;\n\tASTPrinter printer(compiler.getAST(), sourceCode);\n\tprinter.print(cout);\n\tcout << \"EVM assembly:\" << endl;\n\tcompiler.streamAssembly(cout);\n\tcout << \"Opcodes:\" << endl;\n\tcout << eth::disassemble(compiler.getBytecode()) << endl;\n\tcout << \"Binary: \" << toHex(compiler.getBytecode()) << endl;\n\tcout << \"Interface specification: \" << compiler.getInterface() << endl;",
        "res_region": "\tcout << \"Syntax trees:\" << endl << endl;\n\tfor (auto const& sourceCode: sourceCodes)\n\t{\n\t\tcout << endl << \"======= \" << sourceCode.first << \" =======\" << endl;\n\t\tASTPrinter printer(compiler.getAST(sourceCode.first), sourceCode.second);\n\t\tprinter.print(cout);\n\t}\n\tvector<string> contracts = compiler.getContractNames();\n\tcout << endl << \"Contracts:\" << endl;\n\tfor (string const& contract: contracts)\n\t{\n\t\tcout << endl << \"======= \" << contract << \" =======\" << endl\n\t\t\t << \"EVM assembly:\" << endl;\n\t\tcompiler.streamAssembly(cout, contract);\n\t\tcout << \"Opcodes:\" << endl\n\t\t\t << eth::disassemble(compiler.getBytecode(contract)) << endl\n\t\t\t << \"Binary: \" << toHex(compiler.getBytecode(contract)) << endl\n\t\t\t << \"Interface specification: \" << compiler.getJsonDocumentation(contract, ABI_INTERFACE) << endl\n\t\t\t << \"Natspec user documentation: \" << compiler.getJsonDocumentation(contract, NATSPEC_USER) << endl\n\t\t\t << \"Natspec developer documentation: \" << compiler.getJsonDocumentation(contract, NATSPEC_DEV) << endl;\n\t}",
        "lookback": "\tfor (auto const& sourceCode: sourceCodes)",
        "lookahead": "",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 132,
        "end_line": 174,
        "merge_gen_region": "outputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutput",
        "confidence": 0.9111303091049194,
        "hesitated": false,
        "resolved": false
    }
]