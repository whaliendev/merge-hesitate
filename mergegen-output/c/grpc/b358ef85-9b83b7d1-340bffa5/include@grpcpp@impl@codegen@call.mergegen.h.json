[
    {
        "a_contents": "  CallOpSet() : cq_tag_(this), return_tag_(this) {}\n  void FillOps(Call* call) override {\n    done_intercepting_ = false;\n    g_core_codegen_interface->grpc_call_ref(call->call());\n    call_ =\n        *call;  // It's fine to create a copy of call since it's just pointers\n\n    if (RunInterceptors()) {\n      ContinueFillOpsAfterInterception();\n    } else {\n      // After the interceptors are run, ContinueFillOpsAfterInterception will\n      // be run\n    }",
        "b_contents": "  CallOpSet() : cq_tag_(this), return_tag_(this), call_(nullptr) {}\n\n  // The copy constructor and assignment operator reset the value of\n  // cq_tag_ and return_tag_ since those are only meaningful on a specific\n  // object, not across objects.\n  CallOpSet(const CallOpSet& other)\n      : cq_tag_(this), return_tag_(this), call_(other.call_) {}\n  CallOpSet& operator=(const CallOpSet& other) {\n    cq_tag_ = this;\n    return_tag_ = this;\n    call_ = other.call_;\n    return *this;\n  }\n\n  void FillOps(grpc_call* call, grpc_op* ops, size_t* nops) override {\n    this->Op1::AddOp(ops, nops);\n    this->Op2::AddOp(ops, nops);\n    this->Op3::AddOp(ops, nops);\n    this->Op4::AddOp(ops, nops);\n    this->Op5::AddOp(ops, nops);\n    this->Op6::AddOp(ops, nops);\n    g_core_codegen_interface->grpc_call_ref(call);\n    call_ = call;",
        "base_contents": "  CallOpSet() : cq_tag_(this), return_tag_(this), call_(nullptr) {}\n  void FillOps(grpc_call* call, grpc_op* ops, size_t* nops) override {\n    this->Op1::AddOp(ops, nops);\n    this->Op2::AddOp(ops, nops);\n    this->Op3::AddOp(ops, nops);\n    this->Op4::AddOp(ops, nops);\n    this->Op5::AddOp(ops, nops);\n    this->Op6::AddOp(ops, nops);\n    g_core_codegen_interface->grpc_call_ref(call);\n    call_ = call;",
        "res_region": "  CallOpSet() : cq_tag_(this), return_tag_(this) {}\n  // The copy constructor and assignment operator reset the value of\n  // cq_tag_ and return_tag_ since those are only meaningful on a specific\n  // object, not across objects.\n  CallOpSet(const CallOpSet& other)\n      : cq_tag_(this),\n        return_tag_(this),\n        call_(other.call_),\n        done_intercepting_(false),\n        interceptor_methods_(InterceptorBatchMethodsImpl()) {}\n\n  CallOpSet& operator=(const CallOpSet& other) {\n    cq_tag_ = this;\n    return_tag_ = this;\n    call_ = other.call_;\n    done_intercepting_ = false;\n    interceptor_methods_ = InterceptorBatchMethodsImpl();\n    return *this;\n  }\n\n  void FillOps(Call* call) override {\n    done_intercepting_ = false;\n    g_core_codegen_interface->grpc_call_ref(call->call());\n    call_ =\n        *call;  // It's fine to create a copy of call since it's just pointers\n\n    if (RunInterceptors()) {\n      ContinueFillOpsAfterInterception();\n    } else {\n      // After the interceptors are run, ContinueFillOpsAfterInterception will\n      // be run\n    }",
        "lookback": "  // The copy constructor and assignment operator reset the value of",
        "lookahead": "  }",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 1146,
        "end_line": 1195,
        "merge_gen_region": " Fill(*) {::bool*;::bool_::bool;::bool_::bool {::bool_::bool {::bool_::bool {::bool_::bool {::bool_::bool {::bool_::bool {::bool_::booldex::bool_::bool_::// copyoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutput;::output;output;output;output;output;output;output;output;output;output;output;output;output;output;output;output;",
        "confidence": 0.8899229764938354,
        "hesitated": false,
        "resolved": false
    }
]