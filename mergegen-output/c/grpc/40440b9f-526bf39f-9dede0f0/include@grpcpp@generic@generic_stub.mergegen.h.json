[
    {
        "a_contents": "typedef ::grpc_impl::GenericStub GenericStub;",
        "b_contents": "class CompletionQueue;\ntypedef ClientAsyncReaderWriter<ByteBuffer, ByteBuffer>\n    GenericClientAsyncReaderWriter;\ntypedef ClientAsyncResponseReader<ByteBuffer> GenericClientAsyncResponseReader;\n\n/// Generic stubs provide a type-unsafe interface to call gRPC methods\n/// by name.\nclass GenericStub final {\n public:\n  explicit GenericStub(std::shared_ptr<ChannelInterface> channel)\n      : channel_(channel) {}\n\n  /// Setup a call to a named method \\a method using \\a context, but don't\n  /// start it. Let it be started explicitly with StartCall and a tag.\n  /// The return value only indicates whether or not registration of the call\n  /// succeeded (i.e. the call won't proceed if the return value is nullptr).\n  std::unique_ptr<GenericClientAsyncReaderWriter> PrepareCall(\n      ClientContext* context, const grpc::string& method, CompletionQueue* cq);\n\n  /// Setup a unary call to a named method \\a method using \\a context, and don't\n  /// start it. Let it be started explicitly with StartCall.\n  /// The return value only indicates whether or not registration of the call\n  /// succeeded (i.e. the call won't proceed if the return value is nullptr).\n  std::unique_ptr<GenericClientAsyncResponseReader> PrepareUnaryCall(\n      ClientContext* context, const grpc::string& method,\n      const ByteBuffer& request, CompletionQueue* cq);\n\n  /// DEPRECATED for multi-threaded use\n  /// Begin a call to a named method \\a method using \\a context.\n  /// A tag \\a tag will be delivered to \\a cq when the call has been started\n  /// (i.e, initial metadata has been sent).\n  /// The return value only indicates whether or not registration of the call\n  /// succeeded (i.e. the call won't proceed if the return value is nullptr).\n  std::unique_ptr<GenericClientAsyncReaderWriter> Call(\n      ClientContext* context, const grpc::string& method, CompletionQueue* cq,\n      void* tag);\n\n  /// NOTE: class experimental_type is not part of the public API of this class\n  /// TODO(vjpai): Move these contents to the public API of GenericStub when\n  ///              they are no longer experimental\n  class experimental_type {\n   public:\n    explicit experimental_type(GenericStub* stub) : stub_(stub) {}\n\n    /// Setup and start a unary call to a named method \\a method using\n    /// \\a context and specifying the \\a request and \\a response buffers.\n    void UnaryCall(ClientContext* context, const grpc::string& method,\n                   const ByteBuffer* request, ByteBuffer* response,\n                   std::function<void(Status)> on_completion);\n\n    /// Setup a call to a named method \\a method using \\a context and tied to\n    /// \\a reactor . Like any other bidi streaming RPC, it will not be activated\n    /// until StartCall is invoked on its reactor.\n    void PrepareBidiStreamingCall(\n        ClientContext* context, const grpc::string& method,\n        experimental::ClientBidiReactor<ByteBuffer, ByteBuffer>* reactor);\n\n   private:\n    GenericStub* stub_;\n  };\n\n  /// NOTE: The function experimental() is not stable public API. It is a view\n  /// to the experimental components of this class. It may be changed or removed\n  /// at any time.\n  experimental_type experimental() { return experimental_type(this); }\n\n private:\n  std::shared_ptr<ChannelInterface> channel_;\n};",
        "base_contents": "class CompletionQueue;\ntypedef ClientAsyncReaderWriter<ByteBuffer, ByteBuffer>\n    GenericClientAsyncReaderWriter;\ntypedef ClientAsyncResponseReader<ByteBuffer> GenericClientAsyncResponseReader;\n\n/// Generic stubs provide a type-unsafe interface to call gRPC methods\n/// by name.\nclass GenericStub final {\n public:\n  explicit GenericStub(std::shared_ptr<ChannelInterface> channel)\n      : channel_(channel) {}\n\n  /// Setup a call to a named method \\a method using \\a context, but don't\n  /// start it. Let it be started explicitly with StartCall and a tag.\n  /// The return value only indicates whether or not registration of the call\n  /// succeeded (i.e. the call won't proceed if the return value is nullptr).\n  std::unique_ptr<GenericClientAsyncReaderWriter> PrepareCall(\n      ClientContext* context, const grpc::string& method, CompletionQueue* cq);\n\n  /// Setup a unary call to a named method \\a method using \\a context, and don't\n  /// start it. Let it be started explicitly with StartCall.\n  /// The return value only indicates whether or not registration of the call\n  /// succeeded (i.e. the call won't proceed if the return value is nullptr).\n  std::unique_ptr<GenericClientAsyncResponseReader> PrepareUnaryCall(\n      ClientContext* context, const grpc::string& method,\n      const ByteBuffer& request, CompletionQueue* cq);\n\n  /// DEPRECATED for multi-threaded use\n  /// Begin a call to a named method \\a method using \\a context.\n  /// A tag \\a tag will be delivered to \\a cq when the call has been started\n  /// (i.e, initial metadata has been sent).\n  /// The return value only indicates whether or not registration of the call\n  /// succeeded (i.e. the call won't proceed if the return value is nullptr).\n  std::unique_ptr<GenericClientAsyncReaderWriter> Call(\n      ClientContext* context, const grpc::string& method, CompletionQueue* cq,\n      void* tag);\n\n  /// NOTE: class experimental_type is not part of the public API of this class\n  /// TODO(vjpai): Move these contents to the public API of GenericStub when\n  ///              they are no longer experimental\n  class experimental_type {\n   public:\n    explicit experimental_type(GenericStub* stub) : stub_(stub) {}\n\n    void UnaryCall(ClientContext* context, const grpc::string& method,\n                   const ByteBuffer* request, ByteBuffer* response,\n                   std::function<void(Status)> on_completion);\n\n    void PrepareBidiStreamingCall(\n        ClientContext* context, const grpc::string& method,\n        experimental::ClientBidiReactor<ByteBuffer, ByteBuffer>* reactor);\n\n   private:\n    GenericStub* stub_;\n  };\n\n  /// NOTE: The function experimental() is not stable public API. It is a view\n  /// to the experimental components of this class. It may be changed or removed\n  /// at any time.\n  experimental_type experimental() { return experimental_type(this); }\n\n private:\n  std::shared_ptr<ChannelInterface> channel_;\n};",
        "res_region": "typedef ::grpc_impl::GenericStub GenericStub;",
        "lookback": "",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 25,
        "end_line": 162,
        "merge_gen_region": null,
        "confidence": 0.6962304711341858,
        "hesitated": true
    }
]