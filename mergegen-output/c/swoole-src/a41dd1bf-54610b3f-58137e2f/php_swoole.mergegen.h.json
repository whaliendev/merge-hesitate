[
    {
        "a_contents": "/*\n  +----------------------------------------------------------------------+\n  | Swoole                                                               |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 2.0 of the Apache license,    |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.apache.org/licenses/LICENSE-2.0.html                      |\n  | If you did not receive a copy of the Apache2.0 license and are unable|\n  | to obtain it through the world-wide-web, please send a note to       |\n  | license@swoole.com so we can mail you a copy immediately.            |\n  +----------------------------------------------------------------------+\n  | Author: Tianfeng Han  <mikan.tenny@gmail.com>                        |\n  +----------------------------------------------------------------------+\n*/\n\n/* $Id$ */\n\n#ifndef PHP_SWOOLE_H\n#define PHP_SWOOLE_H\n\n#include \"php.h\"\n#include \"php_ini.h\"\n#include \"php_globals.h\"\n#include \"php_main.h\"\n\n#include \"php_streams.h\"\n#include \"php_network.h\"\n\n#include \"zend_interfaces.h\"\n#include \"zend_exceptions.h\"\n#include \"zend_variables.h\"\n#include <ext/date/php_date.h>\n#include <ext/standard/url.h>\n#include <ext/standard/info.h>\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"swoole.h\"\n#include \"Server.h\"\n#include \"Client.h\"\n#include \"async.h\"\n\n#define PHP_SWOOLE_VERSION  \"2.0.1-alpha\"\n#define PHP_SWOOLE_CHECK_CALLBACK\n\n/**\n * PHP5.2\n */\n#ifndef PHP_FE_END\n#define PHP_FE_END {NULL,NULL,NULL}\n#endif\n\n#ifndef ZEND_MOD_END\n#define ZEND_MOD_END {NULL,NULL,NULL}\n#endif\n\n#define SW_HOST_SIZE  128\n\ntypedef struct\n{\n    uint16_t port;\n    uint16_t from_fd;\n} php_swoole_udp_t;\n\nextern zend_module_entry swoole_module_entry;\n\n#define phpext_swoole_ptr &swoole_module_entry\n\n#ifdef PHP_WIN32\n#\tdefine PHP_SWOOLE_API __declspec(dllexport)\n#elif defined(__GNUC__) && __GNUC__ >= 4\n#\tdefine PHP_SWOOLE_API __attribute__ ((visibility(\"default\")))\n#else\n#\tdefine PHP_SWOOLE_API\n#endif\n\n#define SWOOLE_PROPERTY_MAX     32\n#define SWOOLE_OBJECT_MAX       1000000\n\ntypedef struct\n{\n    void **array;\n    uint32_t size;\n    void **property[SWOOLE_PROPERTY_MAX];\n    uint32_t property_size[SWOOLE_PROPERTY_MAX];\n} swoole_object_array;\n\n#ifdef ZTS\n#include \"TSRM.h\"\nextern void ***sw_thread_ctx;\nextern __thread swoole_object_array swoole_objects;\n#else\nextern swoole_object_array swoole_objects;\n#endif\n\n\n//#define SW_USE_PHP        1\n#define SW_CHECK_RETURN(s)         if(s<0){RETURN_FALSE;}else{RETURN_TRUE;}return\n#define SW_LOCK_CHECK_RETURN(s)    if(s==0){RETURN_TRUE;}else{RETURN_FALSE;}return\n\n#define swoole_php_error(level, fmt_str, ...)   if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_fatal_error(level, fmt_str, ...)   php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_sys_error(level, fmt_str, ...)  if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str\" Error: %s[%d].\", ##__VA_ARGS__, strerror(errno), errno)\n#define swoole_efree(p)  if (p) efree(p)\n\n#if defined(SW_ASYNC_MYSQL)\n#if defined(SW_HAVE_MYSQLI) && defined(SW_HAVE_MYSQLND)\n#else\n#error \"Enable async_mysql support, require mysqli and mysqlnd.\"\n#undef SW_ASYNC_MYSQL\n#endif\n#endif\n\n#ifdef SW_USE_OPENSSL\n#ifndef HAVE_OPENSSL\n#error \"Enable openssl support, require openssl library.\"\n#endif\n#else\n#ifdef SW_USE_HTTP2\n#error \"Enable http2 support, require --enable-openssl.\"\n#endif\n#endif\n\n#ifdef SW_SOCKETS\n#if PHP_VERSION_ID >= 50301 && (HAVE_SOCKETS || defined(COMPILE_DL_SOCKETS))\n#include \"ext/sockets/php_sockets.h\"\n#define SWOOLE_SOCKETS_SUPPORT\n#else\n#error \"Enable sockets support, require sockets extension.\"\n#endif\n#endif\n\n#ifdef SW_USE_HTTP2\n#if !defined(HAVE_NGHTTP2)\n#error \"Enable http2 support, require nghttp2 library.\"\n#endif\n#if !defined(HAVE_OPENSSL)\n#error \"Enable http2 support, require openssl library.\"\n#endif\n#endif\n\n#include \"php7_wrapper.h\"\n\n#define PHP_CLIENT_CALLBACK_NUM             4\n//--------------------------------------------------------\n#define SW_MAX_FIND_COUNT                   100    //for swoole_server::connection_list\n#define SW_PHP_CLIENT_BUFFER_SIZE           65535\n//--------------------------------------------------------\nenum php_swoole_client_callback_type\n{\n    SW_CLIENT_CB_onConnect = 1,\n    SW_CLIENT_CB_onReceive,\n    SW_CLIENT_CB_onClose,\n    SW_CLIENT_CB_onError,\n#ifdef SW_USE_OPENSSL\n    SW_CLIENT_CB_onSSLReady,\n#endif\n};\n//--------------------------------------------------------\nenum php_swoole_server_callback_type\n{\n    //--------------------------Swoole\\Server--------------------------\n    SW_SERVER_CB_onConnect,        //worker(event)\n    SW_SERVER_CB_onReceive,        //worker(event)\n    SW_SERVER_CB_onClose,          //worker(event)\n    SW_SERVER_CB_onPacket,         //worker(event)\n    SW_SERVER_CB_onStart,          //master\n    SW_SERVER_CB_onShutdown,       //master\n    SW_SERVER_CB_onWorkerStart,    //worker(event & task)\n    SW_SERVER_CB_onWorkerStop,     //worker(event & task)\n    SW_SERVER_CB_onTask,           //worker(task)\n    SW_SERVER_CB_onFinish,         //worker(event & task)\n    SW_SERVER_CB_onWorkerError,    //manager\n    SW_SERVER_CB_onManagerStart,   //manager\n    SW_SERVER_CB_onManagerStop,    //manager\n    SW_SERVER_CB_onPipeMessage,    //worker(evnet & task)\n    //--------------------------Swoole\\Http\\Server----------------------\n    SW_SERVER_CB_onRequest,        //http server\n    //--------------------------Swoole\\WebSocket\\Server-----------------\n    SW_SERVER_CB_onHandShake,      //worker(event)\n    SW_SERVER_CB_onOpen,           //worker(event)\n    SW_SERVER_CB_onMessage,        //worker(event)\n    //-------------------------------END--------------------------------\n};\n\n#define PHP_SERVER_CALLBACK_NUM             (SW_SERVER_CB_onMessage+1)\n\ntypedef struct\n{\n    zval *callbacks[PHP_SERVER_CALLBACK_NUM];\n#ifdef SW_COROUTINE\n    zend_fcall_info_cache *caches[PHP_SERVER_CALLBACK_NUM];\n#endif\n#if PHP_MAJOR_VERSION >= 7\n    zval _callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n    zval *setting;\n} swoole_server_port_property;\n//---------------------------------------------------------\n#define SW_FLAG_KEEP                        (1u << 12)\n#define SW_FLAG_ASYNC                       (1u << 10)\n#define SW_FLAG_SYNC                        (1u << 11)\n//---------------------------------------------------------\nenum php_swoole_fd_type\n{\n    PHP_SWOOLE_FD_STREAM_CLIENT = SW_FD_STREAM_CLIENT,\n    PHP_SWOOLE_FD_DGRAM_CLIENT = SW_FD_DGRAM_CLIENT,\n    PHP_SWOOLE_FD_MYSQL,\n    PHP_SWOOLE_FD_REDIS,\n    PHP_SWOOLE_FD_HTTPCLIENT,\n};\n//---------------------------------------------------------\n#define php_swoole_socktype(type)           (type & (~SW_FLAG_SYNC) & (~SW_FLAG_ASYNC) & (~SW_FLAG_KEEP) & (~SW_SOCK_SSL))\n#define php_swoole_array_length(array)      (Z_ARRVAL_P(array)->nNumOfElements)\n\n#define SW_LONG_CONNECTION_KEY_LEN          64\n\nextern zend_class_entry *swoole_lock_class_entry_ptr;\nextern zend_class_entry *swoole_process_class_entry_ptr;\nextern zend_class_entry *swoole_client_class_entry_ptr;\nextern zend_class_entry *swoole_http_client_class_entry_ptr;\nextern zend_class_entry *swoole_server_class_entry_ptr;\nextern zend_class_entry *swoole_connection_iterator_class_entry_ptr;\nextern zend_class_entry *swoole_buffer_class_entry_ptr;\nextern zend_class_entry *swoole_table_class_entry_ptr;\nextern zend_class_entry *swoole_http_server_class_entry_ptr;\nextern zend_class_entry *swoole_websocket_frame_class_entry_ptr;\nextern zend_class_entry *swoole_server_port_class_entry_ptr;\n\nextern zval *php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#if PHP_MAJOR_VERSION >= 7\nextern zval _php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n\nPHP_MINIT_FUNCTION(swoole);\nPHP_RINIT_FUNCTION(swoole);\nPHP_RSHUTDOWN_FUNCTION(swoole);\nPHP_MINFO_FUNCTION(swoole);\n\nPHP_FUNCTION(swoole_version);\nPHP_FUNCTION(swoole_cpu_num);\nPHP_FUNCTION(swoole_set_process_name);\nPHP_FUNCTION(swoole_get_local_ip);\n\n//---------------------------------------------------------\n//                  swoole_server\n//---------------------------------------------------------\nPHP_METHOD(swoole_server, __construct);\nPHP_METHOD(swoole_server, set);\nPHP_METHOD(swoole_server, on);\nPHP_METHOD(swoole_server, listen);\nPHP_METHOD(swoole_server, sendMessage);\nPHP_METHOD(swoole_server, addProcess);\nPHP_METHOD(swoole_server, start);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, send);\nPHP_METHOD(swoole_server, sendfile);\nPHP_METHOD(swoole_server, stats);\nPHP_METHOD(swoole_server, bind);\nPHP_METHOD(swoole_server, sendto);\nPHP_METHOD(swoole_server, sendwait);\nPHP_METHOD(swoole_server, exist);\nPHP_METHOD(swoole_server, protect);\nPHP_METHOD(swoole_server, close);\nPHP_METHOD(swoole_server, confirm);\nPHP_METHOD(swoole_server, task);\nPHP_METHOD(swoole_server, taskwait);\nPHP_METHOD(swoole_server, taskWaitMulti);\nPHP_METHOD(swoole_server, finish);\nPHP_METHOD(swoole_server, reload);\nPHP_METHOD(swoole_server, shutdown);\nPHP_METHOD(swoole_server, getLastError);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, heartbeat);\n\nPHP_METHOD(swoole_server, connection_list);\nPHP_METHOD(swoole_server, connection_info);\n\n#ifdef HAVE_PCRE\nPHP_METHOD(swoole_connection_iterator, count);\nPHP_METHOD(swoole_connection_iterator, rewind);\nPHP_METHOD(swoole_connection_iterator, next);\nPHP_METHOD(swoole_connection_iterator, current);\nPHP_METHOD(swoole_connection_iterator, key);\nPHP_METHOD(swoole_connection_iterator, valid);\n#endif\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nPHP_METHOD(swoole_server, getSocket);\n#endif\n//---------------------------------------------------------\n//                  swoole_event\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_event_add);\nPHP_FUNCTION(swoole_event_set);\nPHP_FUNCTION(swoole_event_del);\nPHP_FUNCTION(swoole_event_write);\nPHP_FUNCTION(swoole_event_wait);\nPHP_FUNCTION(swoole_event_exit);\nPHP_FUNCTION(swoole_event_defer);\nPHP_FUNCTION(swoole_client_select);\n//---------------------------------------------------------\n//                  swoole_async\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_async_read);\nPHP_FUNCTION(swoole_async_write);\nPHP_FUNCTION(swoole_async_close);\nPHP_FUNCTION(swoole_async_readfile);\nPHP_FUNCTION(swoole_async_writefile);\nPHP_FUNCTION(swoole_async_dns_lookup);\nPHP_FUNCTION(swoole_async_set);\n//---------------------------------------------------------\n//                  swoole_timer\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_timer_after);\nPHP_FUNCTION(swoole_timer_tick);\nPHP_FUNCTION(swoole_timer_exists);\nPHP_FUNCTION(swoole_timer_clear);\n//---------------------------------------------------------\n//                  other\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_load_module);\nPHP_FUNCTION(swoole_strerror);\nPHP_FUNCTION(swoole_errno);\n\nvoid swoole_destory_table(zend_resource *rsrc TSRMLS_DC);\n\nvoid swoole_server_port_init(int module_number TSRMLS_DC);\nvoid swoole_async_init(int module_number TSRMLS_DC);\nvoid swoole_table_init(int module_number TSRMLS_DC);\nvoid swoole_lock_init(int module_number TSRMLS_DC);\nvoid swoole_atomic_init(int module_number TSRMLS_DC);\nvoid swoole_client_init(int module_number TSRMLS_DC);\n#ifdef SW_COROUTINE\nvoid swoole_client_coro_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_coro_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_mysql_coro_init(int module_number TSRMLS_DC);\nvoid swoole_http_client_coro_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_http_client_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_process_init(int module_number TSRMLS_DC);\nvoid swoole_http_server_init(int module_number TSRMLS_DC);\nvoid swoole_websocket_init(int module_number TSRMLS_DC);\nvoid swoole_buffer_init(int module_number TSRMLS_DC);\nvoid swoole_mysql_init(int module_number TSRMLS_DC);\nvoid swoole_module_init(int module_number TSRMLS_DC);\n\nint php_swoole_process_start(swWorker *process, zval *object TSRMLS_DC);\n\nvoid php_swoole_check_reactor();\nvoid php_swoole_event_init();\nvoid php_swoole_event_wait();\nvoid php_swoole_check_timer(int interval);\nvoid php_swoole_register_callback(swServer *serv);\nvoid php_swoole_client_free(zval *object, swClient *cli TSRMLS_DC);\nswClient* php_swoole_client_new(zval *object, char *host, int host_len, int port);\nvoid php_swoole_client_check_setting(swClient *cli, zval *zset TSRMLS_DC);\nzval* php_swoole_websocket_unpack(swString *data TSRMLS_DC);\nvoid php_swoole_sha1(const char *str, int _len, unsigned char *digest);\n\nstatic sw_inline void* swoole_get_object(zval *object)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int)Z_OBJ_HANDLE(*object);\n#endif\n    assert(handle < swoole_objects.size);\n    return swoole_objects.array[handle];\n}\n\nstatic sw_inline void* swoole_get_property(zval *object, int property_id)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int) Z_OBJ_HANDLE(*object);\n#endif\n    if (handle >= swoole_objects.property_size[property_id])\n    {\n        return NULL;\n    }\n    return swoole_objects.property[property_id][handle];\n}\n\nvoid swoole_set_object(zval *object, void *ptr);\nvoid swoole_set_property(zval *object, int property_id, void *ptr);\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nphp_socket *swoole_convert_to_socket(int sock);\n#endif\n\nvoid php_swoole_server_before_start(swServer *serv, zval *zobject TSRMLS_DC);\nvoid php_swoole_get_recv_data(zval *zdata, swEventData *req, char *header, uint32_t header_length);\nint php_swoole_get_send_data(zval *zdata, char **str TSRMLS_DC);\nvoid php_swoole_onConnect(swServer *serv, swDataHead *);\nint php_swoole_onReceive(swServer *serv, swEventData *req);\nvoid php_swoole_onClose(swServer *, swDataHead *);\n\nstatic sw_inline zval* php_swoole_server_get_callback(swServer *serv, int server_fd, int event_type)\n{\n    swListenPort *port = serv->connection_list[server_fd].object;\n    swoole_server_port_property *property = port->ptr;\n    if (!property)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    zval *callback = property->callbacks[event_type];\n    if (!callback)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    else\n    {\n        return callback;\n    }\n}\n\n#define php_swoole_array_get_value(ht, str, v)     (sw_zend_hash_find(ht, str, sizeof(str), (void **) &v) == SUCCESS && !ZVAL_IS_NULL(v))\n\nZEND_BEGIN_MODULE_GLOBALS(swoole)\n    long aio_thread_num;\n    zend_bool display_errors;\n    zend_bool cli;\n    zend_bool use_namespace;\n    key_t message_queue_key;\n    uint32_t socket_buffer_size;\nZEND_END_MODULE_GLOBALS(swoole)\n\nextern ZEND_DECLARE_MODULE_GLOBALS(swoole);\n\n#ifdef ZTS\n#define SWOOLE_G(v) TSRMG(swoole_globals_id, zend_swoole_globals *, v)\n#else\n#define SWOOLE_G(v) (swoole_globals.v)\n#endif\n\n\n#define SWOOLE_INIT_CLASS_ENTRY(ce, name, name_ns, methods) \\\n    if (SWOOLE_G(use_namespace)) { \\\n        INIT_CLASS_ENTRY(ce, name_ns, methods); \\\n    } else { \\\n        INIT_CLASS_ENTRY(ce, name, methods); \\\n    }\n\n#endif\t/* PHP_SWOOLE_H */",
        "b_contents": "/*\n  +----------------------------------------------------------------------+\n  | Swoole                                                               |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 2.0 of the Apache license,    |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.apache.org/licenses/LICENSE-2.0.html                      |\n  | If you did not receive a copy of the Apache2.0 license and are unable|\n  | to obtain it through the world-wide-web, please send a note to       |\n  | license@swoole.com so we can mail you a copy immediately.            |\n  +----------------------------------------------------------------------+\n  | Author: Tianfeng Han  <mikan.tenny@gmail.com>                        |\n  +----------------------------------------------------------------------+\n*/\n\n/* $Id$ */\n\n#ifndef PHP_SWOOLE_H\n#define PHP_SWOOLE_H\n\n#include \"php.h\"\n#include \"php_ini.h\"\n#include \"php_globals.h\"\n#include \"php_main.h\"\n\n#include \"php_streams.h\"\n#include \"php_network.h\"\n\n#include \"zend_interfaces.h\"\n#include \"zend_exceptions.h\"\n#include \"zend_variables.h\"\n#include <ext/date/php_date.h>\n#include <ext/standard/url.h>\n#include <ext/standard/info.h>\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"swoole.h\"\n#include \"Server.h\"\n#include \"Client.h\"\n#include \"async.h\"\n\n#define PHP_SWOOLE_VERSION  \"2.0.1-alpha\"\n#define PHP_SWOOLE_CHECK_CALLBACK\n\n/**\n * PHP5.2\n */\n#ifndef PHP_FE_END\n#define PHP_FE_END {NULL,NULL,NULL}\n#endif\n\n#ifndef ZEND_MOD_END\n#define ZEND_MOD_END {NULL,NULL,NULL}\n#endif\n\n#define SW_HOST_SIZE  128\n\ntypedef struct\n{\n    uint16_t port;\n    uint16_t from_fd;\n} php_swoole_udp_t;\n\nextern zend_module_entry swoole_module_entry;\n\n#define phpext_swoole_ptr &swoole_module_entry\n\n#ifdef PHP_WIN32\n#\tdefine PHP_SWOOLE_API __declspec(dllexport)\n#elif defined(__GNUC__) && __GNUC__ >= 4\n#\tdefine PHP_SWOOLE_API __attribute__ ((visibility(\"default\")))\n#else\n#\tdefine PHP_SWOOLE_API\n#endif\n\n#define SWOOLE_PROPERTY_MAX     32\n#define SWOOLE_OBJECT_MAX       1000000\n\ntypedef struct\n{\n    void **array;\n    uint32_t size;\n    void **property[SWOOLE_PROPERTY_MAX];\n    uint32_t property_size[SWOOLE_PROPERTY_MAX];\n} swoole_object_array;\n\n#ifdef ZTS\n#include \"TSRM.h\"\nextern void ***sw_thread_ctx;\nextern __thread swoole_object_array swoole_objects;\n#else\nextern swoole_object_array swoole_objects;\n#endif\n\n\n//#define SW_USE_PHP        1\n#define SW_CHECK_RETURN(s)         if(s<0){RETURN_FALSE;}else{RETURN_TRUE;}return\n#define SW_LOCK_CHECK_RETURN(s)    if(s==0){RETURN_TRUE;}else{RETURN_FALSE;}return\n\n#define swoole_php_error(level, fmt_str, ...)   if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_fatal_error(level, fmt_str, ...)   php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_sys_error(level, fmt_str, ...)  if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str\" Error: %s[%d].\", ##__VA_ARGS__, strerror(errno), errno)\n#define swoole_efree(p)  if (p) efree(p)\n\n#if defined(SW_ASYNC_MYSQL)\n#if defined(SW_HAVE_MYSQLI) && defined(SW_HAVE_MYSQLND)\n#else\n#error \"Enable async_mysql support, require mysqli and mysqlnd.\"\n#undef SW_ASYNC_MYSQL\n#endif\n#endif\n\n#ifdef SW_USE_OPENSSL\n#ifndef HAVE_OPENSSL\n#error \"Enable openssl support, require openssl library.\"\n#endif\n#else\n#ifdef SW_USE_HTTP2\n#error \"Enable http2 support, require --enable-openssl.\"\n#endif\n#endif\n\n#ifdef SW_SOCKETS\n#if PHP_VERSION_ID >= 50301 && (HAVE_SOCKETS || defined(COMPILE_DL_SOCKETS))\n#include \"ext/sockets/php_sockets.h\"\n#define SWOOLE_SOCKETS_SUPPORT\n#else\n#error \"Enable sockets support, require sockets extension.\"\n#endif\n#endif\n\n#ifdef SW_USE_HTTP2\n#if !defined(HAVE_NGHTTP2)\n#error \"Enable http2 support, require nghttp2 library.\"\n#endif\n#if !defined(HAVE_OPENSSL)\n#error \"Enable http2 support, require openssl library.\"\n#endif\n#endif\n\n#include \"php7_wrapper.h\"\n\n#define PHP_CLIENT_CALLBACK_NUM             4\n//--------------------------------------------------------\n#define SW_MAX_FIND_COUNT                   100    //for swoole_server::connection_list\n#define SW_PHP_CLIENT_BUFFER_SIZE           65535\n//--------------------------------------------------------\nenum php_swoole_client_callback_type\n{\n    SW_CLIENT_CB_onConnect = 1,\n    SW_CLIENT_CB_onReceive,\n    SW_CLIENT_CB_onClose,\n    SW_CLIENT_CB_onError,\n#ifdef SW_USE_OPENSSL\n    SW_CLIENT_CB_onSSLReady,\n#endif\n};\n//--------------------------------------------------------\nenum php_swoole_server_callback_type\n{\n    //--------------------------Swoole\\Server--------------------------\n    SW_SERVER_CB_onConnect,        //worker(event)\n    SW_SERVER_CB_onReceive,        //worker(event)\n    SW_SERVER_CB_onClose,          //worker(event)\n    SW_SERVER_CB_onPacket,         //worker(event)\n    SW_SERVER_CB_onStart,          //master\n    SW_SERVER_CB_onShutdown,       //master\n    SW_SERVER_CB_onWorkerStart,    //worker(event & task)\n    SW_SERVER_CB_onWorkerStop,     //worker(event & task)\n    SW_SERVER_CB_onTask,           //worker(task)\n    SW_SERVER_CB_onFinish,         //worker(event & task)\n    SW_SERVER_CB_onWorkerError,    //manager\n    SW_SERVER_CB_onManagerStart,   //manager\n    SW_SERVER_CB_onManagerStop,    //manager\n    SW_SERVER_CB_onPipeMessage,    //worker(evnet & task)\n    //--------------------------Swoole\\Http\\Server----------------------\n    SW_SERVER_CB_onRequest,        //http server\n    //--------------------------Swoole\\WebSocket\\Server-----------------\n    SW_SERVER_CB_onHandShake,      //worker(event)\n    SW_SERVER_CB_onOpen,           //worker(event)\n    SW_SERVER_CB_onMessage,        //worker(event)\n    //-------------------------------END--------------------------------\n};\n\n#define PHP_SERVER_CALLBACK_NUM             (SW_SERVER_CB_onMessage+1)\n\ntypedef struct\n{\n    zval *callbacks[PHP_SERVER_CALLBACK_NUM];\n#ifdef SW_COROUTINE\n    zend_fcall_info_cache *caches[PHP_SERVER_CALLBACK_NUM];\n#endif\n#if PHP_MAJOR_VERSION >= 7\n    zval _callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n    zval *setting;\n} swoole_server_port_property;\n//---------------------------------------------------------\n#define SW_FLAG_KEEP                        (1u << 12)\n#define SW_FLAG_ASYNC                       (1u << 10)\n#define SW_FLAG_SYNC                        (1u << 11)\n//---------------------------------------------------------\nenum php_swoole_fd_type\n{\n    PHP_SWOOLE_FD_STREAM_CLIENT = SW_FD_STREAM_CLIENT,\n    PHP_SWOOLE_FD_DGRAM_CLIENT = SW_FD_DGRAM_CLIENT,\n    PHP_SWOOLE_FD_MYSQL,\n    PHP_SWOOLE_FD_REDIS,\n    PHP_SWOOLE_FD_HTTPCLIENT,\n};\n//---------------------------------------------------------\n#define php_swoole_socktype(type)           (type & (~SW_FLAG_SYNC) & (~SW_FLAG_ASYNC) & (~SW_FLAG_KEEP) & (~SW_SOCK_SSL))\n#define php_swoole_array_length(array)      (Z_ARRVAL_P(array)->nNumOfElements)\n\n#define SW_LONG_CONNECTION_KEY_LEN          64\n\nextern zend_class_entry *swoole_lock_class_entry_ptr;\nextern zend_class_entry *swoole_process_class_entry_ptr;\nextern zend_class_entry *swoole_client_class_entry_ptr;\nextern zend_class_entry *swoole_http_client_class_entry_ptr;\nextern zend_class_entry *swoole_server_class_entry_ptr;\nextern zend_class_entry *swoole_connection_iterator_class_entry_ptr;\nextern zend_class_entry *swoole_buffer_class_entry_ptr;\nextern zend_class_entry *swoole_table_class_entry_ptr;\nextern zend_class_entry *swoole_http_server_class_entry_ptr;\nextern zend_class_entry *swoole_websocket_frame_class_entry_ptr;\nextern zend_class_entry *swoole_server_port_class_entry_ptr;\n\nextern zval *php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#if PHP_MAJOR_VERSION >= 7\nextern zval _php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n\nPHP_MINIT_FUNCTION(swoole);\nPHP_RINIT_FUNCTION(swoole);\nPHP_RSHUTDOWN_FUNCTION(swoole);\nPHP_MINFO_FUNCTION(swoole);\n\nPHP_FUNCTION(swoole_version);\nPHP_FUNCTION(swoole_cpu_num);\nPHP_FUNCTION(swoole_set_process_name);\nPHP_FUNCTION(swoole_get_local_ip);\n\n//---------------------------------------------------------\n//                  swoole_server\n//---------------------------------------------------------\nPHP_METHOD(swoole_server, __construct);\nPHP_METHOD(swoole_server, set);\nPHP_METHOD(swoole_server, on);\nPHP_METHOD(swoole_server, listen);\nPHP_METHOD(swoole_server, sendMessage);\nPHP_METHOD(swoole_server, addProcess);\nPHP_METHOD(swoole_server, start);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, send);\nPHP_METHOD(swoole_server, sendfile);\nPHP_METHOD(swoole_server, stats);\nPHP_METHOD(swoole_server, bind);\nPHP_METHOD(swoole_server, sendto);\nPHP_METHOD(swoole_server, sendwait);\nPHP_METHOD(swoole_server, exist);\nPHP_METHOD(swoole_server, protect);\nPHP_METHOD(swoole_server, close);\nPHP_METHOD(swoole_server, confirm);\nPHP_METHOD(swoole_server, task);\nPHP_METHOD(swoole_server, taskwait);\nPHP_METHOD(swoole_server, taskWaitMulti);\nPHP_METHOD(swoole_server, finish);\nPHP_METHOD(swoole_server, reload);\nPHP_METHOD(swoole_server, shutdown);\nPHP_METHOD(swoole_server, getLastError);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, heartbeat);\n\nPHP_METHOD(swoole_server, connection_list);\nPHP_METHOD(swoole_server, connection_info);\n\n#ifdef HAVE_PCRE\nPHP_METHOD(swoole_connection_iterator, count);\nPHP_METHOD(swoole_connection_iterator, rewind);\nPHP_METHOD(swoole_connection_iterator, next);\nPHP_METHOD(swoole_connection_iterator, current);\nPHP_METHOD(swoole_connection_iterator, key);\nPHP_METHOD(swoole_connection_iterator, valid);\n#endif\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nPHP_METHOD(swoole_server, getSocket);\n#endif\n//---------------------------------------------------------\n//                  swoole_event\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_event_add);\nPHP_FUNCTION(swoole_event_set);\nPHP_FUNCTION(swoole_event_del);\nPHP_FUNCTION(swoole_event_write);\nPHP_FUNCTION(swoole_event_wait);\nPHP_FUNCTION(swoole_event_exit);\nPHP_FUNCTION(swoole_event_defer);\nPHP_FUNCTION(swoole_client_select);\n//---------------------------------------------------------\n//                  swoole_async\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_async_read);\nPHP_FUNCTION(swoole_async_write);\nPHP_FUNCTION(swoole_async_close);\nPHP_FUNCTION(swoole_async_readfile);\nPHP_FUNCTION(swoole_async_writefile);\nPHP_FUNCTION(swoole_async_dns_lookup);\nPHP_FUNCTION(swoole_async_set);\n//---------------------------------------------------------\n//                  swoole_timer\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_timer_after);\nPHP_FUNCTION(swoole_timer_tick);\nPHP_FUNCTION(swoole_timer_exists);\nPHP_FUNCTION(swoole_timer_clear);\n//---------------------------------------------------------\n//                  other\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_load_module);\nPHP_FUNCTION(swoole_strerror);\nPHP_FUNCTION(swoole_errno);\n\nvoid swoole_destory_table(zend_resource *rsrc TSRMLS_DC);\n\nvoid swoole_server_port_init(int module_number TSRMLS_DC);\nvoid swoole_async_init(int module_number TSRMLS_DC);\nvoid swoole_table_init(int module_number TSRMLS_DC);\nvoid swoole_lock_init(int module_number TSRMLS_DC);\nvoid swoole_atomic_init(int module_number TSRMLS_DC);\nvoid swoole_client_init(int module_number TSRMLS_DC);\n#ifdef SW_COROUTINE\nvoid swoole_client_coro_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_coro_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_mysql_coro_init(int module_number TSRMLS_DC);\nvoid swoole_http_client_coro_init(int module_number TSRMLS_DC);\nvoid swoole_coroutine_util_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_http_client_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_process_init(int module_number TSRMLS_DC);\nvoid swoole_http_server_init(int module_number TSRMLS_DC);\nvoid swoole_websocket_init(int module_number TSRMLS_DC);\nvoid swoole_buffer_init(int module_number TSRMLS_DC);\nvoid swoole_mysql_init(int module_number TSRMLS_DC);\nvoid swoole_module_init(int module_number TSRMLS_DC);\n\nint php_swoole_process_start(swWorker *process, zval *object TSRMLS_DC);\n\nvoid php_swoole_check_reactor();\nvoid php_swoole_event_init();\nvoid php_swoole_event_wait();\nvoid php_swoole_check_timer(int interval);\nvoid php_swoole_register_callback(swServer *serv);\nvoid php_swoole_client_free(zval *object, swClient *cli TSRMLS_DC);\nswClient* php_swoole_client_new(zval *object, char *host, int host_len, int port);\nvoid php_swoole_client_check_setting(swClient *cli, zval *zset TSRMLS_DC);\nzval* php_swoole_websocket_unpack(swString *data TSRMLS_DC);\nvoid php_swoole_sha1(const char *str, int _len, unsigned char *digest);\n\nstatic sw_inline void* swoole_get_object(zval *object)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int)Z_OBJ_HANDLE(*object);\n#endif\n    assert(handle < swoole_objects.size);\n    return swoole_objects.array[handle];\n}\n\nstatic sw_inline void* swoole_get_property(zval *object, int property_id)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int) Z_OBJ_HANDLE(*object);\n#endif\n    if (handle >= swoole_objects.property_size[property_id])\n    {\n        return NULL;\n    }\n    return swoole_objects.property[property_id][handle];\n}\n\nvoid swoole_set_object(zval *object, void *ptr);\nvoid swoole_set_property(zval *object, int property_id, void *ptr);\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nphp_socket *swoole_convert_to_socket(int sock);\n#endif\n\nvoid php_swoole_server_before_start(swServer *serv, zval *zobject TSRMLS_DC);\nvoid php_swoole_get_recv_data(zval *zdata, swEventData *req, char *header, uint32_t header_length);\nint php_swoole_get_send_data(zval *zdata, char **str TSRMLS_DC);\nvoid php_swoole_onConnect(swServer *serv, swDataHead *);\nint php_swoole_onReceive(swServer *serv, swEventData *req);\nvoid php_swoole_onClose(swServer *, swDataHead *);\n\nstatic sw_inline zval* php_swoole_server_get_callback(swServer *serv, int server_fd, int event_type)\n{\n    swListenPort *port = serv->connection_list[server_fd].object;\n    swoole_server_port_property *property = port->ptr;\n    if (!property)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    zval *callback = property->callbacks[event_type];\n    if (!callback)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    else\n    {\n        return callback;\n    }\n}\n\n#define php_swoole_array_get_value(ht, str, v)     (sw_zend_hash_find(ht, str, sizeof(str), (void **) &v) == SUCCESS && !ZVAL_IS_NULL(v))\n\nZEND_BEGIN_MODULE_GLOBALS(swoole)\n    long aio_thread_num;\n    zend_bool display_errors;\n    zend_bool cli;\n    zend_bool use_namespace;\n    key_t message_queue_key;\n    uint32_t socket_buffer_size;\nZEND_END_MODULE_GLOBALS(swoole)\n\nextern ZEND_DECLARE_MODULE_GLOBALS(swoole);\n\n#ifdef ZTS\n#define SWOOLE_G(v) TSRMG(swoole_globals_id, zend_swoole_globals *, v)\n#else\n#define SWOOLE_G(v) (swoole_globals.v)\n#endif\n\n\n#define SWOOLE_INIT_CLASS_ENTRY(ce, name, name_ns, methods) \\\n    if (SWOOLE_G(use_namespace)) { \\\n        INIT_CLASS_ENTRY(ce, name_ns, methods); \\\n    } else { \\\n        INIT_CLASS_ENTRY(ce, name, methods); \\\n    }\n\n#define SWOOLE_CLASS_ALIAS(name, name_ns) \\\n    if (SWOOLE_G(use_namespace)) { \\\n        zend_register_class_alias(#name, name##_class_entry_ptr);\\\n    } else { \\\n        zend_register_class_alias(name_ns, name##_class_entry_ptr);\\\n    }\n\n#endif\t/* PHP_SWOOLE_H */",
        "base_contents": "/*\n  +----------------------------------------------------------------------+\n  | Swoole                                                               |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 2.0 of the Apache license,    |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.apache.org/licenses/LICENSE-2.0.html                      |\n  | If you did not receive a copy of the Apache2.0 license and are unable|\n  | to obtain it through the world-wide-web, please send a note to       |\n  | license@swoole.com so we can mail you a copy immediately.            |\n  +----------------------------------------------------------------------+\n  | Author: Tianfeng Han  <mikan.tenny@gmail.com>                        |\n  +----------------------------------------------------------------------+\n*/\n\n/* $Id$ */\n\n#ifndef PHP_SWOOLE_H\n#define PHP_SWOOLE_H\n\n#include \"php.h\"\n#include \"php_ini.h\"\n#include \"php_globals.h\"\n#include \"php_main.h\"\n\n#include \"php_streams.h\"\n#include \"php_network.h\"\n\n#include \"zend_interfaces.h\"\n#include \"zend_exceptions.h\"\n#include \"zend_variables.h\"\n#include <ext/date/php_date.h>\n#include <ext/standard/url.h>\n#include <ext/standard/info.h>\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"swoole.h\"\n#include \"Server.h\"\n#include \"Client.h\"\n#include \"async.h\"\n\n#define PHP_SWOOLE_VERSION  \"2.0.1-alpha\"\n#define PHP_SWOOLE_CHECK_CALLBACK\n\n/**\n * PHP5.2\n */\n#ifndef PHP_FE_END\n#define PHP_FE_END {NULL,NULL,NULL}\n#endif\n\n#ifndef ZEND_MOD_END\n#define ZEND_MOD_END {NULL,NULL,NULL}\n#endif\n\n#define SW_HOST_SIZE  128\n\ntypedef struct\n{\n    uint16_t port;\n    uint16_t from_fd;\n} php_swoole_udp_t;\n\nextern zend_module_entry swoole_module_entry;\n\n#define phpext_swoole_ptr &swoole_module_entry\n\n#ifdef PHP_WIN32\n#\tdefine PHP_SWOOLE_API __declspec(dllexport)\n#elif defined(__GNUC__) && __GNUC__ >= 4\n#\tdefine PHP_SWOOLE_API __attribute__ ((visibility(\"default\")))\n#else\n#\tdefine PHP_SWOOLE_API\n#endif\n\n#define SWOOLE_PROPERTY_MAX     32\n#define SWOOLE_OBJECT_MAX       1000000\n\ntypedef struct\n{\n    void **array;\n    uint32_t size;\n    void **property[SWOOLE_PROPERTY_MAX];\n    uint32_t property_size[SWOOLE_PROPERTY_MAX];\n} swoole_object_array;\n\n#ifdef ZTS\n#include \"TSRM.h\"\nextern void ***sw_thread_ctx;\nextern __thread swoole_object_array swoole_objects;\n#else\nextern swoole_object_array swoole_objects;\n#endif\n\n\n//#define SW_USE_PHP        1\n#define SW_CHECK_RETURN(s)         if(s<0){RETURN_FALSE;}else{RETURN_TRUE;}return\n#define SW_LOCK_CHECK_RETURN(s)    if(s==0){RETURN_TRUE;}else{RETURN_FALSE;}return\n\n#define swoole_php_error(level, fmt_str, ...)   if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_fatal_error(level, fmt_str, ...)   php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_sys_error(level, fmt_str, ...)  if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str\" Error: %s[%d].\", ##__VA_ARGS__, strerror(errno), errno)\n#define swoole_efree(p)  if (p) efree(p)\n\n#if defined(SW_ASYNC_MYSQL)\n#if defined(SW_HAVE_MYSQLI) && defined(SW_HAVE_MYSQLND)\n#else\n#error \"Enable async_mysql support, require mysqli and mysqlnd.\"\n#undef SW_ASYNC_MYSQL\n#endif\n#endif\n\n#ifdef SW_USE_OPENSSL\n#ifndef HAVE_OPENSSL\n#error \"Enable openssl support, require openssl library.\"\n#endif\n#else\n#ifdef SW_USE_HTTP2\n#error \"Enable http2 support, require --enable-openssl.\"\n#endif\n#endif\n\n#ifdef SW_SOCKETS\n#if PHP_VERSION_ID >= 50301 && (HAVE_SOCKETS || defined(COMPILE_DL_SOCKETS))\n#include \"ext/sockets/php_sockets.h\"\n#define SWOOLE_SOCKETS_SUPPORT\n#else\n#error \"Enable sockets support, require sockets extension.\"\n#endif\n#endif\n\n#ifdef SW_USE_HTTP2\n#if !defined(HAVE_NGHTTP2)\n#error \"Enable http2 support, require nghttp2 library.\"\n#endif\n#if !defined(HAVE_OPENSSL)\n#error \"Enable http2 support, require openssl library.\"\n#endif\n#endif\n\n#include \"php7_wrapper.h\"\n\n#define PHP_CLIENT_CALLBACK_NUM             4\n//--------------------------------------------------------\n#define SW_MAX_FIND_COUNT                   100    //for swoole_server::connection_list\n#define SW_PHP_CLIENT_BUFFER_SIZE           65535\n//--------------------------------------------------------\nenum php_swoole_client_callback_type\n{\n    SW_CLIENT_CB_onConnect = 1,\n    SW_CLIENT_CB_onReceive,\n    SW_CLIENT_CB_onClose,\n    SW_CLIENT_CB_onError,\n#ifdef SW_USE_OPENSSL\n    SW_CLIENT_CB_onSSLReady,\n#endif\n};\n//--------------------------------------------------------\nenum php_swoole_server_callback_type\n{\n    //--------------------------Swoole\\Server--------------------------\n    SW_SERVER_CB_onConnect,        //worker(event)\n    SW_SERVER_CB_onReceive,        //worker(event)\n    SW_SERVER_CB_onClose,          //worker(event)\n    SW_SERVER_CB_onPacket,         //worker(event)\n    SW_SERVER_CB_onStart,          //master\n    SW_SERVER_CB_onShutdown,       //master\n    SW_SERVER_CB_onWorkerStart,    //worker(event & task)\n    SW_SERVER_CB_onWorkerStop,     //worker(event & task)\n    SW_SERVER_CB_onTask,           //worker(task)\n    SW_SERVER_CB_onFinish,         //worker(event & task)\n    SW_SERVER_CB_onWorkerError,    //manager\n    SW_SERVER_CB_onManagerStart,   //manager\n    SW_SERVER_CB_onManagerStop,    //manager\n    SW_SERVER_CB_onPipeMessage,    //worker(evnet & task)\n    //--------------------------Swoole\\Http\\Server----------------------\n    SW_SERVER_CB_onRequest,        //http server\n    //--------------------------Swoole\\WebSocket\\Server-----------------\n    SW_SERVER_CB_onHandShake,      //worker(event)\n    SW_SERVER_CB_onOpen,           //worker(event)\n    SW_SERVER_CB_onMessage,        //worker(event)\n    //-------------------------------END--------------------------------\n};\n\n#define PHP_SERVER_CALLBACK_NUM             (SW_SERVER_CB_onMessage+1)\n\ntypedef struct\n{\n    zval *callbacks[PHP_SERVER_CALLBACK_NUM];\n#ifdef SW_COROUTINE\n    zend_fcall_info_cache *caches[PHP_SERVER_CALLBACK_NUM];\n#endif\n#if PHP_MAJOR_VERSION >= 7\n    zval _callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n    zval *setting;\n} swoole_server_port_property;\n//---------------------------------------------------------\n#define SW_FLAG_KEEP                        (1u << 12)\n#define SW_FLAG_ASYNC                       (1u << 10)\n#define SW_FLAG_SYNC                        (1u << 11)\n//---------------------------------------------------------\nenum php_swoole_fd_type\n{\n    PHP_SWOOLE_FD_STREAM_CLIENT = SW_FD_STREAM_CLIENT,\n    PHP_SWOOLE_FD_DGRAM_CLIENT = SW_FD_DGRAM_CLIENT,\n    PHP_SWOOLE_FD_MYSQL,\n    PHP_SWOOLE_FD_REDIS,\n    PHP_SWOOLE_FD_HTTPCLIENT,\n};\n//---------------------------------------------------------\n#define php_swoole_socktype(type)           (type & (~SW_FLAG_SYNC) & (~SW_FLAG_ASYNC) & (~SW_FLAG_KEEP) & (~SW_SOCK_SSL))\n#define php_swoole_array_length(array)      (Z_ARRVAL_P(array)->nNumOfElements)\n\n#define SW_LONG_CONNECTION_KEY_LEN          64\n\nextern zend_class_entry *swoole_lock_class_entry_ptr;\nextern zend_class_entry *swoole_process_class_entry_ptr;\nextern zend_class_entry *swoole_client_class_entry_ptr;\nextern zend_class_entry *swoole_http_client_class_entry_ptr;\nextern zend_class_entry *swoole_server_class_entry_ptr;\nextern zend_class_entry *swoole_connection_iterator_class_entry_ptr;\nextern zend_class_entry *swoole_buffer_class_entry_ptr;\nextern zend_class_entry *swoole_table_class_entry_ptr;\nextern zend_class_entry *swoole_http_server_class_entry_ptr;\nextern zend_class_entry *swoole_websocket_frame_class_entry_ptr;\nextern zend_class_entry *swoole_server_port_class_entry_ptr;\n\nextern zval *php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#if PHP_MAJOR_VERSION >= 7\nextern zval _php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n\nPHP_MINIT_FUNCTION(swoole);\nPHP_RINIT_FUNCTION(swoole);\nPHP_RSHUTDOWN_FUNCTION(swoole);\nPHP_MINFO_FUNCTION(swoole);\n\nPHP_FUNCTION(swoole_version);\nPHP_FUNCTION(swoole_cpu_num);\nPHP_FUNCTION(swoole_set_process_name);\nPHP_FUNCTION(swoole_get_local_ip);\n\n//---------------------------------------------------------\n//                  swoole_server\n//---------------------------------------------------------\nPHP_METHOD(swoole_server, __construct);\nPHP_METHOD(swoole_server, set);\nPHP_METHOD(swoole_server, on);\nPHP_METHOD(swoole_server, listen);\nPHP_METHOD(swoole_server, sendMessage);\nPHP_METHOD(swoole_server, addProcess);\nPHP_METHOD(swoole_server, start);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, send);\nPHP_METHOD(swoole_server, sendfile);\nPHP_METHOD(swoole_server, stats);\nPHP_METHOD(swoole_server, bind);\nPHP_METHOD(swoole_server, sendto);\nPHP_METHOD(swoole_server, sendwait);\nPHP_METHOD(swoole_server, exist);\nPHP_METHOD(swoole_server, protect);\nPHP_METHOD(swoole_server, close);\nPHP_METHOD(swoole_server, confirm);\nPHP_METHOD(swoole_server, task);\nPHP_METHOD(swoole_server, taskwait);\nPHP_METHOD(swoole_server, taskWaitMulti);\nPHP_METHOD(swoole_server, finish);\nPHP_METHOD(swoole_server, reload);\nPHP_METHOD(swoole_server, shutdown);\nPHP_METHOD(swoole_server, getLastError);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, heartbeat);\n\nPHP_METHOD(swoole_server, connection_list);\nPHP_METHOD(swoole_server, connection_info);\n\n#ifdef HAVE_PCRE\nPHP_METHOD(swoole_connection_iterator, count);\nPHP_METHOD(swoole_connection_iterator, rewind);\nPHP_METHOD(swoole_connection_iterator, next);\nPHP_METHOD(swoole_connection_iterator, current);\nPHP_METHOD(swoole_connection_iterator, key);\nPHP_METHOD(swoole_connection_iterator, valid);\n#endif\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nPHP_METHOD(swoole_server, getSocket);\n#endif\n//---------------------------------------------------------\n//                  swoole_event\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_event_add);\nPHP_FUNCTION(swoole_event_set);\nPHP_FUNCTION(swoole_event_del);\nPHP_FUNCTION(swoole_event_write);\nPHP_FUNCTION(swoole_event_wait);\nPHP_FUNCTION(swoole_event_exit);\nPHP_FUNCTION(swoole_event_defer);\nPHP_FUNCTION(swoole_client_select);\n//---------------------------------------------------------\n//                  swoole_async\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_async_read);\nPHP_FUNCTION(swoole_async_write);\nPHP_FUNCTION(swoole_async_close);\nPHP_FUNCTION(swoole_async_readfile);\nPHP_FUNCTION(swoole_async_writefile);\nPHP_FUNCTION(swoole_async_dns_lookup);\nPHP_FUNCTION(swoole_async_set);\n//---------------------------------------------------------\n//                  swoole_timer\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_timer_after);\nPHP_FUNCTION(swoole_timer_tick);\nPHP_FUNCTION(swoole_timer_exists);\nPHP_FUNCTION(swoole_timer_clear);\n//---------------------------------------------------------\n//                  other\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_load_module);\nPHP_FUNCTION(swoole_strerror);\nPHP_FUNCTION(swoole_errno);\n\nvoid swoole_destory_table(zend_resource *rsrc TSRMLS_DC);\n\nvoid swoole_server_port_init(int module_number TSRMLS_DC);\nvoid swoole_async_init(int module_number TSRMLS_DC);\nvoid swoole_table_init(int module_number TSRMLS_DC);\nvoid swoole_lock_init(int module_number TSRMLS_DC);\nvoid swoole_atomic_init(int module_number TSRMLS_DC);\nvoid swoole_client_init(int module_number TSRMLS_DC);\n#ifdef SW_COROUTINE\nvoid swoole_client_coro_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_coro_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_mysql_coro_init(int module_number TSRMLS_DC);\nvoid swoole_http_client_coro_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_http_client_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_process_init(int module_number TSRMLS_DC);\nvoid swoole_http_server_init(int module_number TSRMLS_DC);\nvoid swoole_websocket_init(int module_number TSRMLS_DC);\nvoid swoole_buffer_init(int module_number TSRMLS_DC);\nvoid swoole_mysql_init(int module_number TSRMLS_DC);\nvoid swoole_module_init(int module_number TSRMLS_DC);\n\nint php_swoole_process_start(swWorker *process, zval *object TSRMLS_DC);\n\nvoid php_swoole_check_reactor();\nvoid php_swoole_event_init();\nvoid php_swoole_event_wait();\nvoid php_swoole_check_timer(int interval);\nvoid php_swoole_register_callback(swServer *serv);\nvoid php_swoole_client_free(zval *object, swClient *cli TSRMLS_DC);\nswClient* php_swoole_client_new(zval *object, char *host, int host_len, int port);\nvoid php_swoole_client_check_setting(swClient *cli, zval *zset TSRMLS_DC);\nzval* php_swoole_websocket_unpack(swString *data TSRMLS_DC);\nvoid php_swoole_sha1(const char *str, int _len, unsigned char *digest);\n\nstatic sw_inline void* swoole_get_object(zval *object)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int)Z_OBJ_HANDLE(*object);\n#endif\n    assert(handle < swoole_objects.size);\n    return swoole_objects.array[handle];\n}\n\nstatic sw_inline void* swoole_get_property(zval *object, int property_id)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int) Z_OBJ_HANDLE(*object);\n#endif\n    if (handle >= swoole_objects.property_size[property_id])\n    {\n        return NULL;\n    }\n    return swoole_objects.property[property_id][handle];\n}\n\nvoid swoole_set_object(zval *object, void *ptr);\nvoid swoole_set_property(zval *object, int property_id, void *ptr);\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nphp_socket *swoole_convert_to_socket(int sock);\n#endif\n\nvoid php_swoole_server_before_start(swServer *serv, zval *zobject TSRMLS_DC);\nvoid php_swoole_get_recv_data(zval *zdata, swEventData *req, char *header, uint32_t header_length);\nint php_swoole_get_send_data(zval *zdata, char **str TSRMLS_DC);\nvoid php_swoole_onConnect(swServer *serv, swDataHead *);\nint php_swoole_onReceive(swServer *serv, swEventData *req);\nvoid php_swoole_onClose(swServer *, swDataHead *);\n\nstatic sw_inline zval* php_swoole_server_get_callback(swServer *serv, int server_fd, int event_type)\n{\n    swListenPort *port = serv->connection_list[server_fd].object;\n    swoole_server_port_property *property = port->ptr;\n    if (!property)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    zval *callback = property->callbacks[event_type];\n    if (!callback)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    else\n    {\n        return callback;\n    }\n}\n\n#define php_swoole_array_get_value(ht, str, v)     (sw_zend_hash_find(ht, str, sizeof(str), (void **) &v) == SUCCESS && !ZVAL_IS_NULL(v))\n\nZEND_BEGIN_MODULE_GLOBALS(swoole)\n    long aio_thread_num;\n    zend_bool display_errors;\n    zend_bool cli;\n    zend_bool use_namespace;\n    key_t message_queue_key;\n    uint32_t socket_buffer_size;\nZEND_END_MODULE_GLOBALS(swoole)\n\nextern ZEND_DECLARE_MODULE_GLOBALS(swoole);\n\n#ifdef ZTS\n#define SWOOLE_G(v) TSRMG(swoole_globals_id, zend_swoole_globals *, v)\n#else\n#define SWOOLE_G(v) (swoole_globals.v)\n#endif\n\n\n#define SWOOLE_INIT_CLASS_ENTRY(ce, name, name_ns, methods) \\\n    if (SWOOLE_G(use_namespace)) { \\\n        INIT_CLASS_ENTRY(ce, name_ns, methods); \\\n    } else { \\\n        INIT_CLASS_ENTRY(ce, name, methods); \\\n    }\n\n#endif\t/* PHP_SWOOLE_H */",
        "res_region": "/*\n  +----------------------------------------------------------------------+\n  | Swoole                                                               |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 2.0 of the Apache license,    |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.apache.org/licenses/LICENSE-2.0.html                      |\n  | If you did not receive a copy of the Apache2.0 license and are unable|\n  | to obtain it through the world-wide-web, please send a note to       |\n  | license@swoole.com so we can mail you a copy immediately.            |\n  +----------------------------------------------------------------------+\n  | Author: Tianfeng Han  <mikan.tenny@gmail.com>                        |\n  +----------------------------------------------------------------------+\n*/\n\n/* $Id$ */\n\n#ifndef PHP_SWOOLE_H\n#define PHP_SWOOLE_H\n\n#include \"php.h\"\n#include \"php_ini.h\"\n#include \"php_globals.h\"\n#include \"php_main.h\"\n\n#include \"php_streams.h\"\n#include \"php_network.h\"\n\n#include \"zend_interfaces.h\"\n#include \"zend_exceptions.h\"\n#include \"zend_variables.h\"\n#include <ext/date/php_date.h>\n#include <ext/standard/url.h>\n#include <ext/standard/info.h>\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"swoole.h\"\n#include \"Server.h\"\n#include \"Client.h\"\n#include \"async.h\"\n\n#define PHP_SWOOLE_VERSION  \"2.0.1-alpha\"\n#define PHP_SWOOLE_CHECK_CALLBACK\n\n/**\n * PHP5.2\n */\n#ifndef PHP_FE_END\n#define PHP_FE_END {NULL,NULL,NULL}\n#endif\n\n#ifndef ZEND_MOD_END\n#define ZEND_MOD_END {NULL,NULL,NULL}\n#endif\n\n#define SW_HOST_SIZE  128\n\ntypedef struct\n{\n    uint16_t port;\n    uint16_t from_fd;\n} php_swoole_udp_t;\n\nextern zend_module_entry swoole_module_entry;\n\n#define phpext_swoole_ptr &swoole_module_entry\n\n#ifdef PHP_WIN32\n#\tdefine PHP_SWOOLE_API __declspec(dllexport)\n#elif defined(__GNUC__) && __GNUC__ >= 4\n#\tdefine PHP_SWOOLE_API __attribute__ ((visibility(\"default\")))\n#else\n#\tdefine PHP_SWOOLE_API\n#endif\n\n#define SWOOLE_PROPERTY_MAX     32\n#define SWOOLE_OBJECT_MAX       1000000\n\ntypedef struct\n{\n    void **array;\n    uint32_t size;\n    void **property[SWOOLE_PROPERTY_MAX];\n    uint32_t property_size[SWOOLE_PROPERTY_MAX];\n} swoole_object_array;\n\n#ifdef ZTS\n#include \"TSRM.h\"\nextern void ***sw_thread_ctx;\nextern __thread swoole_object_array swoole_objects;\n#else\nextern swoole_object_array swoole_objects;\n#endif\n\n\n//#define SW_USE_PHP        1\n#define SW_CHECK_RETURN(s)         if(s<0){RETURN_FALSE;}else{RETURN_TRUE;}return\n#define SW_LOCK_CHECK_RETURN(s)    if(s==0){RETURN_TRUE;}else{RETURN_FALSE;}return\n\n#define swoole_php_error(level, fmt_str, ...)   if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_fatal_error(level, fmt_str, ...)   php_error_docref(NULL TSRMLS_CC, level, fmt_str, ##__VA_ARGS__)\n#define swoole_php_sys_error(level, fmt_str, ...)  if (SWOOLE_G(display_errors)) php_error_docref(NULL TSRMLS_CC, level, fmt_str\" Error: %s[%d].\", ##__VA_ARGS__, strerror(errno), errno)\n#define swoole_efree(p)  if (p) efree(p)\n\n#if defined(SW_ASYNC_MYSQL)\n#if defined(SW_HAVE_MYSQLI) && defined(SW_HAVE_MYSQLND)\n#else\n#error \"Enable async_mysql support, require mysqli and mysqlnd.\"\n#undef SW_ASYNC_MYSQL\n#endif\n#endif\n\n#ifdef SW_USE_OPENSSL\n#ifndef HAVE_OPENSSL\n#error \"Enable openssl support, require openssl library.\"\n#endif\n#else\n#ifdef SW_USE_HTTP2\n#error \"Enable http2 support, require --enable-openssl.\"\n#endif\n#endif\n\n#ifdef SW_SOCKETS\n#if PHP_VERSION_ID >= 50301 && (HAVE_SOCKETS || defined(COMPILE_DL_SOCKETS))\n#include \"ext/sockets/php_sockets.h\"\n#define SWOOLE_SOCKETS_SUPPORT\n#else\n#error \"Enable sockets support, require sockets extension.\"\n#endif\n#endif\n\n#ifdef SW_USE_HTTP2\n#if !defined(HAVE_NGHTTP2)\n#error \"Enable http2 support, require nghttp2 library.\"\n#endif\n#if !defined(HAVE_OPENSSL)\n#error \"Enable http2 support, require openssl library.\"\n#endif\n#endif\n\n#include \"php7_wrapper.h\"\n\n#define PHP_CLIENT_CALLBACK_NUM             4\n//--------------------------------------------------------\n#define SW_MAX_FIND_COUNT                   100    //for swoole_server::connection_list\n#define SW_PHP_CLIENT_BUFFER_SIZE           65535\n//--------------------------------------------------------\nenum php_swoole_client_callback_type\n{\n    SW_CLIENT_CB_onConnect = 1,\n    SW_CLIENT_CB_onReceive,\n    SW_CLIENT_CB_onClose,\n    SW_CLIENT_CB_onError,\n#ifdef SW_USE_OPENSSL\n    SW_CLIENT_CB_onSSLReady,\n#endif\n};\n//--------------------------------------------------------\nenum php_swoole_server_callback_type\n{\n    //--------------------------Swoole\\Server--------------------------\n    SW_SERVER_CB_onConnect,        //worker(event)\n    SW_SERVER_CB_onReceive,        //worker(event)\n    SW_SERVER_CB_onClose,          //worker(event)\n    SW_SERVER_CB_onPacket,         //worker(event)\n    SW_SERVER_CB_onStart,          //master\n    SW_SERVER_CB_onShutdown,       //master\n    SW_SERVER_CB_onWorkerStart,    //worker(event & task)\n    SW_SERVER_CB_onWorkerStop,     //worker(event & task)\n    SW_SERVER_CB_onTask,           //worker(task)\n    SW_SERVER_CB_onFinish,         //worker(event & task)\n    SW_SERVER_CB_onWorkerError,    //manager\n    SW_SERVER_CB_onManagerStart,   //manager\n    SW_SERVER_CB_onManagerStop,    //manager\n    SW_SERVER_CB_onPipeMessage,    //worker(evnet & task)\n    //--------------------------Swoole\\Http\\Server----------------------\n    SW_SERVER_CB_onRequest,        //http server\n    //--------------------------Swoole\\WebSocket\\Server-----------------\n    SW_SERVER_CB_onHandShake,      //worker(event)\n    SW_SERVER_CB_onOpen,           //worker(event)\n    SW_SERVER_CB_onMessage,        //worker(event)\n    //-------------------------------END--------------------------------\n};\n\n#define PHP_SERVER_CALLBACK_NUM             (SW_SERVER_CB_onMessage+1)\n\ntypedef struct\n{\n    zval *callbacks[PHP_SERVER_CALLBACK_NUM];\n#ifdef SW_COROUTINE\n    zend_fcall_info_cache *caches[PHP_SERVER_CALLBACK_NUM];\n#endif\n#if PHP_MAJOR_VERSION >= 7\n    zval _callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n    zval *setting;\n} swoole_server_port_property;\n//---------------------------------------------------------\n#define SW_FLAG_KEEP                        (1u << 12)\n#define SW_FLAG_ASYNC                       (1u << 10)\n#define SW_FLAG_SYNC                        (1u << 11)\n//---------------------------------------------------------\nenum php_swoole_fd_type\n{\n    PHP_SWOOLE_FD_STREAM_CLIENT = SW_FD_STREAM_CLIENT,\n    PHP_SWOOLE_FD_DGRAM_CLIENT = SW_FD_DGRAM_CLIENT,\n    PHP_SWOOLE_FD_MYSQL,\n    PHP_SWOOLE_FD_REDIS,\n    PHP_SWOOLE_FD_HTTPCLIENT,\n};\n//---------------------------------------------------------\n#define php_swoole_socktype(type)           (type & (~SW_FLAG_SYNC) & (~SW_FLAG_ASYNC) & (~SW_FLAG_KEEP) & (~SW_SOCK_SSL))\n#define php_swoole_array_length(array)      (Z_ARRVAL_P(array)->nNumOfElements)\n\n#define SW_LONG_CONNECTION_KEY_LEN          64\n\nextern zend_class_entry *swoole_lock_class_entry_ptr;\nextern zend_class_entry *swoole_process_class_entry_ptr;\nextern zend_class_entry *swoole_client_class_entry_ptr;\nextern zend_class_entry *swoole_http_client_class_entry_ptr;\nextern zend_class_entry *swoole_server_class_entry_ptr;\nextern zend_class_entry *swoole_connection_iterator_class_entry_ptr;\nextern zend_class_entry *swoole_buffer_class_entry_ptr;\nextern zend_class_entry *swoole_table_class_entry_ptr;\nextern zend_class_entry *swoole_http_server_class_entry_ptr;\nextern zend_class_entry *swoole_websocket_frame_class_entry_ptr;\nextern zend_class_entry *swoole_server_port_class_entry_ptr;\n\nextern zval *php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#if PHP_MAJOR_VERSION >= 7\nextern zval _php_sw_server_callbacks[PHP_SERVER_CALLBACK_NUM];\n#endif\n\nPHP_MINIT_FUNCTION(swoole);\nPHP_RINIT_FUNCTION(swoole);\nPHP_RSHUTDOWN_FUNCTION(swoole);\nPHP_MINFO_FUNCTION(swoole);\n\nPHP_FUNCTION(swoole_version);\nPHP_FUNCTION(swoole_cpu_num);\nPHP_FUNCTION(swoole_set_process_name);\nPHP_FUNCTION(swoole_get_local_ip);\n\n//---------------------------------------------------------\n//                  swoole_server\n//---------------------------------------------------------\nPHP_METHOD(swoole_server, __construct);\nPHP_METHOD(swoole_server, set);\nPHP_METHOD(swoole_server, on);\nPHP_METHOD(swoole_server, listen);\nPHP_METHOD(swoole_server, sendMessage);\nPHP_METHOD(swoole_server, addProcess);\nPHP_METHOD(swoole_server, start);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, send);\nPHP_METHOD(swoole_server, sendfile);\nPHP_METHOD(swoole_server, stats);\nPHP_METHOD(swoole_server, bind);\nPHP_METHOD(swoole_server, sendto);\nPHP_METHOD(swoole_server, sendwait);\nPHP_METHOD(swoole_server, exist);\nPHP_METHOD(swoole_server, protect);\nPHP_METHOD(swoole_server, close);\nPHP_METHOD(swoole_server, confirm);\nPHP_METHOD(swoole_server, task);\nPHP_METHOD(swoole_server, taskwait);\nPHP_METHOD(swoole_server, taskWaitMulti);\nPHP_METHOD(swoole_server, finish);\nPHP_METHOD(swoole_server, reload);\nPHP_METHOD(swoole_server, shutdown);\nPHP_METHOD(swoole_server, getLastError);\nPHP_METHOD(swoole_server, stop);\nPHP_METHOD(swoole_server, heartbeat);\n\nPHP_METHOD(swoole_server, connection_list);\nPHP_METHOD(swoole_server, connection_info);\n\n#ifdef HAVE_PCRE\nPHP_METHOD(swoole_connection_iterator, count);\nPHP_METHOD(swoole_connection_iterator, rewind);\nPHP_METHOD(swoole_connection_iterator, next);\nPHP_METHOD(swoole_connection_iterator, current);\nPHP_METHOD(swoole_connection_iterator, key);\nPHP_METHOD(swoole_connection_iterator, valid);\n#endif\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nPHP_METHOD(swoole_server, getSocket);\n#endif\n//---------------------------------------------------------\n//                  swoole_event\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_event_add);\nPHP_FUNCTION(swoole_event_set);\nPHP_FUNCTION(swoole_event_del);\nPHP_FUNCTION(swoole_event_write);\nPHP_FUNCTION(swoole_event_wait);\nPHP_FUNCTION(swoole_event_exit);\nPHP_FUNCTION(swoole_event_defer);\nPHP_FUNCTION(swoole_client_select);\n//---------------------------------------------------------\n//                  swoole_async\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_async_read);\nPHP_FUNCTION(swoole_async_write);\nPHP_FUNCTION(swoole_async_close);\nPHP_FUNCTION(swoole_async_readfile);\nPHP_FUNCTION(swoole_async_writefile);\nPHP_FUNCTION(swoole_async_dns_lookup);\nPHP_FUNCTION(swoole_async_set);\n//---------------------------------------------------------\n//                  swoole_timer\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_timer_after);\nPHP_FUNCTION(swoole_timer_tick);\nPHP_FUNCTION(swoole_timer_exists);\nPHP_FUNCTION(swoole_timer_clear);\n//---------------------------------------------------------\n//                  other\n//---------------------------------------------------------\nPHP_FUNCTION(swoole_load_module);\nPHP_FUNCTION(swoole_strerror);\nPHP_FUNCTION(swoole_errno);\n\nvoid swoole_destory_table(zend_resource *rsrc TSRMLS_DC);\n\nvoid swoole_server_port_init(int module_number TSRMLS_DC);\nvoid swoole_async_init(int module_number TSRMLS_DC);\nvoid swoole_table_init(int module_number TSRMLS_DC);\nvoid swoole_lock_init(int module_number TSRMLS_DC);\nvoid swoole_atomic_init(int module_number TSRMLS_DC);\nvoid swoole_client_init(int module_number TSRMLS_DC);\n#ifdef SW_COROUTINE\nvoid swoole_client_coro_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_coro_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_mysql_coro_init(int module_number TSRMLS_DC);\nvoid swoole_http_client_coro_init(int module_number TSRMLS_DC);\nvoid swoole_coroutine_util_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_http_client_init(int module_number TSRMLS_DC);\n#ifdef SW_USE_REDIS\nvoid swoole_redis_init(int module_number TSRMLS_DC);\n#endif\nvoid swoole_process_init(int module_number TSRMLS_DC);\nvoid swoole_http_server_init(int module_number TSRMLS_DC);\nvoid swoole_websocket_init(int module_number TSRMLS_DC);\nvoid swoole_buffer_init(int module_number TSRMLS_DC);\nvoid swoole_mysql_init(int module_number TSRMLS_DC);\nvoid swoole_module_init(int module_number TSRMLS_DC);\n\nint php_swoole_process_start(swWorker *process, zval *object TSRMLS_DC);\n\nvoid php_swoole_check_reactor();\nvoid php_swoole_event_init();\nvoid php_swoole_event_wait();\nvoid php_swoole_check_timer(int interval);\nvoid php_swoole_register_callback(swServer *serv);\nvoid php_swoole_client_free(zval *object, swClient *cli TSRMLS_DC);\nswClient* php_swoole_client_new(zval *object, char *host, int host_len, int port);\nvoid php_swoole_client_check_setting(swClient *cli, zval *zset TSRMLS_DC);\nzval* php_swoole_websocket_unpack(swString *data TSRMLS_DC);\nvoid php_swoole_sha1(const char *str, int _len, unsigned char *digest);\n\nstatic sw_inline void* swoole_get_object(zval *object)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int)Z_OBJ_HANDLE(*object);\n#endif\n    assert(handle < swoole_objects.size);\n    return swoole_objects.array[handle];\n}\n\nstatic sw_inline void* swoole_get_property(zval *object, int property_id)\n{\n#if PHP_MAJOR_VERSION < 7\n    zend_object_handle handle = Z_OBJ_HANDLE_P(object);\n#else\n    int handle = (int) Z_OBJ_HANDLE(*object);\n#endif\n    if (handle >= swoole_objects.property_size[property_id])\n    {\n        return NULL;\n    }\n    return swoole_objects.property[property_id][handle];\n}\n\nvoid swoole_set_object(zval *object, void *ptr);\nvoid swoole_set_property(zval *object, int property_id, void *ptr);\n\n#ifdef SWOOLE_SOCKETS_SUPPORT\nphp_socket *swoole_convert_to_socket(int sock);\n#endif\n\nvoid php_swoole_server_before_start(swServer *serv, zval *zobject TSRMLS_DC);\nvoid php_swoole_get_recv_data(zval *zdata, swEventData *req, char *header, uint32_t header_length);\nint php_swoole_get_send_data(zval *zdata, char **str TSRMLS_DC);\nvoid php_swoole_onConnect(swServer *serv, swDataHead *);\nint php_swoole_onReceive(swServer *serv, swEventData *req);\nvoid php_swoole_onClose(swServer *, swDataHead *);\n\nstatic sw_inline zval* php_swoole_server_get_callback(swServer *serv, int server_fd, int event_type)\n{\n    swListenPort *port = serv->connection_list[server_fd].object;\n    swoole_server_port_property *property = port->ptr;\n    if (!property)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    zval *callback = property->callbacks[event_type];\n    if (!callback)\n    {\n        return php_sw_server_callbacks[event_type];\n    }\n    else\n    {\n        return callback;\n    }\n}\n\n#define php_swoole_array_get_value(ht, str, v)     (sw_zend_hash_find(ht, str, sizeof(str), (void **) &v) == SUCCESS && !ZVAL_IS_NULL(v))\n\nZEND_BEGIN_MODULE_GLOBALS(swoole)\n    long aio_thread_num;\n    zend_bool display_errors;\n    zend_bool cli;\n    zend_bool use_namespace;\n    key_t message_queue_key;\n    uint32_t socket_buffer_size;\nZEND_END_MODULE_GLOBALS(swoole)\n\nextern ZEND_DECLARE_MODULE_GLOBALS(swoole);\n\n#ifdef ZTS\n#define SWOOLE_G(v) TSRMG(swoole_globals_id, zend_swoole_globals *, v)\n#else\n#define SWOOLE_G(v) (swoole_globals.v)\n#endif\n\n\n#define SWOOLE_INIT_CLASS_ENTRY(ce, name, name_ns, methods) \\\n    if (SWOOLE_G(use_namespace)) { \\\n        INIT_CLASS_ENTRY(ce, name_ns, methods); \\\n    } else { \\\n        INIT_CLASS_ENTRY(ce, name, methods); \\\n    }\n\n#define SWOOLE_CLASS_ALIAS(name, name_ns) \\\n    if (SWOOLE_G(use_namespace)) { \\\n        zend_register_class_alias(#name, name##_class_entry_ptr);\\\n    } else { \\\n        zend_register_class_alias(name_ns, name##_class_entry_ptr);\\\n    }\n\n#endif\t/* PHP_SWOOLE_H */",
        "lookback": "  +----------------------------------------------------------------------+",
        "lookahead": "",
        "label": [
            "base",
            "style_related"
        ],
        "start_line": 0,
        "end_line": 1373,
        "merge_gen_region": null,
        "confidence": 0.795151948928833,
        "hesitated": true
    }
]