[
    {
        "a_contents": "/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#pragma once\n\n#include <aidl/android/hardware/threadnetwork/BnThreadChip.h>\n#include <aidl/android/hardware/threadnetwork/IThreadChipCallback.h>\n\n#include \"lib/spinel/spinel_interface.hpp\"\n#include \"mainloop.hpp\"\n\n#include <android/binder_auto_utils.h>\n#include <android/binder_ibinder.h>\n#include <utils/Mutex.h>\n\nnamespace aidl {\nnamespace android {\nnamespace hardware {\nnamespace threadnetwork {\n\nclass ThreadChip : public BnThreadChip, ot::Posix::Mainloop::Source {\n  public:\n    ThreadChip(char* url);\n    ~ThreadChip() {}\n\n    ndk::ScopedAStatus open(const std::shared_ptr<IThreadChipCallback>& in_callback) override;\n    ndk::ScopedAStatus close() override;\n    ndk::ScopedAStatus sendSpinelFrame(const std::vector<uint8_t>& in_frame) override;\n    ndk::ScopedAStatus hardwareReset() override;\n    void Update(otSysMainloopContext& context) override;\n    void Process(const otSysMainloopContext& context) override;\n\n  private:\n    static void onBinderDiedJump(void* context);\n    void onBinderDied(void);\n    static void onBinderUnlinkedJump(void* context);\n    void onBinderUnlinked(void);\n    static void handleReceivedFrameJump(void* context);\n    void handleReceivedFrame(void);\n    ndk::ScopedAStatus errorStatus(int32_t error, const char* message);\n    ndk::ScopedAStatus initChip(const std::shared_ptr<IThreadChipCallback>& in_callback);\n    ndk::ScopedAStatus deinitChip();\n\n    ot::Url::Url mUrl;\n    std::shared_ptr<ot::Spinel::SpinelInterface> mSpinelInterface;\n    ot::Spinel::SpinelInterface::RxFrameBuffer mRxFrameBuffer;\n    std::shared_ptr<IThreadChipCallback> mCallback;\n    ::ndk::ScopedAIBinder_DeathRecipient mDeathRecipient;\n};\n\n}  // namespace threadnetwork\n}  // namespace hardware\n}  // namespace android\n}  // namespace aidl",
        "b_contents": "/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#pragma once\n\n#include <aidl/android/hardware/threadnetwork/BnThreadChip.h>\n#include <aidl/android/hardware/threadnetwork/IThreadChipCallback.h>\n\n#include \"lib/spinel/spinel_interface.hpp\"\n#include \"mainloop.hpp\"\n\n#include <android/binder_auto_utils.h>\n#include <android/binder_ibinder.h>\n#include <utils/Mutex.h>\n\nnamespace aidl {\nnamespace android {\nnamespace hardware {\nnamespace threadnetwork {\n\nclass ThreadChip : public BnThreadChip, ot::Posix::Mainloop::Source {\n  public:\n    ThreadChip(char* url);\n    ~ThreadChip();\n\n    ndk::ScopedAStatus open(const std::shared_ptr<IThreadChipCallback>& in_callback) override;\n    ndk::ScopedAStatus close() override;\n    ndk::ScopedAStatus sendSpinelFrame(const std::vector<uint8_t>& in_frame) override;\n    ndk::ScopedAStatus hardwareReset() override;\n    void Update(otSysMainloopContext& context) override;\n    void Process(const otSysMainloopContext& context) override;\n\n  private:\n    static void onBinderDiedJump(void* context);\n    void onBinderDied(void);\n    static void onBinderUnlinkedJump(void* context);\n    void onBinderUnlinked(void);\n    static void handleReceivedFrameJump(void* context);\n    void handleReceivedFrame(void);\n    ndk::ScopedAStatus errorStatus(int32_t error, const char* message);\n    ndk::ScopedAStatus initChip(const std::shared_ptr<IThreadChipCallback>& in_callback);\n    ndk::ScopedAStatus deinitChip();\n\n    ot::Url::Url mUrl;\n    std::shared_ptr<ot::Spinel::SpinelInterface> mSpinelInterface;\n    ot::Spinel::SpinelInterface::RxFrameBuffer mRxFrameBuffer;\n    std::shared_ptr<IThreadChipCallback> mCallback;\n    ::ndk::ScopedAIBinder_DeathRecipient mDeathRecipient;\n};\n\n}  // namespace threadnetwork\n}  // namespace hardware\n}  // namespace android\n}  // namespace aidl",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#pragma once\n\n#include <aidl/android/hardware/threadnetwork/BnThreadChip.h>\n#include <aidl/android/hardware/threadnetwork/IThreadChipCallback.h>\n\n#include \"lib/spinel/spinel_interface.hpp\"\n#include \"mainloop.hpp\"\n\n#include <android/binder_auto_utils.h>\n#include <android/binder_ibinder.h>\n#include <utils/Mutex.h>\n\nnamespace aidl {\nnamespace android {\nnamespace hardware {\nnamespace threadnetwork {\n\nclass ThreadChip : public BnThreadChip, ot::Posix::Mainloop::Source {\n  public:\n    ThreadChip(char* url);\n    ~ThreadChip() {}\n\n    ndk::ScopedAStatus open(const std::shared_ptr<IThreadChipCallback>& in_callback) override;\n    ndk::ScopedAStatus close() override;\n    ndk::ScopedAStatus sendSpinelFrame(const std::vector<uint8_t>& in_frame) override;\n    ndk::ScopedAStatus hardwareReset() override;\n    void Update(otSysMainloopContext& context) override;\n    void Process(const otSysMainloopContext& context) override;\n\n  private:\n    static void onBinderDiedJump(void* context);\n    void onBinderDied(void);\n    static void onBinderUnlinkedJump(void* context);\n    void onBinderUnlinked(void);\n    static void handleReceivedFrameJump(void* context);\n    void handleReceivedFrame(void);\n    ndk::ScopedAStatus errorStatus(int32_t error, const char* message);\n    ndk::ScopedAStatus initChip(const std::shared_ptr<IThreadChipCallback>& in_callback);\n    ndk::ScopedAStatus deinitChip();\n\n    ot::Url::Url mUrl;\n    std::shared_ptr<ot::Spinel::SpinelInterface> mSpinelInterface;\n    ot::Spinel::SpinelInterface::RxFrameBuffer mRxFrameBuffer;\n    std::shared_ptr<IThreadChipCallback> mCallback;\n    ::ndk::ScopedAIBinder_DeathRecipient mDeathRecipient;\n};\n\n}  // namespace threadnetwork\n}  // namespace hardware\n}  // namespace android\n}  // namespace aidl",
        "lookback": " * Copyright (C) 2022 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 137,
        "merge_gen_region": " CopyrightC 2 The Open Project * Licensed the Apache, 2. ( \"\"); you not this except in with License * may a of License * may a of License * *://..///LICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the the for specific governing and limitations the License */pragma # <landroid/////thread/networkBThread.>includeaid/androidhardwarethread/ITChip.>includelibspi/nelinterfacehpp # \"loophpp # </____.>includeandroidbinderautoutilsh # <androidbinderib.>includeutilsMutexh namespaceidl namespace { android namespace hardware namespace thread { Thread : BThread,::::sixMain::Source public Thread(*); ~Chip {}dkScopedStatus( stdsharedptrITChip>& incallback override n::A close override n::A sendnelFrameconst stdvectoruint_>&_frame override n::A hardware(); UpdateotMainloop&) override void( otMainloop&) override private static onBinderJumpvoid context voidBinder(void static onUnJumpvoid context voidBinder(); static onUnJumpvoid context voidBinderlinked",
        "confidence": 0.9373849034309387,
        "hesitated": false,
        "resolved": false
    }
]