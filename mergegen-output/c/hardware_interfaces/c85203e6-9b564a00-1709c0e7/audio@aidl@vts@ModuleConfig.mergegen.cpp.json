[
    {
        "a_contents": "std::string ModuleConfig::toString() const {\n    std::string result;\n    result.append(\"Ports: \");\n    result.append(android::internal::ToString(mPorts));\n    result.append(\"\\nInitial configs: \");\n    result.append(android::internal::ToString(mInitialConfigs));\n    result.append(\"\\nAttached sink device ports: \");\n    result.append(android::internal::ToString(mAttachedSinkDevicePorts));\n    result.append(\"\\nAttached source device ports: \");\n    result.append(android::internal::ToString(mAttachedSourceDevicePorts));\n    result.append(\"\\nExternal device ports: \");\n    result.append(android::internal::ToString(mExternalDevicePorts));\n    result.append(\"\\nRoutes: \");\n    result.append(android::internal::ToString(mRoutes));\n    return result;\n}\n\nstatic size_t combineAudioConfigs(const AudioPort& port, const AudioProfile& profile,\n                                  std::vector<AudioPortConfig>* result) {\n    const size_t newConfigCount = profile.channelMasks.size() * profile.sampleRates.size();\n    result->reserve(result->capacity() + newConfigCount);",
        "b_contents": "std::string ModuleConfig::toString() const {\n    std::string result;\n    result.append(\"Ports: \");\n    result.append(android::internal::ToString(mPorts));\n    result.append(\"Initial configs: \");\n    result.append(android::internal::ToString(mInitialConfigs));\n    result.append(\"Attached sink device ports: \");\n    result.append(android::internal::ToString(mAttachedSinkDevicePorts));\n    result.append(\"Attached source device ports: \");\n    result.append(android::internal::ToString(mAttachedSourceDevicePorts));\n    result.append(\"External device ports: \");\n    result.append(android::internal::ToString(mExternalDevicePorts));\n    result.append(\"Routes: \");\n    result.append(android::internal::ToString(mRoutes));\n    return result;\n}\n\nstatic std::vector<AudioPortConfig> combineAudioConfigs(const AudioPort& port,\n                                                        const AudioProfile& profile) {\n    std::vector<AudioPortConfig> configs;\n    configs.reserve(profile.channelMasks.size() * profile.sampleRates.size());",
        "base_contents": "static std::vector<AudioPortConfig> combineAudioConfigs(const AudioPort& port,\n                                                        const AudioProfile& profile) {\n    std::vector<AudioPortConfig> configs;\n    configs.reserve(profile.channelMasks.size() * profile.sampleRates.size());",
        "res_region": "std::string ModuleConfig::toString() const {\n    std::string result;\n    result.append(\"Ports: \");\n    result.append(android::internal::ToString(mPorts));\n    result.append(\"\\nInitial configs: \");\n    result.append(android::internal::ToString(mInitialConfigs));\n    result.append(\"\\nAttached sink device ports: \");\n    result.append(android::internal::ToString(mAttachedSinkDevicePorts));\n    result.append(\"\\nAttached source device ports: \");\n    result.append(android::internal::ToString(mAttachedSourceDevicePorts));\n    result.append(\"\\nExternal device ports: \");\n    result.append(android::internal::ToString(mExternalDevicePorts));\n    result.append(\"\\nRoutes: \");\n    result.append(android::internal::ToString(mRoutes));\n    return result;\n}\n\nstatic size_t combineAudioConfigs(const AudioPort& port, const AudioProfile& profile,\n                                  std::vector<AudioPortConfig>* result) {\n    const size_t newConfigCount = profile.channelMasks.size() * profile.sampleRates.size();\n    result->reserve(result->capacity() + newConfigCount);",
        "lookback": "    std::string result;",
        "lookahead": "    for (auto channelMask : profile.channelMasks) {",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 283,
        "end_line": 332,
        "merge_gen_region": ":: Module:: Module::() {:: result resultappendPorts \"); resultappendandroidinternalToStringm));.(\"Initials \");.(::internalToStringmConfigs resultappendAttached device ports \"); resultappendandroidinternalToStringmSinkDevice));.(\"Attached device: \");.(androidinternalToStringmAttachedDevice));..(\" source ports \");.(::internalToStringmSourcePorts resultappendExternal device: \");.(::(External result \");.(::(External result \");.(androidinternalToStringmDevicePorts resultappendRout:: \");.(androidinternal::(Rout)); result }(\"es \"); resultappendandroidinternalToStringmes return; static:: Module::() {:: resultappendPorts \");.(::(Ports resultappendn config: \");.(::(Initial)); resultappendn sink device: \");.(androidinternalToStringmAttachedDevice));..(\"\\Attached device: \");.(androidinternalToStringmDevice));.(\"\\Routes \"); resultappendandroidinternalToStringmes return; static_ combineConfigsconstPort port constProfile&,::<Port>*) const_ newCount profilechannelssize *.Ratessize resultreserveresultcapacity +Config); ( channelchannel profilechannels",
        "confidence": 0.908531129360199,
        "hesitated": false,
        "resolved": false
    }
]