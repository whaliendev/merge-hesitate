[
    {
        "a_contents": "const string configFilePath = \"/vendor/etc/tuner_vts_config_1_0.xml\";\n\n#define FILTER_MAIN_TYPE_BIT_COUNT 5\n\n// Hardware configs\nstatic map<string, FrontendConfig> frontendMap;\nstatic map<string, FilterConfig> filterMap;\nstatic map<string, DvrConfig> dvrMap;\nstatic map<string, LnbConfig> lnbMap;\nstatic map<string, TimeFilterConfig> timeFilterMap;\nstatic map<string, vector<uint8_t>> diseqcMsgMap;\nstatic map<string, DescramblerConfig> descramblerMap;\n\n// Hardware and test cases connections\nstatic LiveBroadcastHardwareConnections live;\nstatic ScanHardwareConnections scan;\nstatic DvrPlaybackHardwareConnections playback;\nstatic DvrRecordHardwareConnections record;\nstatic DescramblingHardwareConnections descrambling;\nstatic LnbLiveHardwareConnections lnbLive;\nstatic LnbRecordHardwareConnections lnbRecord;\nstatic TimeFilterHardwareConnections timeFilter;\n\n/** Config all the frontends that would be used in the tests */",
        "b_contents": "#define CLEAR_KEY_SYSTEM_ID 0xF6D8\n#define FILTER_MAIN_TYPE_BIT_COUNT 32\n#define PROVISION_STR                                      \\\n    \"{                                                   \" \\\n    \"  \\\"id\\\": 21140844,                                 \" \\\n    \"  \\\"name\\\": \\\"Test Title\\\",                         \" \\\n    \"  \\\"lowercase_organization_name\\\": \\\"Android\\\",     \" \\\n    \"  \\\"asset_key\\\": {                                  \" \\\n    \"  \\\"encryption_key\\\": \\\"nezAr3CHFrmBR9R8Tedotw==\\\"  \" \\\n    \"  },                                                \" \\\n    \"  \\\"cas_type\\\": 1,                                  \" \\\n    \"  \\\"track_types\\\": [ ]                              \" \\\n    \"}                                                   \"\n\ntypedef enum {\n    TS_VIDEO0,\n    TS_VIDEO1,\n    TS_AUDIO0,\n    TS_PES0,\n    TS_PCR0,\n    TS_SECTION0,\n    TS_TS0,\n    TS_RECORD0,\n    FILTER_MAX,\n} Filter;\n\ntypedef enum {\n    TIMER0,\n    TIMER_MAX,\n} TimeFilter;\n\ntypedef enum {\n    SOURCE,\n    SINK,\n    LINKAGE_DIR,\n} Linkage;\n\ntypedef enum {\n    DVBT,\n    DVBS,\n    FRONTEND_MAX,\n} Frontend;\n\ntypedef enum {\n    LNB0,\n    LNB_EXTERNAL,\n    LNB_MAX,\n} Lnb;\n\ntypedef enum {\n    DISEQC_POWER_ON,\n    DISEQC_MAX,\n} Diseqc;\n\ntypedef enum {\n    SCAN_DVBT,\n    SCAN_DVBS,\n    SCAN_MAX,\n} FrontendScan;\n\ntypedef enum {\n    DVR_RECORD0,\n    DVR_PLAYBACK0,\n    DVR_SOFTWARE_FE,\n    DVR_MAX,\n} Dvr;\n\ntypedef enum {\n    DESC_0,\n    DESC_MAX,\n} Descrambler;\n\nstruct FilterConfig {\n    uint32_t bufferSize;\n    DemuxFilterType type;\n    DemuxFilterSettings settings;\n    bool getMqDesc;\n\n    bool operator<(const FilterConfig& /*c*/) const { return false; }\n};\n\nstruct TimeFilterConfig {\n    uint64_t timeStamp;\n};\n\nstruct FrontendConfig {\n    bool enable;\n    bool isSoftwareFe;\n    FrontendType type;\n    FrontendSettings settings;\n    vector<FrontendStatusType> tuneStatusTypes;\n    vector<FrontendStatus> expectTuneStatuses;\n};\n\nstruct LnbConfig {\n    string name;\n    LnbVoltage voltage;\n    LnbTone tone;\n    LnbPosition position;\n};\n\nstruct ChannelConfig {\n    int32_t frontendId;\n    int32_t channelId;\n    std::string channelName;\n    DemuxTpid videoPid;\n    DemuxTpid audioPid;\n};\n\nstruct DvrConfig {\n    DvrType type;\n    uint32_t bufferSize;\n    DvrSettings settings;\n    string playbackInputFile;\n};\n\nstruct DescramblerConfig {\n    uint32_t casSystemId;\n    string provisionStr;\n    vector<uint8_t> hidlPvtData;\n};\n\nstatic FrontendConfig frontendArray[FILTER_MAX];\nstatic FrontendConfig frontendScanArray[SCAN_MAX];\nstatic LnbConfig lnbArray[LNB_MAX];\nstatic vector<uint8_t> diseqcMsgArray[DISEQC_MAX];\nstatic ChannelConfig channelArray[FRONTEND_MAX];\nstatic FilterConfig filterArray[FILTER_MAX];\nstatic TimeFilterConfig timeFilterArray[TIMER_MAX];\nstatic DemuxFilterType filterLinkageTypes[LINKAGE_DIR][FILTER_MAIN_TYPE_BIT_COUNT];\nstatic DvrConfig dvrArray[DVR_MAX];\nstatic DescramblerConfig descramblerArray[DESC_MAX];\nstatic vector<string> goldenOutputFiles;\nstatic int defaultFrontend = DVBS;\nstatic int defaultScanFrontend = SCAN_DVBS;\n\n/** Configuration array for the frontend tune test */",
        "base_contents": "#define CLEAR_KEY_SYSTEM_ID 0xF6D8\n#define FILTER_MAIN_TYPE_BIT_COUNT 32\n#define PROVISION_STR                                      \\\n    \"{                                                   \" \\\n    \"  \\\"id\\\": 21140844,                                 \" \\\n    \"  \\\"name\\\": \\\"Test Title\\\",                         \" \\\n    \"  \\\"lowercase_organization_name\\\": \\\"Android\\\",     \" \\\n    \"  \\\"asset_key\\\": {                                  \" \\\n    \"  \\\"encryption_key\\\": \\\"nezAr3CHFrmBR9R8Tedotw==\\\"  \" \\\n    \"  },                                                \" \\\n    \"  \\\"cas_type\\\": 1,                                  \" \\\n    \"  \\\"track_types\\\": [ ]                              \" \\\n    \"}                                                   \"\n\ntypedef enum {\n    TS_VIDEO0,\n    TS_VIDEO1,\n    TS_AUDIO0,\n    TS_PES0,\n    TS_PCR0,\n    TS_SECTION0,\n    TS_TS0,\n    TS_RECORD0,\n    FILTER_MAX,\n} Filter;\n\ntypedef enum {\n    TIMER0,\n    TIMER_MAX,\n} TimeFilter;\n\ntypedef enum {\n    SOURCE,\n    SINK,\n    LINKAGE_DIR,\n} Linkage;\n\ntypedef enum {\n    DVBT,\n    DVBS,\n    FRONTEND_MAX,\n} Frontend;\n\ntypedef enum {\n    LNB0,\n    LNB_EXTERNAL,\n    LNB_MAX,\n} Lnb;\n\ntypedef enum {\n    DISEQC_POWER_ON,\n    DISEQC_MAX,\n} Diseqc;\n\ntypedef enum {\n    SCAN_DVBT,\n    SCAN_MAX,\n} FrontendScan;\n\ntypedef enum {\n    DVR_RECORD0,\n    DVR_PLAYBACK0,\n    DVR_SOFTWARE_FE,\n    DVR_MAX,\n} Dvr;\n\ntypedef enum {\n    DESC_0,\n    DESC_MAX,\n} Descrambler;\n\nstruct FilterConfig {\n    uint32_t bufferSize;\n    DemuxFilterType type;\n    DemuxFilterSettings settings;\n    bool getMqDesc;\n\n    bool operator<(const FilterConfig& /*c*/) const { return false; }\n};\n\nstruct TimeFilterConfig {\n    uint64_t timeStamp;\n};\n\nstruct FrontendConfig {\n    bool enable;\n    bool isSoftwareFe;\n    FrontendType type;\n    FrontendSettings settings;\n    vector<FrontendStatusType> tuneStatusTypes;\n    vector<FrontendStatus> expectTuneStatuses;\n};\n\nstruct LnbConfig {\n    string name;\n    LnbVoltage voltage;\n    LnbTone tone;\n    LnbPosition position;\n};\n\nstruct ChannelConfig {\n    int32_t frontendId;\n    int32_t channelId;\n    std::string channelName;\n    DemuxTpid videoPid;\n    DemuxTpid audioPid;\n};\n\nstruct DvrConfig {\n    DvrType type;\n    uint32_t bufferSize;\n    DvrSettings settings;\n    string playbackInputFile;\n};\n\nstruct DescramblerConfig {\n    uint32_t casSystemId;\n    string provisionStr;\n    vector<uint8_t> hidlPvtData;\n};\n\nstatic FrontendConfig frontendArray[FILTER_MAX];\nstatic FrontendConfig frontendScanArray[SCAN_MAX];\nstatic LnbConfig lnbArray[LNB_MAX];\nstatic vector<uint8_t> diseqcMsgArray[DISEQC_MAX];\nstatic ChannelConfig channelArray[FRONTEND_MAX];\nstatic FilterConfig filterArray[FILTER_MAX];\nstatic TimeFilterConfig timeFilterArray[TIMER_MAX];\nstatic DemuxFilterType filterLinkageTypes[LINKAGE_DIR][FILTER_MAIN_TYPE_BIT_COUNT];\nstatic DvrConfig dvrArray[DVR_MAX];\nstatic DescramblerConfig descramblerArray[DESC_MAX];\nstatic vector<string> goldenOutputFiles;\nstatic int defaultFrontend = DVBT;\nstatic int defaultScanFrontend = SCAN_DVBT;\n\n/** Configuration array for the frontend tune test */",
        "res_region": "const string configFilePath = \"/vendor/etc/tuner_vts_config_1_0.xml\";\n\n#define FILTER_MAIN_TYPE_BIT_COUNT 5\n\n// Hardware configs\nstatic map<string, FrontendConfig> frontendMap;\nstatic map<string, FilterConfig> filterMap;\nstatic map<string, DvrConfig> dvrMap;\nstatic map<string, LnbConfig> lnbMap;\nstatic map<string, TimeFilterConfig> timeFilterMap;\nstatic map<string, vector<uint8_t>> diseqcMsgMap;\nstatic map<string, DescramblerConfig> descramblerMap;\n\n// Hardware and test cases connections\nstatic LiveBroadcastHardwareConnections live;\nstatic ScanHardwareConnections scan;\nstatic DvrPlaybackHardwareConnections playback;\nstatic DvrRecordHardwareConnections record;\nstatic DescramblingHardwareConnections descrambling;\nstatic LnbLiveHardwareConnections lnbLive;\nstatic LnbRecordHardwareConnections lnbRecord;\nstatic TimeFilterHardwareConnections timeFilter;\n\n/** Config all the frontends that would be used in the tests */",
        "lookback": "",
        "lookahead": "inline void initFrontendConfig() {",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 43,
        "end_line": 343,
        "merge_gen_region": null,
        "confidence": 0.6916207075119019,
        "hesitated": true
    },
    {
        "a_contents": "    // Read customized config\n    TunerTestingConfigReader1_0::readFrontendConfig1_0(frontendMap);",
        "b_contents": "/** Configuration array for the frontend scan test */\ninline void initFrontendScanConfig() {\n    frontendScanArray[SCAN_DVBT].type = FrontendType::DVBT;\n    frontendScanArray[SCAN_DVBT].settings.dvbt({\n            .frequency = 578000,\n            .transmissionMode = FrontendDvbtTransmissionMode::MODE_8K,\n            .bandwidth = FrontendDvbtBandwidth::BANDWIDTH_8MHZ,\n            .constellation = FrontendDvbtConstellation::AUTO,\n            .hierarchy = FrontendDvbtHierarchy::AUTO,\n            .hpCoderate = FrontendDvbtCoderate::AUTO,\n            .lpCoderate = FrontendDvbtCoderate::AUTO,\n            .guardInterval = FrontendDvbtGuardInterval::AUTO,\n            .isHighPriority = true,\n            .standard = FrontendDvbtStandard::T,\n    });\n\n    frontendScanArray[SCAN_DVBS].type = FrontendType::DVBS;\n    frontendScanArray[SCAN_DVBS].settings.dvbs({\n            .frequency = 1000000,\n            .symbolRate = 27500,\n            .modulation = FrontendDvbsModulation::MOD_QPSK,\n            .standard = FrontendDvbsStandard::S,\n    });",
        "base_contents": "/** Configuration array for the frontend scan test */\ninline void initFrontendScanConfig() {\n    frontendScanArray[SCAN_DVBT].type = FrontendType::DVBT;\n    frontendScanArray[SCAN_DVBT].settings.dvbt({\n            .frequency = 578000,\n            .transmissionMode = FrontendDvbtTransmissionMode::MODE_8K,\n            .bandwidth = FrontendDvbtBandwidth::BANDWIDTH_8MHZ,\n            .constellation = FrontendDvbtConstellation::AUTO,\n            .hierarchy = FrontendDvbtHierarchy::AUTO,\n            .hpCoderate = FrontendDvbtCoderate::AUTO,\n            .lpCoderate = FrontendDvbtCoderate::AUTO,\n            .guardInterval = FrontendDvbtGuardInterval::AUTO,\n            .isHighPriority = true,\n            .standard = FrontendDvbtStandard::T,\n    });",
        "res_region": "    // Read customized config\n    TunerTestingConfigReader1_0::readFrontendConfig1_0(frontendMap);",
        "lookback": "    TunerTestingConfigReader1_0::readFrontendConfig1_0(frontendMap);",
        "lookahead": "};",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 367,
        "end_line": 410,
        "merge_gen_region": null,
        "confidence": 0.36274608969688416,
        "hesitated": true
    }
]