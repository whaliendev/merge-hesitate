[
    {
        "a_contents": "    lv_res_t res;",
        "b_contents": "    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);\n\n    /*Only deal with clickable drop down lists*/\n    if(!lv_obj_get_click(ddlist))\n        return LV_RES_OK;\n    \n    if(ext->opened == 0) { /*Open the list*/\n        ext->opened = 1;\n        lv_obj_set_drag(lv_page_get_scrl(ddlist), true);\n        lv_ddlist_refr_size(ddlist, true);\n    } else {\n\n        lv_indev_t * indev = lv_indev_get_act();\n#if LV_USE_GROUP\n        /*Leave edit mode once a new item is selected*/\n        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {\n            ext->sel_opt_id_ori = ext->sel_opt_id;\n            lv_group_t * g      = lv_obj_get_group(ddlist);\n            if(lv_group_get_editing(g)) {\n                lv_group_set_editing(g, false);\n            }\n        }\n#endif\n\n        /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/\n        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {\n            lv_point_t p;\n            lv_indev_get_point(indev, &p);\n            p.y -= ext->label->coords.y1;\n            p.x -= ext->label->coords.x1;\n            uint16_t letter_i;\n            letter_i = lv_label_get_letter_on(ext->label, &p);\n\n            uint16_t new_opt  = 0;\n            const char * txt  = lv_label_get_text(ext->label);\n            uint32_t i        = 0;\n            uint32_t i_prev   = 0;\n\n            uint32_t letter_cnt = 0;\n            uint32_t letter;\n            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {\n                letter = lv_txt_encoded_next(txt, &i);\n                /*Count he lines to reach the clicked letter. But ignore the last '\\n' because it\n                 * still belongs to the clicked line*/\n                if(letter == '\\n' && i_prev != letter_i) new_opt++;\n                i_prev = i;\n            }",
        "base_contents": "    lv_ddlist_ext_t * ext = lv_obj_get_ext_attr(ddlist);\n\n    if(ext->opened == 0) { /*Open the list*/\n        ext->opened = 1;\n        lv_obj_set_drag(lv_page_get_scrl(ddlist), true);\n        lv_ddlist_refr_size(ddlist, true);\n    } else {\n\n        lv_indev_t * indev = lv_indev_get_act();\n#if LV_USE_GROUP\n        /*Leave edit mode once a new item is selected*/\n        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {\n            ext->sel_opt_id_ori = ext->sel_opt_id;\n            lv_group_t * g      = lv_obj_get_group(ddlist);\n            if(lv_group_get_editing(g)) {\n                lv_group_set_editing(g, false);\n            }\n        }\n#endif\n\n        /*Search the clicked option (For KEYPAD and ENCODER the new value should be already set)*/\n        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {\n            lv_point_t p;\n            lv_indev_get_point(indev, &p);\n            p.y -= ext->label->coords.y1;\n            p.x -= ext->label->coords.x1;\n            uint16_t letter_i;\n            letter_i = lv_label_get_letter_on(ext->label, &p);\n\n            uint16_t new_opt  = 0;\n            const char * txt  = lv_label_get_text(ext->label);\n            uint32_t i        = 0;\n            uint32_t i_prev   = 0;\n\n            uint32_t letter_cnt = 0;\n            uint32_t letter;\n            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {\n                letter = lv_txt_encoded_next(txt, &i);\n                /*Count he lines to reach the clicked letter. But ignore the last '\\n' because it\n                 * still belongs to the clicked line*/\n                if(letter == '\\n' && i_prev != letter_i) new_opt++;\n                i_prev = i;\n            }",
        "res_region": "    lv_res_t res;",
        "lookback": "",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 794,
        "end_line": 888,
        "merge_gen_region": null,
        "confidence": 0.5448964834213257,
        "hesitated": true
    }
]