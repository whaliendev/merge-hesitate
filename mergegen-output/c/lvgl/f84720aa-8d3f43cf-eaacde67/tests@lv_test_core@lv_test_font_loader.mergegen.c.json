[
    {
        "a_contents": "/**\n * @file lv_test_font_loader.c\n *\n */\n\n/*********************\n *      INCLUDES\n *********************/\n\n#include \"../../lvgl.h\"\n#if LV_BUILD_TEST\n#include \"../lv_test_assert.h\"\n#include \"../src/lv_font/lv_font_fmt_txt.h\"\n#include \"../src/lv_font/lv_font.h\"\n#include \"../src/lv_font/lv_font_loader.h\"\n\n#include \"lv_test_font_loader.h\" \n\n/*********************\n *      DEFINES\n *********************/\n\n/**********************\n *      TYPEDEFS\n **********************/\n\n/**********************\n *  STATIC PROTOTYPES\n **********************/\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2);\n#endif\n\n/**********************\n *  STATIC VARIABLES\n **********************/\n\n/**********************\n *      MACROS\n **********************/\n\n/**********************\n *   GLOBAL FUNCTIONS\n **********************/\n\nextern lv_font_t font_1;\nextern lv_font_t font_2;\nextern lv_font_t font_3;\n\nvoid lv_test_font_loader(void)\n{\n#if LV_USE_FILESYSTEM\n    lv_font_t * font_1_bin = lv_font_load(\"F:font_1.fnt\");\n    lv_font_t * font_2_bin = lv_font_load(\"F:font_2.fnt\");\n    lv_font_t * font_3_bin = lv_font_load(\"F:font_3.fnt\");\n\n    compare_fonts(&font_1, font_1_bin);\n    compare_fonts(&font_2, font_2_bin);\n    compare_fonts(&font_3, font_3_bin);\n\n    lv_font_free(font_1_bin);\n    lv_font_free(font_2_bin);\n    lv_font_free(font_3_bin);\n#else\n    lv_test_print(\"SKIP: font load test because it requires LV_USE_FILESYSTEM 1 and LV_FONT_FMT_TXT_LARGE 0\");\n#endif\n}\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2)\n{\n    lv_test_assert_true(f1 != NULL && f2 != NULL, \"font not null\");\n\n    lv_test_assert_ptr_eq(f1->get_glyph_dsc, f2->get_glyph_dsc, \"glyph_dsc\");\n    lv_test_assert_ptr_eq(f1->get_glyph_bitmap, f2->get_glyph_bitmap, \"glyph_bitmap\");\n    lv_test_assert_int_eq(f1->line_height, f2->line_height, \"line_height\");\n    lv_test_assert_int_eq(f1->base_line, f2->base_line, \"base_line\");\n#if !(LVGL_VERSION_MAJOR == 6 && LVGL_VERSION_MINOR == 0)\n    lv_test_assert_int_eq(f1->subpx, f2->subpx, \"subpx\");\n#endif\n    lv_font_fmt_txt_dsc_t * dsc1 = (lv_font_fmt_txt_dsc_t *) f1->dsc;\n    lv_font_fmt_txt_dsc_t * dsc2 = (lv_font_fmt_txt_dsc_t *) f2->dsc;\n\n    lv_test_assert_int_eq(dsc1->kern_scale, dsc2->kern_scale, \"kern_scale\");\n    lv_test_assert_int_eq(dsc1->cmap_num, dsc2->cmap_num, \"cmap_num\");\n    lv_test_assert_int_eq(dsc1->bpp, dsc2->bpp, \"bpp\");\n    lv_test_assert_int_eq(dsc1->kern_classes, dsc2->kern_classes, \"kern_classes\");\n    lv_test_assert_int_eq(dsc1->bitmap_format, dsc2->bitmap_format, \"bitmap_format\");\n\n    // cmaps\n    int total_glyphs = 0;\n    for(int i = 0; i < dsc1->cmap_num; ++i) {\n        lv_font_fmt_txt_cmap_t * cmaps1 = (lv_font_fmt_txt_cmap_t *) &dsc1->cmaps[i];\n        lv_font_fmt_txt_cmap_t * cmaps2 = (lv_font_fmt_txt_cmap_t *) &dsc2->cmaps[i];\n\n        lv_test_assert_int_eq(cmaps1->range_start, cmaps2->range_start, \"range_start\");\n        lv_test_assert_int_eq(cmaps1->range_length, cmaps2->range_length, \"range_length\");\n        lv_test_assert_int_eq(cmaps1->glyph_id_start, cmaps2->glyph_id_start, \"glyph_id_start\");\n        lv_test_assert_int_eq(cmaps1->type, cmaps2->type, \"type\");\n        lv_test_assert_int_eq(cmaps1->list_length, cmaps2->list_length, \"list_length\");\n\n        if(cmaps1->unicode_list != NULL && cmaps2->unicode_list != NULL) {\n            lv_test_assert_true(cmaps1->unicode_list && cmaps2->unicode_list, \"unicode_list\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) cmaps1->unicode_list,\n                    (uint8_t *) cmaps2->unicode_list,\n                    sizeof(uint16_t) * cmaps1->list_length,\n                    \"unicode_list\");\n            total_glyphs += cmaps1->list_length;\n        }\n        else {\n            total_glyphs += cmaps1->range_length;\n            lv_test_assert_ptr_eq(cmaps1->unicode_list, cmaps2->unicode_list, \"unicode_list\");\n        }\n\n        if(cmaps1->glyph_id_ofs_list != NULL && cmaps2->glyph_id_ofs_list != NULL) {\n            uint8_t * ids1 = (uint8_t *) cmaps1->glyph_id_ofs_list;\n            uint8_t * ids2 = (uint8_t *) cmaps2->glyph_id_ofs_list;\n\n            lv_test_assert_array_eq(ids1, ids2, cmaps1->list_length, \"glyph_id_ofs_list\");\n        }\n        else {\n            lv_test_assert_ptr_eq(cmaps1->glyph_id_ofs_list, cmaps2->glyph_id_ofs_list, \"glyph_id_ofs_list\");\n        }\n    }\n\n    // kern_dsc\n    if (dsc1->kern_classes == 1 && dsc2->kern_classes == 1) {\n        lv_font_fmt_txt_kern_classes_t * kern1 = (lv_font_fmt_txt_kern_classes_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_classes_t * kern2 = (lv_font_fmt_txt_kern_classes_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->right_class_cnt, kern2->right_class_cnt, \"right_class_cnt\");\n            lv_test_assert_int_eq(kern1->left_class_cnt, kern2->left_class_cnt, \"left_class_cnt\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->left_class_mapping,\n                    (uint8_t *) kern2->left_class_mapping,\n                    kern1->left_class_cnt,\n                    \"left_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->right_class_mapping,\n                    (uint8_t *) kern2->right_class_mapping,\n                    kern1->right_class_cnt,\n                    \"right_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->class_pair_values,\n                    (uint8_t *) kern2->class_pair_values,\n                    kern1->right_class_cnt * kern1->left_class_cnt,\n                    \"class_pair_values\");\n        }\n        else {\n            lv_test_assert_ptr_eq(kern1, kern2, \"kern\");\n        }\n    }\n    else if (dsc1->kern_classes == 0 && dsc2->kern_classes == 0) {\n        lv_font_fmt_txt_kern_pair_t * kern1 = (lv_font_fmt_txt_kern_pair_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_pair_t * kern2 = (lv_font_fmt_txt_kern_pair_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->glyph_ids_size, kern2->glyph_ids_size, \"glyph_ids_size\");\n            lv_test_assert_int_eq(kern1->pair_cnt, kern2->pair_cnt, \"pair_cnt\");\n\n            int ids_size;\n\n            if (kern1->glyph_ids_size == 0) {\n                ids_size = sizeof(int8_t) * 2 * kern1->pair_cnt;\n            }\n            else {\n                ids_size = sizeof(int16_t) * 2 * kern1->pair_cnt;\n            }\n\n            lv_test_assert_array_eq(kern1->glyph_ids, kern2->glyph_ids, ids_size, \"glyph_ids\");\n            lv_test_assert_array_eq(\n                    (uint8_t * ) kern1->values,\n                    (uint8_t * ) kern2->values,\n                    kern1->pair_cnt,\n                    \"glyph_values\");\n        }\n    }\n\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc1 = (lv_font_fmt_txt_glyph_dsc_t *) dsc1->glyph_dsc;\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc2 = (lv_font_fmt_txt_glyph_dsc_t *) dsc2->glyph_dsc;\n\n    for(int i = 0; i < total_glyphs; ++i) {\n        if (i < total_glyphs - 1) {\n            int size1 = glyph_dsc1[i+1].bitmap_index - glyph_dsc1[i].bitmap_index;\n\n            if (size1 > 0) {\n                lv_test_assert_array_eq(\n                        dsc1->glyph_bitmap + glyph_dsc1[i].bitmap_index,\n                        dsc2->glyph_bitmap + glyph_dsc2[i].bitmap_index,\n                        size1 - 1, \"glyph_bitmap\");\n            }\n        }\n        lv_test_assert_int_eq(glyph_dsc1[i].adv_w, glyph_dsc2[i].adv_w, \"adv_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_w, glyph_dsc2[i].box_w, \"box_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_h, glyph_dsc2[i].box_h, \"box_h\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_x, glyph_dsc2[i].ofs_x, \"ofs_x\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_y, glyph_dsc2[i].ofs_y, \"ofs_y\");\n    }\n\n    LV_LOG_INFO(\"No differences found!\");\n    return 0;\n}\n#endif\n\n/**********************\n *   STATIC FUNCTIONS\n **********************/\n\n#endif // LV_BUILD_TEST\n",
        "b_contents": "/**\n * @file lv_test_font_loader.c\n *\n */\n\n/*********************\n *      INCLUDES\n *********************/\n\n#include \"../../lvgl.h\"\n#if LV_BUILD_TEST\n#include \"../lv_test_assert.h\"\n#include \"../src/lv_font/lv_font_fmt_txt.h\"\n#include \"../src/lv_font/lv_font.h\"\n#include \"../src/lv_font/lv_font_loader.h\"\n\n#include \"lv_test_font_loader.h\"\n\n/*********************\n *      DEFINES\n *********************/\n\n/**********************\n *      TYPEDEFS\n **********************/\n\n/**********************\n *  STATIC PROTOTYPES\n **********************/\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2);\n#endif\n\n/**********************\n *  STATIC VARIABLES\n **********************/\n\n/**********************\n *      MACROS\n **********************/\n\n/**********************\n *   GLOBAL FUNCTIONS\n **********************/\n\nextern lv_font_t font_1;\nextern lv_font_t font_2;\nextern lv_font_t font_3;\n\nvoid lv_test_font_loader(void)\n{\n#if LV_USE_FILESYSTEM\n    lv_font_t * font_1_bin = lv_font_load(\"f:font_1.fnt\");\n    lv_font_t * font_2_bin = lv_font_load(\"f:font_2.fnt\");\n    lv_font_t * font_3_bin = lv_font_load(\"f:font_3.fnt\");\n\n    compare_fonts(&font_1, font_1_bin);\n    compare_fonts(&font_2, font_2_bin);\n    compare_fonts(&font_3, font_3_bin);\n\n    lv_font_free(font_1_bin);\n    lv_font_free(font_2_bin);\n    lv_font_free(font_3_bin);\n#else\n    lv_test_print(\"SKIP: font load test because it requires LV_USE_FILESYSTEM 1 and LV_FONT_FMT_TXT_LARGE 0\");\n#endif\n}\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2)\n{\n    lv_test_assert_true(f1 != NULL && f2 != NULL, \"font not null\");\n\n    lv_test_assert_ptr_eq(f1->get_glyph_dsc, f2->get_glyph_dsc, \"glyph_dsc\");\n    lv_test_assert_ptr_eq(f1->get_glyph_bitmap, f2->get_glyph_bitmap, \"glyph_bitmap\");\n    lv_test_assert_int_eq(f1->line_height, f2->line_height, \"line_height\");\n    lv_test_assert_int_eq(f1->base_line, f2->base_line, \"base_line\");\n#if !(LVGL_VERSION_MAJOR == 6 && LVGL_VERSION_MINOR == 0)\n    lv_test_assert_int_eq(f1->subpx, f2->subpx, \"subpx\");\n#endif\n    lv_font_fmt_txt_dsc_t * dsc1 = (lv_font_fmt_txt_dsc_t *) f1->dsc;\n    lv_font_fmt_txt_dsc_t * dsc2 = (lv_font_fmt_txt_dsc_t *) f2->dsc;\n\n    lv_test_assert_int_eq(dsc1->kern_scale, dsc2->kern_scale, \"kern_scale\");\n    lv_test_assert_int_eq(dsc1->cmap_num, dsc2->cmap_num, \"cmap_num\");\n    lv_test_assert_int_eq(dsc1->bpp, dsc2->bpp, \"bpp\");\n    lv_test_assert_int_eq(dsc1->kern_classes, dsc2->kern_classes, \"kern_classes\");\n    lv_test_assert_int_eq(dsc1->bitmap_format, dsc2->bitmap_format, \"bitmap_format\");\n\n    // cmaps\n    int total_glyphs = 0;\n    for(int i = 0; i < dsc1->cmap_num; ++i) {\n        lv_font_fmt_txt_cmap_t * cmaps1 = (lv_font_fmt_txt_cmap_t *) &dsc1->cmaps[i];\n        lv_font_fmt_txt_cmap_t * cmaps2 = (lv_font_fmt_txt_cmap_t *) &dsc2->cmaps[i];\n\n        lv_test_assert_int_eq(cmaps1->range_start, cmaps2->range_start, \"range_start\");\n        lv_test_assert_int_eq(cmaps1->range_length, cmaps2->range_length, \"range_length\");\n        lv_test_assert_int_eq(cmaps1->glyph_id_start, cmaps2->glyph_id_start, \"glyph_id_start\");\n        lv_test_assert_int_eq(cmaps1->type, cmaps2->type, \"type\");\n        lv_test_assert_int_eq(cmaps1->list_length, cmaps2->list_length, \"list_length\");\n\n        if(cmaps1->unicode_list != NULL && cmaps2->unicode_list != NULL) {\n            lv_test_assert_true(cmaps1->unicode_list && cmaps2->unicode_list, \"unicode_list\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) cmaps1->unicode_list,\n                    (uint8_t *) cmaps2->unicode_list,\n                    sizeof(uint16_t) * cmaps1->list_length,\n                    \"unicode_list\");\n            total_glyphs += cmaps1->list_length;\n        }\n        else {\n            total_glyphs += cmaps1->range_length;\n            lv_test_assert_ptr_eq(cmaps1->unicode_list, cmaps2->unicode_list, \"unicode_list\");\n        }\n\n        if(cmaps1->glyph_id_ofs_list != NULL && cmaps2->glyph_id_ofs_list != NULL) {\n            uint8_t * ids1 = (uint8_t *) cmaps1->glyph_id_ofs_list;\n            uint8_t * ids2 = (uint8_t *) cmaps2->glyph_id_ofs_list;\n\n            lv_test_assert_array_eq(ids1, ids2, cmaps1->list_length, \"glyph_id_ofs_list\");\n        }\n        else {\n            lv_test_assert_ptr_eq(cmaps1->glyph_id_ofs_list, cmaps2->glyph_id_ofs_list, \"glyph_id_ofs_list\");\n        }\n    }\n\n    // kern_dsc\n    if (dsc1->kern_classes == 1 && dsc2->kern_classes == 1) {\n        lv_font_fmt_txt_kern_classes_t * kern1 = (lv_font_fmt_txt_kern_classes_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_classes_t * kern2 = (lv_font_fmt_txt_kern_classes_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->right_class_cnt, kern2->right_class_cnt, \"right_class_cnt\");\n            lv_test_assert_int_eq(kern1->left_class_cnt, kern2->left_class_cnt, \"left_class_cnt\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->left_class_mapping,\n                    (uint8_t *) kern2->left_class_mapping,\n                    kern1->left_class_cnt,\n                    \"left_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->right_class_mapping,\n                    (uint8_t *) kern2->right_class_mapping,\n                    kern1->right_class_cnt,\n                    \"right_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->class_pair_values,\n                    (uint8_t *) kern2->class_pair_values,\n                    kern1->right_class_cnt * kern1->left_class_cnt,\n                    \"class_pair_values\");\n        }\n        else {\n            lv_test_assert_ptr_eq(kern1, kern2, \"kern\");\n        }\n    }\n    else if (dsc1->kern_classes == 0 && dsc2->kern_classes == 0) {\n        lv_font_fmt_txt_kern_pair_t * kern1 = (lv_font_fmt_txt_kern_pair_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_pair_t * kern2 = (lv_font_fmt_txt_kern_pair_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->glyph_ids_size, kern2->glyph_ids_size, \"glyph_ids_size\");\n            lv_test_assert_int_eq(kern1->pair_cnt, kern2->pair_cnt, \"pair_cnt\");\n\n            int ids_size;\n\n            if (kern1->glyph_ids_size == 0) {\n                ids_size = sizeof(int8_t) * 2 * kern1->pair_cnt;\n            }\n            else {\n                ids_size = sizeof(int16_t) * 2 * kern1->pair_cnt;\n            }\n\n            lv_test_assert_array_eq(kern1->glyph_ids, kern2->glyph_ids, ids_size, \"glyph_ids\");\n            lv_test_assert_array_eq(\n                    (uint8_t * ) kern1->values,\n                    (uint8_t * ) kern2->values,\n                    kern1->pair_cnt,\n                    \"glyph_values\");\n        }\n    }\n\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc1 = (lv_font_fmt_txt_glyph_dsc_t *) dsc1->glyph_dsc;\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc2 = (lv_font_fmt_txt_glyph_dsc_t *) dsc2->glyph_dsc;\n\n    for(int i = 0; i < total_glyphs; ++i) {\n        if (i < total_glyphs - 1) {\n            int size1 = glyph_dsc1[i+1].bitmap_index - glyph_dsc1[i].bitmap_index;\n\n            if (size1 > 0) {\n                lv_test_assert_array_eq(\n                        dsc1->glyph_bitmap + glyph_dsc1[i].bitmap_index,\n                        dsc2->glyph_bitmap + glyph_dsc2[i].bitmap_index,\n                        size1 - 1, \"glyph_bitmap\");\n            }\n        }\n        lv_test_assert_int_eq(glyph_dsc1[i].adv_w, glyph_dsc2[i].adv_w, \"adv_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_w, glyph_dsc2[i].box_w, \"box_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_h, glyph_dsc2[i].box_h, \"box_h\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_x, glyph_dsc2[i].ofs_x, \"ofs_x\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_y, glyph_dsc2[i].ofs_y, \"ofs_y\");\n    }\n\n    LV_LOG_INFO(\"No differences found!\");\n    return 0;\n}\n#endif\n\n/**********************\n *   STATIC FUNCTIONS\n **********************/\n\n#endif // LV_BUILD_TEST",
        "base_contents": "/**\n * @file lv_test_font_loader.c\n *\n */\n\n/*********************\n *      INCLUDES\n *********************/\n\n#include \"../../lvgl.h\"\n#if LV_BUILD_TEST\n#include \"../lv_test_assert.h\"\n#include \"../src/lv_font/lv_font_fmt_txt.h\"\n#include \"../src/lv_font/lv_font.h\"\n#include \"../src/lv_font/lv_font_loader.h\"\n\n#include \"lv_test_font_loader.h\" \n\n/*********************\n *      DEFINES\n *********************/\n\n/**********************\n *      TYPEDEFS\n **********************/\n\n/**********************\n *  STATIC PROTOTYPES\n **********************/\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2);\n#endif\n\n/**********************\n *  STATIC VARIABLES\n **********************/\n\n/**********************\n *      MACROS\n **********************/\n\n/**********************\n *   GLOBAL FUNCTIONS\n **********************/\n\nextern lv_font_t font_1;\nextern lv_font_t font_2;\nextern lv_font_t font_3;\n\nvoid lv_test_font_loader(void)\n{\n#if LV_USE_FILESYSTEM\n    lv_font_t * font_1_bin = lv_font_load(\"f:font_1.fnt\");\n    lv_font_t * font_2_bin = lv_font_load(\"f:font_2.fnt\");\n    lv_font_t * font_3_bin = lv_font_load(\"f:font_3.fnt\");\n\n    compare_fonts(&font_1, font_1_bin);\n    compare_fonts(&font_2, font_2_bin);\n    compare_fonts(&font_3, font_3_bin);\n\n    lv_font_free(font_1_bin);\n    lv_font_free(font_2_bin);\n    lv_font_free(font_3_bin);\n#else\n    lv_test_print(\"SKIP: font load test because it requires LV_USE_FILESYSTEM 1 and LV_FONT_FMT_TXT_LARGE 0\");\n#endif\n}\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2)\n{\n    lv_test_assert_true(f1 != NULL && f2 != NULL, \"font not null\");\n\n    lv_test_assert_ptr_eq(f1->get_glyph_dsc, f2->get_glyph_dsc, \"glyph_dsc\");\n    lv_test_assert_ptr_eq(f1->get_glyph_bitmap, f2->get_glyph_bitmap, \"glyph_bitmap\");\n    lv_test_assert_int_eq(f1->line_height, f2->line_height, \"line_height\");\n    lv_test_assert_int_eq(f1->base_line, f2->base_line, \"base_line\");\n#if !(LVGL_VERSION_MAJOR == 6 && LVGL_VERSION_MINOR == 0)\n    lv_test_assert_int_eq(f1->subpx, f2->subpx, \"subpx\");\n#endif\n    lv_font_fmt_txt_dsc_t * dsc1 = (lv_font_fmt_txt_dsc_t *) f1->dsc;\n    lv_font_fmt_txt_dsc_t * dsc2 = (lv_font_fmt_txt_dsc_t *) f2->dsc;\n\n    lv_test_assert_int_eq(dsc1->kern_scale, dsc2->kern_scale, \"kern_scale\");\n    lv_test_assert_int_eq(dsc1->cmap_num, dsc2->cmap_num, \"cmap_num\");\n    lv_test_assert_int_eq(dsc1->bpp, dsc2->bpp, \"bpp\");\n    lv_test_assert_int_eq(dsc1->kern_classes, dsc2->kern_classes, \"kern_classes\");\n    lv_test_assert_int_eq(dsc1->bitmap_format, dsc2->bitmap_format, \"bitmap_format\");\n\n    // cmaps\n    int total_glyphs = 0;\n    for(int i = 0; i < dsc1->cmap_num; ++i) {\n        lv_font_fmt_txt_cmap_t * cmaps1 = (lv_font_fmt_txt_cmap_t *) &dsc1->cmaps[i];\n        lv_font_fmt_txt_cmap_t * cmaps2 = (lv_font_fmt_txt_cmap_t *) &dsc2->cmaps[i];\n\n        lv_test_assert_int_eq(cmaps1->range_start, cmaps2->range_start, \"range_start\");\n        lv_test_assert_int_eq(cmaps1->range_length, cmaps2->range_length, \"range_length\");\n        lv_test_assert_int_eq(cmaps1->glyph_id_start, cmaps2->glyph_id_start, \"glyph_id_start\");\n        lv_test_assert_int_eq(cmaps1->type, cmaps2->type, \"type\");\n        lv_test_assert_int_eq(cmaps1->list_length, cmaps2->list_length, \"list_length\");\n\n        if(cmaps1->unicode_list != NULL && cmaps2->unicode_list != NULL) {\n            lv_test_assert_true(cmaps1->unicode_list && cmaps2->unicode_list, \"unicode_list\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) cmaps1->unicode_list,\n                    (uint8_t *) cmaps2->unicode_list,\n                    sizeof(uint16_t) * cmaps1->list_length,\n                    \"unicode_list\");\n            total_glyphs += cmaps1->list_length;\n        }\n        else {\n            total_glyphs += cmaps1->range_length;\n            lv_test_assert_ptr_eq(cmaps1->unicode_list, cmaps2->unicode_list, \"unicode_list\");\n        }\n\n        if(cmaps1->glyph_id_ofs_list != NULL && cmaps2->glyph_id_ofs_list != NULL) {\n            uint8_t * ids1 = (uint8_t *) cmaps1->glyph_id_ofs_list;\n            uint8_t * ids2 = (uint8_t *) cmaps2->glyph_id_ofs_list;\n\n            lv_test_assert_array_eq(ids1, ids2, cmaps1->list_length, \"glyph_id_ofs_list\");\n        }\n        else {\n            lv_test_assert_ptr_eq(cmaps1->glyph_id_ofs_list, cmaps2->glyph_id_ofs_list, \"glyph_id_ofs_list\");\n        }\n    }\n\n    // kern_dsc\n    if (dsc1->kern_classes == 1 && dsc2->kern_classes == 1) {\n        lv_font_fmt_txt_kern_classes_t * kern1 = (lv_font_fmt_txt_kern_classes_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_classes_t * kern2 = (lv_font_fmt_txt_kern_classes_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->right_class_cnt, kern2->right_class_cnt, \"right_class_cnt\");\n            lv_test_assert_int_eq(kern1->left_class_cnt, kern2->left_class_cnt, \"left_class_cnt\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->left_class_mapping,\n                    (uint8_t *) kern2->left_class_mapping,\n                    kern1->left_class_cnt,\n                    \"left_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->right_class_mapping,\n                    (uint8_t *) kern2->right_class_mapping,\n                    kern1->right_class_cnt,\n                    \"right_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->class_pair_values,\n                    (uint8_t *) kern2->class_pair_values,\n                    kern1->right_class_cnt * kern1->left_class_cnt,\n                    \"class_pair_values\");\n        }\n        else {\n            lv_test_assert_ptr_eq(kern1, kern2, \"kern\");\n        }\n    }\n    else if (dsc1->kern_classes == 0 && dsc2->kern_classes == 0) {\n        lv_font_fmt_txt_kern_pair_t * kern1 = (lv_font_fmt_txt_kern_pair_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_pair_t * kern2 = (lv_font_fmt_txt_kern_pair_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->glyph_ids_size, kern2->glyph_ids_size, \"glyph_ids_size\");\n            lv_test_assert_int_eq(kern1->pair_cnt, kern2->pair_cnt, \"pair_cnt\");\n\n            int ids_size;\n\n            if (kern1->glyph_ids_size == 0) {\n                ids_size = sizeof(int8_t) * 2 * kern1->pair_cnt;\n            }\n            else {\n                ids_size = sizeof(int16_t) * 2 * kern1->pair_cnt;\n            }\n\n            lv_test_assert_array_eq(kern1->glyph_ids, kern2->glyph_ids, ids_size, \"glyph_ids\");\n            lv_test_assert_array_eq(\n                    (uint8_t * ) kern1->values,\n                    (uint8_t * ) kern2->values,\n                    kern1->pair_cnt,\n                    \"glyph_values\");\n        }\n    }\n\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc1 = (lv_font_fmt_txt_glyph_dsc_t *) dsc1->glyph_dsc;\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc2 = (lv_font_fmt_txt_glyph_dsc_t *) dsc2->glyph_dsc;\n\n    for(int i = 0; i < total_glyphs; ++i) {\n        if (i < total_glyphs - 1) {\n            int size1 = glyph_dsc1[i+1].bitmap_index - glyph_dsc1[i].bitmap_index;\n\n            if (size1 > 0) {\n                lv_test_assert_array_eq(\n                        dsc1->glyph_bitmap + glyph_dsc1[i].bitmap_index,\n                        dsc2->glyph_bitmap + glyph_dsc2[i].bitmap_index,\n                        size1 - 1, \"glyph_bitmap\");\n            }\n        }\n        lv_test_assert_int_eq(glyph_dsc1[i].adv_w, glyph_dsc2[i].adv_w, \"adv_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_w, glyph_dsc2[i].box_w, \"box_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_h, glyph_dsc2[i].box_h, \"box_h\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_x, glyph_dsc2[i].ofs_x, \"ofs_x\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_y, glyph_dsc2[i].ofs_y, \"ofs_y\");\n    }\n\n    LV_LOG_INFO(\"No differences found!\");\n    return 0;\n}\n#endif\n\n/**********************\n *   STATIC FUNCTIONS\n **********************/\n\n#endif // LV_BUILD_TEST\n",
        "res_region": "/**\n * @file lv_test_font_loader.c\n *\n */\n\n/*********************\n *      INCLUDES\n *********************/\n\n#include \"../../lvgl.h\"\n#if LV_BUILD_TEST\n#include \"../lv_test_assert.h\"\n#include \"../src/lv_font/lv_font_fmt_txt.h\"\n#include \"../src/lv_font/lv_font.h\"\n#include \"../src/lv_font/lv_font_loader.h\"\n\n#include \"lv_test_font_loader.h\" \n\n/*********************\n *      DEFINES\n *********************/\n\n/**********************\n *      TYPEDEFS\n **********************/\n\n/**********************\n *  STATIC PROTOTYPES\n **********************/\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2);\n#endif\n\n/**********************\n *  STATIC VARIABLES\n **********************/\n\n/**********************\n *      MACROS\n **********************/\n\n/**********************\n *   GLOBAL FUNCTIONS\n **********************/\n\nextern lv_font_t font_1;\nextern lv_font_t font_2;\nextern lv_font_t font_3;\n\nvoid lv_test_font_loader(void)\n{\n#if LV_USE_FILESYSTEM\n    lv_font_t * font_1_bin = lv_font_load(\"F:font_1.fnt\");\n    lv_font_t * font_2_bin = lv_font_load(\"F:font_2.fnt\");\n    lv_font_t * font_3_bin = lv_font_load(\"F:font_3.fnt\");\n\n    compare_fonts(&font_1, font_1_bin);\n    compare_fonts(&font_2, font_2_bin);\n    compare_fonts(&font_3, font_3_bin);\n\n    lv_font_free(font_1_bin);\n    lv_font_free(font_2_bin);\n    lv_font_free(font_3_bin);\n#else\n    lv_test_print(\"SKIP: font load test because it requires LV_USE_FILESYSTEM 1 and LV_FONT_FMT_TXT_LARGE 0\");\n#endif\n}\n\n#if LV_USE_FILESYSTEM\nstatic int compare_fonts(lv_font_t * f1, lv_font_t * f2)\n{\n    lv_test_assert_true(f1 != NULL && f2 != NULL, \"font not null\");\n\n    lv_test_assert_ptr_eq(f1->get_glyph_dsc, f2->get_glyph_dsc, \"glyph_dsc\");\n    lv_test_assert_ptr_eq(f1->get_glyph_bitmap, f2->get_glyph_bitmap, \"glyph_bitmap\");\n    lv_test_assert_int_eq(f1->line_height, f2->line_height, \"line_height\");\n    lv_test_assert_int_eq(f1->base_line, f2->base_line, \"base_line\");\n#if !(LVGL_VERSION_MAJOR == 6 && LVGL_VERSION_MINOR == 0)\n    lv_test_assert_int_eq(f1->subpx, f2->subpx, \"subpx\");\n#endif\n    lv_font_fmt_txt_dsc_t * dsc1 = (lv_font_fmt_txt_dsc_t *) f1->dsc;\n    lv_font_fmt_txt_dsc_t * dsc2 = (lv_font_fmt_txt_dsc_t *) f2->dsc;\n\n    lv_test_assert_int_eq(dsc1->kern_scale, dsc2->kern_scale, \"kern_scale\");\n    lv_test_assert_int_eq(dsc1->cmap_num, dsc2->cmap_num, \"cmap_num\");\n    lv_test_assert_int_eq(dsc1->bpp, dsc2->bpp, \"bpp\");\n    lv_test_assert_int_eq(dsc1->kern_classes, dsc2->kern_classes, \"kern_classes\");\n    lv_test_assert_int_eq(dsc1->bitmap_format, dsc2->bitmap_format, \"bitmap_format\");\n\n    // cmaps\n    int total_glyphs = 0;\n    for(int i = 0; i < dsc1->cmap_num; ++i) {\n        lv_font_fmt_txt_cmap_t * cmaps1 = (lv_font_fmt_txt_cmap_t *) &dsc1->cmaps[i];\n        lv_font_fmt_txt_cmap_t * cmaps2 = (lv_font_fmt_txt_cmap_t *) &dsc2->cmaps[i];\n\n        lv_test_assert_int_eq(cmaps1->range_start, cmaps2->range_start, \"range_start\");\n        lv_test_assert_int_eq(cmaps1->range_length, cmaps2->range_length, \"range_length\");\n        lv_test_assert_int_eq(cmaps1->glyph_id_start, cmaps2->glyph_id_start, \"glyph_id_start\");\n        lv_test_assert_int_eq(cmaps1->type, cmaps2->type, \"type\");\n        lv_test_assert_int_eq(cmaps1->list_length, cmaps2->list_length, \"list_length\");\n\n        if(cmaps1->unicode_list != NULL && cmaps2->unicode_list != NULL) {\n            lv_test_assert_true(cmaps1->unicode_list && cmaps2->unicode_list, \"unicode_list\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) cmaps1->unicode_list,\n                    (uint8_t *) cmaps2->unicode_list,\n                    sizeof(uint16_t) * cmaps1->list_length,\n                    \"unicode_list\");\n            total_glyphs += cmaps1->list_length;\n        }\n        else {\n            total_glyphs += cmaps1->range_length;\n            lv_test_assert_ptr_eq(cmaps1->unicode_list, cmaps2->unicode_list, \"unicode_list\");\n        }\n\n        if(cmaps1->glyph_id_ofs_list != NULL && cmaps2->glyph_id_ofs_list != NULL) {\n            uint8_t * ids1 = (uint8_t *) cmaps1->glyph_id_ofs_list;\n            uint8_t * ids2 = (uint8_t *) cmaps2->glyph_id_ofs_list;\n\n            lv_test_assert_array_eq(ids1, ids2, cmaps1->list_length, \"glyph_id_ofs_list\");\n        }\n        else {\n            lv_test_assert_ptr_eq(cmaps1->glyph_id_ofs_list, cmaps2->glyph_id_ofs_list, \"glyph_id_ofs_list\");\n        }\n    }\n\n    // kern_dsc\n    if (dsc1->kern_classes == 1 && dsc2->kern_classes == 1) {\n        lv_font_fmt_txt_kern_classes_t * kern1 = (lv_font_fmt_txt_kern_classes_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_classes_t * kern2 = (lv_font_fmt_txt_kern_classes_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->right_class_cnt, kern2->right_class_cnt, \"right_class_cnt\");\n            lv_test_assert_int_eq(kern1->left_class_cnt, kern2->left_class_cnt, \"left_class_cnt\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->left_class_mapping,\n                    (uint8_t *) kern2->left_class_mapping,\n                    kern1->left_class_cnt,\n                    \"left_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->right_class_mapping,\n                    (uint8_t *) kern2->right_class_mapping,\n                    kern1->right_class_cnt,\n                    \"right_class_mapping\");\n\n            lv_test_assert_array_eq(\n                    (uint8_t *) kern1->class_pair_values,\n                    (uint8_t *) kern2->class_pair_values,\n                    kern1->right_class_cnt * kern1->left_class_cnt,\n                    \"class_pair_values\");\n        }\n        else {\n            lv_test_assert_ptr_eq(kern1, kern2, \"kern\");\n        }\n    }\n    else if (dsc1->kern_classes == 0 && dsc2->kern_classes == 0) {\n        lv_font_fmt_txt_kern_pair_t * kern1 = (lv_font_fmt_txt_kern_pair_t *) dsc1->kern_dsc;\n        lv_font_fmt_txt_kern_pair_t * kern2 = (lv_font_fmt_txt_kern_pair_t *) dsc2->kern_dsc;\n        if (kern1 != NULL && kern2 != NULL) {\n            lv_test_assert_int_eq(kern1->glyph_ids_size, kern2->glyph_ids_size, \"glyph_ids_size\");\n            lv_test_assert_int_eq(kern1->pair_cnt, kern2->pair_cnt, \"pair_cnt\");\n\n            int ids_size;\n\n            if (kern1->glyph_ids_size == 0) {\n                ids_size = sizeof(int8_t) * 2 * kern1->pair_cnt;\n            }\n            else {\n                ids_size = sizeof(int16_t) * 2 * kern1->pair_cnt;\n            }\n\n            lv_test_assert_array_eq(kern1->glyph_ids, kern2->glyph_ids, ids_size, \"glyph_ids\");\n            lv_test_assert_array_eq(\n                    (uint8_t * ) kern1->values,\n                    (uint8_t * ) kern2->values,\n                    kern1->pair_cnt,\n                    \"glyph_values\");\n        }\n    }\n\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc1 = (lv_font_fmt_txt_glyph_dsc_t *) dsc1->glyph_dsc;\n    lv_font_fmt_txt_glyph_dsc_t * glyph_dsc2 = (lv_font_fmt_txt_glyph_dsc_t *) dsc2->glyph_dsc;\n\n    for(int i = 0; i < total_glyphs; ++i) {\n        if (i < total_glyphs - 1) {\n            int size1 = glyph_dsc1[i+1].bitmap_index - glyph_dsc1[i].bitmap_index;\n\n            if (size1 > 0) {\n                lv_test_assert_array_eq(\n                        dsc1->glyph_bitmap + glyph_dsc1[i].bitmap_index,\n                        dsc2->glyph_bitmap + glyph_dsc2[i].bitmap_index,\n                        size1 - 1, \"glyph_bitmap\");\n            }\n        }\n        lv_test_assert_int_eq(glyph_dsc1[i].adv_w, glyph_dsc2[i].adv_w, \"adv_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_w, glyph_dsc2[i].box_w, \"box_w\");\n        lv_test_assert_int_eq(glyph_dsc1[i].box_h, glyph_dsc2[i].box_h, \"box_h\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_x, glyph_dsc2[i].ofs_x, \"ofs_x\");\n        lv_test_assert_int_eq(glyph_dsc1[i].ofs_y, glyph_dsc2[i].ofs_y, \"ofs_y\");\n    }\n\n    LV_LOG_INFO(\"No differences found!\");\n    return 0;\n}\n#endif\n\n/**********************\n *   STATIC FUNCTIONS\n **********************/\n\n#endif // LV_BUILD_TEST",
        "lookback": " * @file lv_test_font_loader.c",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 0,
        "end_line": 647,
        "merge_gen_region": " @ lvtestfontloadercc *file____.\" /***** INCLU *********************/includelvglh # LVBUILDTESTincludelvtestasserth # \"..//__/__________h # \"..//lvfontlvfontfmttxth # \"..//lvfontlvfontlvfonth_.\"includesrc/__/___.\"includesrc/__/___.\"includelvfontlvfontloaderh\"include \"____.\"**************** *S*/******************** *DEF ******************** /** STATICTYPES ******************** # LVUSEFILE static comparefontslvfontt f,__ * f);endif******************** * VARIS**/******************** *S**/******************** *S**/******************** *S ******************** /** MACRO ******************** /** GLOBAL ******************** extern___ font1 extern__ font2 extern__ font3 void______() # LV__SYSTEM___ * font1bin lvfontt__(\":_.f\"); lvfontt font2bin lvfontloadFfont2f\"); lvfontt font3bin lvfontloadFfont3f\"); comparefontsfont1 font1bin comparefontsfont2 font",
        "confidence": 0.9341160655021667,
        "hesitated": false,
        "resolved": false
    }
]