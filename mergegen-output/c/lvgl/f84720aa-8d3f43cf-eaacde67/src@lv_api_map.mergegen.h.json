[
    {
        "a_contents": "",
        "b_contents": "#if LV_USE_CHECKBOX\n\n#define lv_checkbox_set_static_text lv_checkbox_set_text_static\n\n#endif\n\n#if LV_USE_CHART\n\n#define lv_chart_get_point_cnt lv_chart_get_point_count\n\n#endif\n\n#if LV_USE_DROPDOWN\n\nstatic inline void lv_dropdown_set_draw_arrow(lv_obj_t * ddlist, bool en)\n{\n    if(en) lv_dropdown_set_symbol(ddlist, LV_SYMBOL_DOWN);\n    else lv_dropdown_set_symbol(ddlist, NULL);\n}\n\nstatic inline bool lv_dropdown_get_draw_arrow(lv_obj_t * ddlist)\n{\n    if(lv_dropdown_get_symbol(ddlist)) return true;\n    else return false;\n}\n\n#define lv_dropdown_set_static_options lv_dropdown_set_options_static\n\n#endif\n\n#if LV_USE_BAR\n\n/**\n * Make the bar symmetric to zero. The indicator will grow from zero instead of the minimum\n * position.\n * @param bar pointer to a bar object\n * @param en true: enable disable symmetric behavior; false: disable\n * @deprecated As of v7.0, you should use `lv_bar_set_type` instead.\n */\nstatic inline void lv_bar_set_sym(lv_obj_t * bar, bool en)\n{\n    if(en)\n        lv_bar_set_type(bar, LV_BAR_TYPE_SYMMETRICAL);\n    else\n        lv_bar_set_type(bar, LV_BAR_TYPE_NORMAL);\n}\n\n/**\n * Get whether the bar is symmetric or not.\n * @param bar pointer to a bar object\n * @return true: symmetric is enabled; false: disable\n * @deprecated As of v7.0, you should use `lv_bar_get_type` instead.\n */\nstatic inline bool lv_bar_get_sym(lv_obj_t * bar)\n{\n    return lv_bar_get_type(bar) == LV_BAR_TYPE_SYMMETRICAL;\n}\n\n#endif\n\n#if LV_USE_LABEL\n\n#define lv_label_set_static_text lv_label_set_text_static\n\n#endif\n\n#if LV_USE_SLIDER\n\n/**\n * Make the slider symmetric to zero. The indicator will grow from zero instead of the minimum\n * position.\n * @param slider pointer to a bar object\n * @param en true: enable disable symmetric behavior; false: disable\n * @deprecated As of v7.0, you should use `lv_slider_set_type` instead.\n */\nstatic inline void lv_slider_set_sym(lv_obj_t * slider, bool en)\n{\n    lv_bar_set_sym(slider, en);\n}\n\n/**\n * Get whether the slider is symmetric or not.\n * @param slider pointer to a slider object\n * @return true: symmetric is enabled; false: disable\n * @deprecated As of v7.0, you should use `lv_slider_get_type` instead.\n */\nstatic inline bool lv_slider_get_sym(lv_obj_t * slider)\n{\n    return lv_bar_get_sym(slider);\n}\n\n#endif\n\n#if LV_USE_ROLLER\n\n/**\n * Set a fixed width for the roller.\n * @param roller pointer to a roller object\n * @param w width\n * @deprecated As of v7.0, you should use `lv_roller_set_auto_fit` and set the width normally instead.\n */\nstatic inline void lv_roller_set_fix_width(lv_obj_t * roller, lv_coord_t w)\n{\n    lv_roller_set_auto_fit(roller, false);\n    lv_obj_set_width(roller, w);\n}\n\n#endif\n\n#if LV_USE_PAGE\n#define lv_scrlbar_mode_t lv_scrollbar_mode_t\n\n#define LV_SCRLBAR_MODE_OFF    LV_SCROLLBAR_MODE_OFF\n#define LV_SCRLBAR_MODE_ON     LV_SCROLLBAR_MODE_ON\n#define LV_SCRLBAR_MODE_DRAG   LV_SCROLLBAR_MODE_DRAG\n#define LV_SCRLBAR_MODE_AUTO   LV_SCROLLBAR_MODE_AUTO\n#define LV_SCRLBAR_MODE_HIDE   LV_SCROLLBAR_MODE_HIDE\n#define LV_SCRLBAR_MODE_UNHIDE LV_SCROLLBAR_MODE_UNHIDE\n\nstatic inline void lv_page_set_scrlbar_mode(lv_obj_t * page, lv_scrlbar_mode_t sb_mode)\n{\n    lv_page_set_scrollbar_mode(page, sb_mode);\n}\nstatic inline lv_scrollbar_mode_t lv_page_get_scrlbar_mode(lv_obj_t * page)\n{\n    return lv_page_get_scrollbar_mode(page);\n}\n\nstatic inline lv_obj_t * lv_page_get_scrl(lv_obj_t * page)\n{\n    return lv_page_get_scrollable(page);\n}\n#endif\n\n#endif /*LV_USE_API_EXTENSION_V6*/\n\n/*---------------------\n * V7.0 COMPATIBILITY\n *--------------------*/\n#if LV_USE_API_EXTENSION_V7\n\n#if LV_USE_ROLLER\n#define LV_ROLLER_MODE_INIFINITE LV_ROLLER_MODE_INFINITE\n#endif\n\n#if LV_USE_WIN\n\nstatic inline lv_obj_t * lv_win_add_btn(lv_obj_t * win, const void * img_src)\n{\n    return lv_win_add_btn_right(win, img_src);\n}\n\n#endif\n\n#if LV_USE_CHART\nstatic inline void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax)\n{\n    lv_chart_set_y_range(chart, LV_CHART_AXIS_PRIMARY_Y, ymin,  ymax);\n}\n\nstatic inline void lv_chart_clear_serie(lv_obj_t * chart, lv_chart_series_t * series)\n{\n    lv_chart_clear_series(chart, series);\n}\n\n#endif\n\nstatic inline void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs,\n                                      lv_coord_t y_ofs)\n{\n    lv_obj_align_mid(obj, base, align, x_ofs, y_ofs);\n}\n\nstatic inline void lv_obj_align_origo_x(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs)\n{\n    lv_obj_align_mid_y(obj, base, align, x_ofs);\n}\n\nstatic inline void lv_obj_align_origo_y(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t y_ofs)\n{\n    lv_obj_align_mid_y(obj, base, align, y_ofs);\n}\n\n#endif /*LV_USE_API_EXTENSION_V6*/",
        "base_contents": "#if LV_USE_CHECKBOX\n\n#define lv_checkbox_set_static_text lv_checkbox_set_text_static\n\n#endif\n\n#if LV_USE_CHART\n\n#define lv_chart_get_point_cnt lv_chart_get_point_count\n\n#endif\n\n\n#if LV_USE_DROPDOWN\n\nstatic inline void lv_dropdown_set_draw_arrow(lv_obj_t * ddlist, bool en)\n{\n    if(en) lv_dropdown_set_symbol(ddlist, LV_SYMBOL_DOWN);\n    else lv_dropdown_set_symbol(ddlist, NULL);\n}\n\nstatic inline bool lv_dropdown_get_draw_arrow(lv_obj_t * ddlist)\n{\n    if(lv_dropdown_get_symbol(ddlist)) return true;\n    else return false;\n}\n\n#define lv_dropdown_set_static_options lv_dropdown_set_options_static\n\n#endif\n\n#if LV_USE_BAR\n\n/**\n * Make the bar symmetric to zero. The indicator will grow from zero instead of the minimum\n * position.\n * @param bar pointer to a bar object\n * @param en true: enable disable symmetric behavior; false: disable\n * @deprecated As of v7.0, you should use `lv_bar_set_type` instead.\n */\nstatic inline void lv_bar_set_sym(lv_obj_t * bar, bool en)\n{\n    if(en)\n        lv_bar_set_type(bar, LV_BAR_TYPE_SYMMETRICAL);\n    else\n        lv_bar_set_type(bar, LV_BAR_TYPE_NORMAL);\n}\n\n/**\n * Get whether the bar is symmetric or not.\n * @param bar pointer to a bar object\n * @return true: symmetric is enabled; false: disable\n * @deprecated As of v7.0, you should use `lv_bar_get_type` instead.\n */\nstatic inline bool lv_bar_get_sym(lv_obj_t * bar)\n{\n    return lv_bar_get_type(bar) == LV_BAR_TYPE_SYMMETRICAL;\n}\n\n#endif\n\n#if LV_USE_LABEL\n\n#define lv_label_set_static_text lv_label_set_text_static\n\n#endif\n\n#if LV_USE_SLIDER\n\n/**\n * Make the slider symmetric to zero. The indicator will grow from zero instead of the minimum\n * position.\n * @param slider pointer to a bar object\n * @param en true: enable disable symmetric behavior; false: disable\n * @deprecated As of v7.0, you should use `lv_slider_set_type` instead.\n */\nstatic inline void lv_slider_set_sym(lv_obj_t * slider, bool en)\n{\n    lv_bar_set_sym(slider, en);\n}\n\n/**\n * Get whether the slider is symmetric or not.\n * @param slider pointer to a slider object\n * @return true: symmetric is enabled; false: disable\n * @deprecated As of v7.0, you should use `lv_slider_get_type` instead.\n */\nstatic inline bool lv_slider_get_sym(lv_obj_t * slider)\n{\n    return lv_bar_get_sym(slider);\n}\n\n#endif\n\n#if LV_USE_ROLLER\n\n/**\n * Set a fixed width for the roller.\n * @param roller pointer to a roller object\n * @param w width\n * @deprecated As of v7.0, you should use `lv_roller_set_auto_fit` and set the width normally instead.\n */\nstatic inline void lv_roller_set_fix_width(lv_obj_t * roller, lv_coord_t w)\n{\n    lv_roller_set_auto_fit(roller, false);\n    lv_obj_set_width(roller, w);\n}\n\n\n#endif\n\n\n#if LV_USE_PAGE\n#define lv_scrlbar_mode_t lv_scrollbar_mode_t\n\n#define LV_SCRLBAR_MODE_OFF    LV_SCROLLBAR_MODE_OFF\n#define LV_SCRLBAR_MODE_ON     LV_SCROLLBAR_MODE_ON\n#define LV_SCRLBAR_MODE_DRAG   LV_SCROLLBAR_MODE_DRAG\n#define LV_SCRLBAR_MODE_AUTO   LV_SCROLLBAR_MODE_AUTO\n#define LV_SCRLBAR_MODE_HIDE   LV_SCROLLBAR_MODE_HIDE\n#define LV_SCRLBAR_MODE_UNHIDE LV_SCROLLBAR_MODE_UNHIDE\n\n\nstatic inline void lv_page_set_scrlbar_mode(lv_obj_t * page, lv_scrlbar_mode_t sb_mode)\n{\n    lv_page_set_scrollbar_mode(page, sb_mode);\n}\nstatic inline lv_scrollbar_mode_t lv_page_get_scrlbar_mode(lv_obj_t * page)\n{\n    return lv_page_get_scrollbar_mode(page);\n}\n\n\nstatic inline lv_obj_t * lv_page_get_scrl(lv_obj_t * page)\n{\n    return lv_page_get_scrollable(page);\n}\n#endif\n\n\n#endif /*LV_USE_API_EXTENSION_V6*/\n\n\n\n\n/*---------------------\n * V7.0 COMPATIBILITY\n *--------------------*/\n#if LV_USE_API_EXTENSION_V7\n\n#if LV_USE_ROLLER\n#define LV_ROLLER_MODE_INIFINITE LV_ROLLER_MODE_INFINITE\n#endif\n\n#if LV_USE_WIN\n\nstatic inline lv_obj_t * lv_win_add_btn(lv_obj_t * win, const void * img_src)\n{\n    return lv_win_add_btn_right(win, img_src);\n}\n\n#endif\n\n#if LV_USE_CHART\nstatic inline void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax)\n{\n    lv_chart_set_y_range(chart, LV_CHART_AXIS_PRIMARY_Y, ymin,  ymax);\n}\n\n\nstatic inline void lv_chart_clear_serie(lv_obj_t * chart, lv_chart_series_t * series)\n{\n    lv_chart_clear_series(chart, series);\n}\n\n#endif\n\nstatic inline void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs,\n                                      lv_coord_t y_ofs)\n{\n    lv_obj_align_mid(obj, base, align, x_ofs, y_ofs);\n}\n\nstatic inline void lv_obj_align_origo_x(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs)\n{\n    lv_obj_align_mid_y(obj, base, align, x_ofs);\n}\n\nstatic inline void lv_obj_align_origo_y(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t y_ofs)\n{\n    lv_obj_align_mid_y(obj, base, align, y_ofs);\n}\n\n#endif /*LV_USE_API_EXTENSION_V6*/",
        "res_region": "",
        "lookback": " *      MACROS",
        "lookahead": "/**********************",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 35,
        "end_line": 416,
        "merge_gen_region": null,
        "confidence": 0.7262861728668213,
        "hesitated": true
    }
]