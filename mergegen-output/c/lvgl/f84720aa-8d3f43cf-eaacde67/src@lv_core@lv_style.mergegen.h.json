[
    {
        "a_contents": "#define LV_STYLE_PROP_INHERIT       (1 << 10)\n#define LV_STYLE_PROP_EXT_DRAW      (1 << 11)\n#define LV_STYLE_PROP_LAYOUT_REFR   (1 << 12)\n#define LV_STYLE_PROP_FILTER        (1 << 13)",
        "b_contents": "#define LV_DEBUG_STYLE_SENTINEL_VALUE      0x2288AAEE\n#define LV_DEBUG_STYLE_LIST_SENTINEL_VALUE 0x9977CCBB\n\n#define LV_STYLE_PROP_INIT(name, group, id, attr)  name = (((group << 4) + id) | ((attr) << 8))\n\n#define LV_STYLE_ID_MASK 0x00FF\n\n#define LV_STYLE_ATTR_NONE          0\n#define LV_STYLE_ATTR_INHERIT       (1 << 7)\n\n#define _LV_STYLE_CLOSING_PROP     0xFF\n\n#define LV_STYLE_TRANS_NUM_MAX      6\n\n#define LV_STYLE_PROP_ALL 0xFF",
        "base_contents": "#define LV_DEBUG_STYLE_SENTINEL_VALUE       0x2288AAEE\n#define LV_DEBUG_STYLE_LIST_SENTINEL_VALUE  0x9977CCBB\n\n#define LV_STYLE_PROP_INIT(name, group, id, attr)  name = (((group << 4) + id) | ((attr) << 8))\n\n#define LV_STYLE_ID_MASK 0x00FF\n\n#define LV_STYLE_ATTR_NONE          0\n#define LV_STYLE_ATTR_INHERIT       (1 << 7)\n\n#define _LV_STYLE_CLOSING_PROP     0xFF\n\n#define LV_STYLE_TRANS_NUM_MAX      6\n\n#define LV_STYLE_PROP_ALL 0xFF",
        "res_region": "#define LV_STYLE_PROP_INHERIT       (1 << 10)\n#define LV_STYLE_PROP_EXT_DRAW      (1 << 11)\n#define LV_STYLE_PROP_LAYOUT_REFR   (1 << 12)\n#define LV_STYLE_PROP_FILTER        (1 << 13)",
        "lookback": "#define LV_STYLE_PROP_EXT_DRAW      (1 << 11)",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 34,
        "end_line": 71,
        "merge_gen_region": null,
        "confidence": 0.5719761252403259,
        "hesitated": true
    },
    {
        "a_contents": "uint16_t lv_style_register_prop(bool inherit);",
        "b_contents": "/**\n * Copy a style with all its properties\n * @param style_dest pointer to the destination style. (Should be initialized with `lv_style_init()`)\n * @param style_src pointer to the source (to copy )style\n */\nvoid lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src);\n\n/**\n * Initialize a style list\n * @param list a style list to initialize\n */\nvoid lv_style_list_init(lv_style_list_t * list);\n\n/**\n * Copy a style list with all its styles and local style properties\n * @param list_dest pointer to the destination style list. (should be initialized with `lv_style_list_init()`)\n * @param list_src pointer to the source (to copy) style list.\n */\nvoid lv_style_list_copy(lv_style_list_t * list_dest, const lv_style_list_t * list_src);\n\n/**\n * Add a style to a style list.\n * Only the style pointer will be saved so the shouldn't be a local variable.\n * (It should be static, global or dynamically allocated)\n * @param list pointer to a style list\n * @param style pointer to a style to add\n */\nvoid _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style);\n\n/**\n * Remove a style from a style list\n * @param style_list pointer to a style list\n * @param style pointer to a style to remove\n */\nvoid _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style);\n\n/**\n * Remove all styles added from style list, clear the local style, transition style and free all allocated memories.\n * Leave `ignore_trans` flag as it is.\n * @param list pointer to a style list.\n */\nvoid _lv_style_list_reset(lv_style_list_t * style_list);\n\nstatic inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)\n{\n    if(list->has_trans && list->skip_trans) id++;\n    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;\n    return list->style_list[id];\n}",
        "base_contents": "/**\n * Copy a style with all its properties\n * @param style_dest pointer to the destination style. (Should be initialized with `lv_style_init()`)\n * @param style_src pointer to the source (to copy )style\n */\nvoid lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src);\n\n/**\n * Initialize a style list\n * @param list a style list to initialize\n */\nvoid lv_style_list_init(lv_style_list_t * list);\n\n/**\n * Copy a style list with all its styles and local style properties\n * @param list_dest pointer to the destination style list. (should be initialized with `lv_style_list_init()`)\n * @param list_src pointer to the source (to copy) style list.\n */\nvoid lv_style_list_copy(lv_style_list_t * list_dest, const lv_style_list_t * list_src);\n\n/**\n * Add a style to a style list.\n * Only the the style pointer will be saved so the shouldn't be a local variable.\n * (It should be static, global or dynamically allocated)\n * @param list pointer to a style list\n * @param style pointer to a style to add\n */\nvoid _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style);\n\n/**\n * Remove a style from a style list\n * @param style_list pointer to a style list\n * @param style pointer to a style to remove\n */\nvoid _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style);\n\n/**\n * Remove all styles added from style list, clear the local style, transition style and free all allocated memories.\n * Leave `ignore_trans` flag as it is.\n * @param list pointer to a style list.\n */\nvoid _lv_style_list_reset(lv_style_list_t * style_list);\n\nstatic inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)\n{\n    if(list->has_trans && list->skip_trans) id++;\n    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;\n    return list->style_list[id];\n}",
        "res_region": "uint16_t lv_style_register_prop(bool inherit);",
        "lookback": "",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 228,
        "end_line": 330,
        "merge_gen_region": null,
        "confidence": 0.848267674446106,
        "hesitated": true
    },
    {
        "a_contents": "static inline void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value) {\n  lv_style_value_t v = {.num = value}; lv_style_set_prop(style, LV_STYLE_PAD_ROW, v); }\n\nstatic inline void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value) {\n  lv_style_value_t v = {.num = value}; lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v); }",
        "b_contents": "/**\n * Get an opacity typed property from a style list.\n * It will return the property which match best with given state.\n * @param list pointer to a style list from where the property should be get\n * @param prop a style property ORed with a state.\n * E.g. `LV_STYLE_BORDER_OPA | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`\n * @param res pointer to a buffer to store the result\n * @return LV_RES_OK: there was a matching property in the list\n *         LV_RES_INV: there was NO matching property in the list\n * @note for performance reasons it's not checked if the property really has opacity type\n */\nlv_res_t _lv_style_list_get_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t * res);",
        "base_contents": "\n/**\n * Get an opacity typed property from a style list.\n * It will return the property which match best with given state.\n * @param list pointer to a style list from where the property should be get\n * @param prop a style property ORed with a state.\n * E.g. `LV_STYLE_BORDER_OPA | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`\n * @param res pointer to a buffer to store the result\n * @return LV_RES_OK: there was a matching property in the list\n *         LV_RES_INV: there was NO matching property in the list\n * @note for performance reasons it's not checked if the property really has opacity type\n */\nlv_res_t _lv_style_list_get_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t * res);",
        "res_region": "static inline void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value) {\n  lv_style_value_t v = {.num = value}; lv_style_set_prop(style, LV_STYLE_PAD_ROW, v); }\n\nstatic inline void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value) {\n  lv_style_value_t v = {.num = value}; lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v); }",
        "lookback": "  lv_style_value_t v = {.num = value}; lv_style_set_prop(style, LV_STYLE_PAD_ROW, v); }",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 407,
        "end_line": 440,
        "merge_gen_region": null,
        "confidence": 0.7052090167999268,
        "hesitated": true
    }
]