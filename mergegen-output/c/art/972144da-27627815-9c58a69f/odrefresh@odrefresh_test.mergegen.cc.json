[
    {
        "a_contents": "              DoExecAndReturnCode(AllOf(\n                  Contains(Flag(\"--dex-file=\", core_oj_jar_)),\n                  Contains(Flag(\"--dex-file=\", framework_jar_)),\n                  Not(Contains(Flag(\"--dex-file=\", conscrypt_jar_))),\n                  Not(Contains(Flag(\"--dex-file=\", framework_wifi_jar_))),\n                  Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_))),\n                  Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_))),\n                  Not(Contains(Flag(\"--dex-fd=\", FdOf(conscrypt_jar_)))),\n                  Not(Contains(Flag(\"--dex-fd=\", FdOf(framework_wifi_jar_)))),\n                  Contains(ListFlag(\"-Xbootclasspath:\", ElementsAre(core_oj_jar_, framework_jar_))),\n                  Contains(ListFlag(\"-Xbootclasspathfds:\",\n                                    ElementsAre(FdOf(core_oj_jar_), FdOf(framework_jar_)))),\n                  Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot.oat\")),\n                  Contains(Flag(\"--base=\", _)),\n                  Not(Contains(Flag(\"--boot-image=\", _))))))",
        "b_contents": "              DoExecAndReturnCode(AllOf(\n                  Contains(Flag(\"--dex-file=\", core_oj_jar_)),\n                  Contains(Flag(\"--dex-file=\", framework_jar_)),\n                  Not(Contains(Flag(\"--dex-file=\", conscrypt_jar_))),\n                  Not(Contains(Flag(\"--dex-file=\", framework_wifi_jar_))),\n                  Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_))),\n                  Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_))),\n                  Not(Contains(Flag(\"--dex-fd=\", FdOf(conscrypt_jar_)))),\n                  Not(Contains(Flag(\"--dex-fd=\", FdOf(framework_wifi_jar_)))),\n                  Contains(ListFlag(\"-Xbootclasspath:\", ElementsAre(core_oj_jar_, framework_jar_))),\n                  Contains(ListFlag(\"-Xbootclasspathfds:\",\n                                    ElementsAre(FdOf(core_oj_jar_), FdOf(framework_jar_)))),\n                  Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot.oat\")),\n                  Contains(Flag(\"--base=\", _)),\n                  Not(Contains(Flag(\"--boot-image=\", _))))))\n      .WillOnce(Return(0));\n\n  // Ignore the invocation for the mainline extension.\n  EXPECT_CALL(*mock_exec_utils_, DoExecAndReturnCode(Contains(Flag(\"--dex-file=\", conscrypt_jar_))))\n      .WillOnce(Return(0));\n\n  EXPECT_EQ(odrefresh_->Compile(\n                *metrics_,\n                CompilationOptions{\n                    .boot_images_to_generate_for_isas{\n                        {InstructionSet::kX86_64,\n                         {.primary_boot_image = true, .boot_image_mainline_extension = true}}},\n                }),\n            ExitCode::kCompilationSuccess);\n}\n\nTEST_F(OdRefreshTest, BootImageMainlineExtension) {\n  EXPECT_CALL(\n      *mock_exec_utils_,\n      DoExecAndReturnCode(AllOf(\n          Not(Contains(Flag(\"--dex-file=\", core_oj_jar_))),\n          Not(Contains(Flag(\"--dex-file=\", framework_jar_))),\n          Contains(Flag(\"--dex-file=\", conscrypt_jar_)),\n          Contains(Flag(\"--dex-file=\", framework_wifi_jar_)),\n          Not(Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_)))),\n          Not(Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_)))),\n          Contains(Flag(\"--dex-fd=\", FdOf(conscrypt_jar_))),\n          Contains(Flag(\"--dex-fd=\", FdOf(framework_wifi_jar_))),\n          Contains(ListFlag(\n              \"-Xbootclasspath:\",\n              ElementsAre(core_oj_jar_, framework_jar_, conscrypt_jar_, framework_wifi_jar_))),\n          Contains(ListFlag(\"-Xbootclasspathfds:\",\n                            ElementsAre(FdOf(core_oj_jar_),\n                                        FdOf(framework_jar_),\n                                        FdOf(conscrypt_jar_),\n                                        FdOf(framework_wifi_jar_)))),\n          Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot-conscrypt.oat\")),\n          Not(Contains(Flag(\"--base=\", _))),\n          Contains(Flag(\"--boot-image=\", _)))))",
        "base_contents": "              DoExecAndReturnCode(\n                  AllOf(Contains(Flag(\"--dex-file=\", core_oj_jar_)),\n                        Contains(Flag(\"--dex-file=\", framework_jar_)),\n                        Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_))),\n                        Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_))),\n                        Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot.oat\")),\n                        Contains(Flag(\"--base=\", _)))))",
        "res_region": "              DoExecAndReturnCode(AllOf(\n                  Contains(Flag(\"--dex-file=\", core_oj_jar_)),\n                  Contains(Flag(\"--dex-file=\", framework_jar_)),\n                  Not(Contains(Flag(\"--dex-file=\", conscrypt_jar_))),\n                  Not(Contains(Flag(\"--dex-file=\", framework_wifi_jar_))),\n                  Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_))),\n                  Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_))),\n                  Not(Contains(Flag(\"--dex-fd=\", FdOf(conscrypt_jar_)))),\n                  Not(Contains(Flag(\"--dex-fd=\", FdOf(framework_wifi_jar_)))),\n                  Contains(ListFlag(\"-Xbootclasspath:\", ElementsAre(core_oj_jar_, framework_jar_))),\n                  Contains(ListFlag(\"-Xbootclasspathfds:\",\n                                    ElementsAre(FdOf(core_oj_jar_), FdOf(framework_jar_)))),\n                  Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot.oat\")),\n                  Contains(Flag(\"--base=\", _)),\n                  Not(Contains(Flag(\"--boot-image=\", _))))))\n      .WillOnce(Return(0));\n\n  // Ignore the invocation for the mainline extension.\n  EXPECT_CALL(*mock_exec_utils_, DoExecAndReturnCode(Contains(Flag(\"--dex-file=\", conscrypt_jar_))))\n      .WillOnce(Return(0));\n\n  EXPECT_EQ(odrefresh_->Compile(\n                *metrics_,\n                CompilationOptions{\n                    .boot_images_to_generate_for_isas{\n                        {InstructionSet::kX86_64,\n                         {.primary_boot_image = true, .boot_image_mainline_extension = true}}},\n                }),\n            ExitCode::kCompilationSuccess);\n}\n\nTEST_F(OdRefreshTest, BootImageMainlineExtension) {\n  EXPECT_CALL(\n      *mock_exec_utils_,\n      DoExecAndReturnCode(AllOf(\n          Not(Contains(Flag(\"--dex-file=\", core_oj_jar_))),\n          Not(Contains(Flag(\"--dex-file=\", framework_jar_))),\n          Contains(Flag(\"--dex-file=\", conscrypt_jar_)),\n          Contains(Flag(\"--dex-file=\", framework_wifi_jar_)),\n          Not(Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_)))),\n          Not(Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_)))),\n          Contains(Flag(\"--dex-fd=\", FdOf(conscrypt_jar_))),\n          Contains(Flag(\"--dex-fd=\", FdOf(framework_wifi_jar_))),\n          Contains(ListFlag(\n              \"-Xbootclasspath:\",\n              ElementsAre(core_oj_jar_, framework_jar_, conscrypt_jar_, framework_wifi_jar_))),\n          Contains(ListFlag(\"-Xbootclasspathfds:\",\n                            ElementsAre(FdOf(core_oj_jar_),\n                                        FdOf(framework_jar_),\n                                        FdOf(conscrypt_jar_),\n                                        FdOf(framework_wifi_jar_)))),\n          Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot-conscrypt.oat\")),\n          Not(Contains(Flag(\"--base=\", _))),\n          Contains(Flag(\"--boot-image=\", _)))))",
        "lookback": "                  Contains(Flag(\"--dex-file=\", core_oj_jar_)),",
        "lookahead": "      .WillOnce(Return(0));",
        "label": [
            "base",
            "complex_conflict"
        ],
        "start_line": 280,
        "end_line": 359,
        "merge_gen_region": null,
        "confidence": 0.43353071808815,
        "hesitated": true
    },
    {
        "a_contents": "  // Ignore the invocation for the mainline extension.\n  EXPECT_CALL(*mock_exec_utils_, DoExecAndReturnCode(Contains(Flag(\"--dex-file=\", conscrypt_jar_))))\n      .WillOnce(Return(0));\n\n  EXPECT_EQ(odrefresh_->Compile(\n                *metrics_,\n                CompilationOptions{\n                    .boot_images_to_generate_for_isas{\n                        {InstructionSet::kX86_64,\n                         {.primary_boot_image = true, .boot_image_mainline_extension = true}}},\n                }),\n            ExitCode::kCompilationSuccess);\n}\n\nTEST_F(OdRefreshTest, BootImageMainlineExtension) {\n  EXPECT_CALL(\n      *mock_exec_utils_,\n      DoExecAndReturnCode(AllOf(\n          Not(Contains(Flag(\"--dex-file=\", core_oj_jar_))),\n          Not(Contains(Flag(\"--dex-file=\", framework_jar_))),\n          Contains(Flag(\"--dex-file=\", conscrypt_jar_)),\n          Contains(Flag(\"--dex-file=\", framework_wifi_jar_)),\n          Not(Contains(Flag(\"--dex-fd=\", FdOf(core_oj_jar_)))),\n          Not(Contains(Flag(\"--dex-fd=\", FdOf(framework_jar_)))),\n          Contains(Flag(\"--dex-fd=\", FdOf(conscrypt_jar_))),\n          Contains(Flag(\"--dex-fd=\", FdOf(framework_wifi_jar_))),\n          Contains(ListFlag(\n              \"-Xbootclasspath:\",\n              ElementsAre(core_oj_jar_, framework_jar_, conscrypt_jar_, framework_wifi_jar_))),\n          Contains(ListFlag(\"-Xbootclasspathfds:\",\n                            ElementsAre(FdOf(core_oj_jar_),\n                                        FdOf(framework_jar_),\n                                        FdOf(conscrypt_jar_),\n                                        FdOf(framework_wifi_jar_)))),\n          Contains(Flag(\"--oat-location=\", dalvik_cache_dir_ + \"/x86_64/boot-conscrypt.oat\")),\n          Not(Contains(Flag(\"--base=\", _))),\n          Contains(Flag(\"--boot-image=\", _)))))\n      .WillOnce(Return(0));\n\n  EXPECT_EQ(odrefresh_->Compile(\n                *metrics_,\n                CompilationOptions{\n                    .boot_images_to_generate_for_isas{\n                        {InstructionSet::kX86_64, {.boot_image_mainline_extension = true}}},\n                }),",
        "b_contents": "  EXPECT_EQ(odrefresh_->Compile(\n                *metrics_,\n                CompilationOptions{\n                    .boot_images_to_generate_for_isas{\n                        {InstructionSet::kX86_64, {.boot_image_mainline_extension = true}}},\n                }),",
        "base_contents": "  EXPECT_EQ(odrefresh_->Compile(*metrics_,\n                                CompilationOptions{\n                                    .compile_boot_classpath_for_isas = {InstructionSet::kX86_64},\n                                }),",
        "res_region": "      .WillOnce(Return(0));\n\n  EXPECT_EQ(odrefresh_->Compile(\n                *metrics_,\n                CompilationOptions{\n                    .boot_images_to_generate_for_isas{\n                        {InstructionSet::kX86_64, {.boot_image_mainline_extension = true}}},\n                }),",
        "lookback": "",
        "lookahead": "            ExitCode::kCompilationSuccess);",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 362,
        "end_line": 420,
        "merge_gen_region": null,
        "confidence": 0.5743598341941833,
        "hesitated": true
    }
]