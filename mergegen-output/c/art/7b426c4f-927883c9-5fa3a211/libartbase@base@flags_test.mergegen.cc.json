[
    {
        "a_contents": "/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"base/flags.h\"\n\n#include <optional>\n\n#include \"android-base/properties.h\"\n#include \"common_runtime_test.h\"\n\n\nnamespace art {\n\n// Tests may be run in parallel so this helper class ensures\n// that we generate a unique test flag each time to avoid\n// tests stepping on each other\nclass TestFlag {\n public:\n  // Takes control of the tmp_file pointer.\n  explicit TestFlag(ScratchFile* tmp_file) {\n    tmp_file_.reset(tmp_file);\n\n    std::string tmp_name = tmp_file_->GetFilename();\n    size_t tmp_last_slash = tmp_name.rfind('/');\n    tmp_name = tmp_name.substr(tmp_last_slash + 1);\n\n    flag_name_ = \"art.gtest.\" + tmp_name;\n    system_prop_name_ = \"dalvik.vm.\" + flag_name_;\n    server_name_ = \"persist.device_config.runtime_native.\" + flag_name_;\n    cmd_line_name_ = flag_name_;\n    std::replace(cmd_line_name_.begin(), cmd_line_name_.end(), '.', '-');\n\n    flag_.reset(new Flag<int>(flag_name_, /*default_value=*/ 42));\n  }\n\n  void AssertCmdlineValue(bool has_value, int expected) {\n    ASSERT_EQ(flag_->from_command_line_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(flag_->from_command_line_.value(), expected);\n    }\n  }\n\n  void AssertSysPropValue(bool has_value, int expected) {\n    ASSERT_EQ(flag_->from_system_property_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(flag_->from_system_property_.value(), expected);\n    }\n  }\n\n  void AssertServerSettingValue(bool has_value, int expected) {\n    ASSERT_EQ(flag_->from_server_setting_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(flag_->from_server_setting_.value(), expected);\n    }\n  }\n\n  void AssertDefaultValue(int expected) {\n    ASSERT_EQ(flag_->default_, expected);\n  }\n\n  int Value() {\n    return (*flag_)();\n  }\n\n  std::string SystemProperty() const {\n    return system_prop_name_;\n  }\n\n  std::string ServerSetting() const {\n    return server_name_;\n  }\n\n  std::string CmdLineName() const {\n    return cmd_line_name_;\n  }\n\n private:\n  std::unique_ptr<ScratchFile> tmp_file_;\n  std::unique_ptr<Flag<int>> flag_;\n  std::string flag_name_;\n  std::string cmd_line_name_;\n  std::string system_prop_name_;\n  std::string server_name_;\n};\n\nclass FlagsTests : public CommonRuntimeTest {\n protected:\n  // We need to initialize the flag after the ScratchDir is created\n  // but before we configure the runtime options (so that we can get\n  // the right name for the config).\n  //\n  // So we do it in SetUpRuntimeOptions.\n  virtual void SetUpRuntimeOptions(RuntimeOptions* options) {\n    test_flag_.reset(new TestFlag(new ScratchFile()));\n    CommonRuntimeTest::SetUpRuntimeOptions(options);\n  }\n\n  virtual void TearDown() {\n    test_flag_ = nullptr;\n    CommonRuntimeTest::TearDown();\n  }\n\n  std::unique_ptr<TestFlag> test_flag_;\n};\n\nclass FlagsTestsWithCmdLine : public FlagsTests {\n protected:\n  virtual void TearDown() {\n    // android::base::SetProperty(test_flag_->SystemProperty(), \"\");\n    android::base::SetProperty(test_flag_->ServerSetting(), \"\");\n    FlagsTests::TearDown();\n  }\n\n  virtual void SetUpRuntimeOptions(RuntimeOptions* options) {\n    test_flag_.reset(new TestFlag(new ScratchFile()));\n    std::string option = \"-X\" + test_flag_->CmdLineName() + \":1\";\n    options->emplace_back(option.c_str(), nullptr);\n  }\n};\n\n// Validate that when no flag is set, the default is taken and none of the other\n// locations are populated\nTEST_F(FlagsTests, ValidateDefaultValue) {\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(false, 1);\n  test_flag_->AssertSysPropValue(false, 2);\n  test_flag_->AssertServerSettingValue(false, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 42);\n}\n\n// Validate that the server side config is picked when it is set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueServerSetting) {\n  ASSERT_TRUE(android::base::SetProperty(test_flag_->SystemProperty(), \"2\"));\n  ASSERT_TRUE(android::base::SetProperty(test_flag_->ServerSetting(), \"3\"));\n\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(true, 1);\n  test_flag_->AssertSysPropValue(true, 2);\n  test_flag_->AssertServerSettingValue(true, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 3);\n}\n\n// Validate that the system property value is picked when the server one is not set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueSysProperty) {\n  ASSERT_TRUE(android::base::SetProperty(test_flag_->SystemProperty(), \"2\"));\n\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(true, 1);\n  test_flag_->AssertSysPropValue(true, 2);\n  test_flag_->AssertServerSettingValue(false, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 2);\n}\n\n// Validate that the cmdline value is picked when no properties are set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueCmdline) {\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(true, 1);\n  test_flag_->AssertSysPropValue(false, 2);\n  test_flag_->AssertServerSettingValue(false, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 1);\n}\n\n}  // namespace art",
        "b_contents": "/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"base/flags.h\"\n\n#include <optional>\n\n#include \"android-base/properties.h\"\n#include \"common_runtime_test.h\"\n\n\nnamespace art {\n\nclass FlagsTests : public CommonRuntimeTest {\n protected:\n  void assertCmdlineValue(bool has_value, int expected) {\n    ASSERT_EQ(gFlags.MyFeatureTestFlag.from_command_line_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(gFlags.MyFeatureTestFlag.from_command_line_.value(), expected);\n    }\n  }\n\n  void assertSysPropValue(bool has_value, int expected) {\n    ASSERT_EQ(gFlags.MyFeatureTestFlag.from_system_property_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(gFlags.MyFeatureTestFlag.from_system_property_.value(), expected);\n    }\n  }\n\n  void assertServerSettingValue(bool has_value, int expected) {\n    ASSERT_EQ(gFlags.MyFeatureTestFlag.from_server_setting_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(gFlags.MyFeatureTestFlag.from_server_setting_.value(), expected);\n    }\n  }\n\n  void assertDefaultValue(int expected) {\n    ASSERT_EQ(gFlags.MyFeatureTestFlag.default_, expected);\n  }\n};\n\nclass FlagsTestsWithCmdLine : public FlagsTests {\n public:\n  ~FlagsTestsWithCmdLine() {\n    android::base::SetProperty(\"dalvik.vm.my-feature-test.flag\", \"\");\n    android::base::SetProperty(\"persist.device_config.runtime_native.my-feature-test.flag\", \"\");\n  }\n\n protected:\n  void SetUpRuntimeOptions(RuntimeOptions* options) override {\n    // Disable implicit dex2oat invocations when loading image spaces.\n    options->emplace_back(\"-Xmy-feature-test-flag:1\", nullptr);\n  }\n};\n\n// Validate that when no flag is set, the default is taken and none of the other\n// locations are populated\nTEST_F(FlagsTests, ValidateDefaultValue) {\n  FlagBase::ReloadAllFlags(\"test\");\n\n  assertCmdlineValue(false, 1);\n  assertSysPropValue(false, 2);\n  assertServerSettingValue(false, 3);\n  assertDefaultValue(42);\n\n  ASSERT_EQ(gFlags.MyFeatureTestFlag(), 42);\n}\n\n// Validate that the server side config is picked when it is set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueServerSetting) {\n  android::base::SetProperty(\"dalvik.vm.my-feature-test.flag\", \"2\");\n  android::base::SetProperty(\"persist.device_config.runtime_native.my-feature-test.flag\", \"3\");\n\n  FlagBase::ReloadAllFlags(\"test\");\n\n  assertCmdlineValue(true, 1);\n  assertSysPropValue(true, 2);\n  assertServerSettingValue(true, 3);\n  assertDefaultValue(42);\n\n  ASSERT_EQ(gFlags.MyFeatureTestFlag(), 3);\n}\n\n// Validate that the system property value is picked when the server one is not set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueSysProperty) {\n  android::base::SetProperty(\"dalvik.vm.my-feature-test.flag\", \"2\");\n\n  FlagBase::ReloadAllFlags(\"test\");\n\n  assertCmdlineValue(true, 1);\n  assertSysPropValue(true, 2);\n  assertServerSettingValue(false, 3);\n  assertDefaultValue(42);\n\n  ASSERT_EQ(gFlags.MyFeatureTestFlag(), 2);\n}\n\n// Validate that the cmdline value is picked when no properties are set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueCmdline) {\n  FlagBase::ReloadAllFlags(\"test\");\n\n  assertCmdlineValue(true, 1);\n  assertSysPropValue(false, 2);\n  assertServerSettingValue(false, 3);\n  assertDefaultValue(42);\n\n  ASSERT_EQ(gFlags.MyFeatureTestFlag(), 1);\n}\n\n}  // namespace art",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"base/flags.h\"\n\n#include <optional>\n\n#include \"android-base/properties.h\"\n#include \"common_runtime_test.h\"\n\n\nnamespace art {\n\n// Tests may be run in parallel so this helper class ensures\n// that we generate a unique test flag each time to avoid\n// tests stepping on each other\nclass TestFlag {\n public:\n  // Takes control of the tmp_file pointer.\n  explicit TestFlag(ScratchFile* tmp_file) {\n    tmp_file_.reset(tmp_file);\n\n    std::string tmp_name = tmp_file_->GetFilename();\n    size_t tmp_last_slash = tmp_name.rfind('/');\n    tmp_name = tmp_name.substr(tmp_last_slash + 1);\n\n    flag_name_ = \"art.gtest.\" + tmp_name;\n    system_prop_name_ = \"dalvik.vm.\" + flag_name_;\n    server_name_ = \"persist.device_config.runtime_native.\" + flag_name_;\n    cmd_line_name_ = flag_name_;\n    std::replace(cmd_line_name_.begin(), cmd_line_name_.end(), '.', '-');\n\n    flag_.reset(new Flag<int>(flag_name_, /*default_value=*/ 42));\n  }\n\n  void AssertCmdlineValue(bool has_value, int expected) {\n    ASSERT_EQ(flag_->from_command_line_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(flag_->from_command_line_.value(), expected);\n    }\n  }\n\n  void AssertSysPropValue(bool has_value, int expected) {\n    ASSERT_EQ(flag_->from_system_property_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(flag_->from_system_property_.value(), expected);\n    }\n  }\n\n  void AssertServerSettingValue(bool has_value, int expected) {\n    ASSERT_EQ(flag_->from_server_setting_.has_value(), has_value);\n    if (has_value) {\n      ASSERT_EQ(flag_->from_server_setting_.value(), expected);\n    }\n  }\n\n  void AssertDefaultValue(int expected) {\n    ASSERT_EQ(flag_->default_, expected);\n  }\n\n  int Value() {\n    return (*flag_)();\n  }\n\n  std::string SystemProperty() const {\n    return system_prop_name_;\n  }\n\n  std::string ServerSetting() const {\n    return server_name_;\n  }\n\n  std::string CmdLineName() const {\n    return cmd_line_name_;\n  }\n\n private:\n  std::unique_ptr<ScratchFile> tmp_file_;\n  std::unique_ptr<Flag<int>> flag_;\n  std::string flag_name_;\n  std::string cmd_line_name_;\n  std::string system_prop_name_;\n  std::string server_name_;\n};\n\nclass FlagsTests : public CommonRuntimeTest {\n protected:\n  // We need to initialize the flag after the ScratchDir is created\n  // but before we configure the runtime options (so that we can get\n  // the right name for the config).\n  //\n  // So we do it in SetUpRuntimeOptions.\n  virtual void SetUpRuntimeOptions(RuntimeOptions* options) {\n    test_flag_.reset(new TestFlag(new ScratchFile()));\n    CommonRuntimeTest::SetUpRuntimeOptions(options);\n  }\n\n  virtual void TearDown() {\n    test_flag_ = nullptr;\n    CommonRuntimeTest::TearDown();\n  }\n\n  std::unique_ptr<TestFlag> test_flag_;\n};\n\nclass FlagsTestsWithCmdLine : public FlagsTests {\n protected:\n  virtual void TearDown() {\n    // android::base::SetProperty(test_flag_->SystemProperty(), \"\");\n    android::base::SetProperty(test_flag_->ServerSetting(), \"\");\n    FlagsTests::TearDown();\n  }\n\n  virtual void SetUpRuntimeOptions(RuntimeOptions* options) {\n    test_flag_.reset(new TestFlag(new ScratchFile()));\n    std::string option = \"-X\" + test_flag_->CmdLineName() + \":1\";\n    options->emplace_back(option.c_str(), nullptr);\n  }\n};\n\n// Validate that when no flag is set, the default is taken and none of the other\n// locations are populated\nTEST_F(FlagsTests, ValidateDefaultValue) {\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(false, 1);\n  test_flag_->AssertSysPropValue(false, 2);\n  test_flag_->AssertServerSettingValue(false, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 42);\n}\n\n// Validate that the server side config is picked when it is set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueServerSetting) {\n  ASSERT_TRUE(android::base::SetProperty(test_flag_->SystemProperty(), \"2\"));\n  ASSERT_TRUE(android::base::SetProperty(test_flag_->ServerSetting(), \"3\"));\n\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(true, 1);\n  test_flag_->AssertSysPropValue(true, 2);\n  test_flag_->AssertServerSettingValue(true, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 3);\n}\n\n// Validate that the system property value is picked when the server one is not set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueSysProperty) {\n  ASSERT_TRUE(android::base::SetProperty(test_flag_->SystemProperty(), \"2\"));\n\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(true, 1);\n  test_flag_->AssertSysPropValue(true, 2);\n  test_flag_->AssertServerSettingValue(false, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 2);\n}\n\n// Validate that the cmdline value is picked when no properties are set.\nTEST_F(FlagsTestsWithCmdLine, FlagsTestsGetValueCmdline) {\n  FlagBase::ReloadAllFlags(\"test\");\n\n  test_flag_->AssertCmdlineValue(true, 1);\n  test_flag_->AssertSysPropValue(false, 2);\n  test_flag_->AssertServerSettingValue(false, 3);\n  test_flag_->AssertDefaultValue(42);\n\n  ASSERT_EQ(test_flag_->Value(), 1);\n}\n\n}  // namespace art",
        "lookback": " * Copyright (C) 2011 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 314,
        "merge_gen_region": " CopyrightC 2011 Android Source/* CopyrightC 2011 Android Source * Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * *://../licensesLICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the the for specific governing and limitations the License */includebaseflagsh # <>includeandroidbase # \"...\"includecommonruntimetesth namespace { Tests be in so helper ensures that generate unique flag time avoid testsping each class classFlag public public //akes of tmpfile. explicitFlagScratch*_) tmpfileresettmpfile stdstring_ =__->Filename sizet_ tmplastslash tmpnamer(''); tmpname tmpname tmpnamesubstrtmplastslash 1 flagname =artgtest +_; systempropname =dalkvm +__; servername = \".._.\" flagname cmdlinename =___;::(__.(),___.end '. '- flagresetnew<>(__, /*_=*/)); voidCmdValuebool_ hasvalue int) ASSERTEQflagfromcommandlinehasvalue hasvalue ifhasvalue { ASSERTEQflagfromcommand",
        "confidence": 0.9355417490005493,
        "hesitated": false,
        "resolved": false
    }
]