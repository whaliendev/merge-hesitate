[
    {
        "a_contents": "/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"cmdline_builder.h\"\n\n#include <utility>\n\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"\n\nnamespace art {\nnamespace tools {\nnamespace {\n\nusing ::testing::ElementsAre;\nusing ::testing::IsEmpty;\n\nclass CmdlineBuilderTest : public testing::Test {\n protected:\n  CmdlineBuilder args_;\n};\n\nTEST_F(CmdlineBuilderTest, ContainsOneFormatSpecifier) {\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%s\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=[%s]\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%s%%\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=[%s%%]\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%%%s\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%s\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%d\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%d\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%%s\", 's'));\n}\n\nTEST_F(CmdlineBuilderTest, Add) {\n  args_.Add(\"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntime) {\n  args_.AddRuntime(\"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddString) {\n  args_.Add(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeString) {\n  args_.AddRuntime(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddInt) {\n  args_.Add(\"--flag=[%d]\", 123);\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[123]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeInt) {\n  args_.AddRuntime(\"--flag=[%d]\", 123);\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[123]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfNonEmpty) {\n  args_.AddIfNonEmpty(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfNonEmptyEmpty) {\n  args_.AddIfNonEmpty(\"--flag=[%s]\", \"\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfNonEmpty) {\n  args_.AddRuntimeIfNonEmpty(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfNonEmptyEmpty) {\n  args_.AddRuntimeIfNonEmpty(\"--flag=[%s]\", \"\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddIfTrue) {\n  args_.AddIf(true, \"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfFalse) {\n  args_.AddIf(false, \"--flag\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfTrue) {\n  args_.AddRuntimeIf(true, \"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfFalse) {\n  args_.AddRuntimeIf(false, \"--flag\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, Concat) {\n  args_.Add(\"--flag1\");\n  args_.Add(\"--flag2\");\n\n  CmdlineBuilder other;\n  other.Add(\"--flag3\");\n  other.Add(\"--flag4\");\n\n  args_.Concat(std::move(other));\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag1\", \"--flag2\", \"--flag3\", \"--flag4\"));\n  EXPECT_THAT(other.Get(), IsEmpty());\n}\n\n}  // namespace\n}  // namespace tools\n}  // namespace art",
        "b_contents": "/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"cmdline_builder.h\"\n\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"\n\nnamespace art {\nnamespace tools {\nnamespace {\n\nusing ::testing::ElementsAre;\nusing ::testing::IsEmpty;\n\nclass CmdlineBuilderTest : public testing::Test {\n protected:\n  CmdlineBuilder args_;\n};\n\nTEST_F(CmdlineBuilderTest, ContainsOneFormatSpecifier) {\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%s\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=[%s]\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%s%%\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=[%s%%]\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%%%s\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%s\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%d\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%d\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%%s\", 's'));\n}\n\nTEST_F(CmdlineBuilderTest, Add) {\n  args_.Add(\"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntime) {\n  args_.AddRuntime(\"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddString) {\n  args_.Add(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeString) {\n  args_.AddRuntime(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddInt) {\n  args_.Add(\"--flag=[%d]\", 123);\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[123]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeInt) {\n  args_.AddRuntime(\"--flag=[%d]\", 123);\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[123]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfNonEmpty) {\n  args_.AddIfNonEmpty(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfNonEmptyEmpty) {\n  args_.AddIfNonEmpty(\"--flag=[%s]\", \"\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfNonEmpty) {\n  args_.AddRuntimeIfNonEmpty(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfNonEmptyEmpty) {\n  args_.AddRuntimeIfNonEmpty(\"--flag=[%s]\", \"\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddIfTrue) {\n  args_.AddIf(true, \"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfFalse) {\n  args_.AddIf(false, \"--flag\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfTrue) {\n  args_.AddRuntimeIf(true, \"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfFalse) {\n  args_.AddRuntimeIf(false, \"--flag\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\n}  // namespace\n}  // namespace tools\n}  // namespace art",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#include \"cmdline_builder.h\"\n\n#include <utility>\n\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"\n\nnamespace art {\nnamespace tools {\nnamespace {\n\nusing ::testing::ElementsAre;\nusing ::testing::IsEmpty;\n\nclass CmdlineBuilderTest : public testing::Test {\n protected:\n  CmdlineBuilder args_;\n};\n\nTEST_F(CmdlineBuilderTest, ContainsOneFormatSpecifier) {\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%s\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=[%s]\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%s%%\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=[%s%%]\", 's'));\n  EXPECT_TRUE(internal::ContainsOneFormatSpecifier(\"--flag=%%%s\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%s\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%d\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%s%d\", 's'));\n  EXPECT_FALSE(internal::ContainsOneFormatSpecifier(\"--flag=%%s\", 's'));\n}\n\nTEST_F(CmdlineBuilderTest, Add) {\n  args_.Add(\"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntime) {\n  args_.AddRuntime(\"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddString) {\n  args_.Add(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeString) {\n  args_.AddRuntime(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddInt) {\n  args_.Add(\"--flag=[%d]\", 123);\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[123]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeInt) {\n  args_.AddRuntime(\"--flag=[%d]\", 123);\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[123]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfNonEmpty) {\n  args_.AddIfNonEmpty(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfNonEmptyEmpty) {\n  args_.AddIfNonEmpty(\"--flag=[%s]\", \"\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfNonEmpty) {\n  args_.AddRuntimeIfNonEmpty(\"--flag=[%s]\", \"foo\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag=[foo]\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfNonEmptyEmpty) {\n  args_.AddRuntimeIfNonEmpty(\"--flag=[%s]\", \"\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddIfTrue) {\n  args_.AddIf(true, \"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddIfFalse) {\n  args_.AddIf(false, \"--flag\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfTrue) {\n  args_.AddRuntimeIf(true, \"--flag\");\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--runtime-arg\", \"--flag\"));\n}\n\nTEST_F(CmdlineBuilderTest, AddRuntimeIfFalse) {\n  args_.AddRuntimeIf(false, \"--flag\");\n  EXPECT_THAT(args_.Get(), IsEmpty());\n}\n\nTEST_F(CmdlineBuilderTest, Concat) {\n  args_.Add(\"--flag1\");\n  args_.Add(\"--flag2\");\n\n  CmdlineBuilder other;\n  other.Add(\"--flag3\");\n  other.Add(\"--flag4\");\n\n  args_.Concat(std::move(other));\n  EXPECT_THAT(args_.Get(), ElementsAre(\"--flag1\", \"--flag2\", \"--flag3\", \"--flag4\"));\n  EXPECT_THAT(other.Get(), IsEmpty());\n}\n\n}  // namespace\n}  // namespace tools\n}  // namespace art",
        "lookback": " * Copyright (C) 2021 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 258,
        "merge_gen_region": " CopyrightC 2 The Open Project * Licensed the Apache, 2. ( \"License * you not this except in with License * may obtain copy the License * may a of License * *://./licensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WITHOUT OR OF KIND either or. See License for specific governing and limitations the License */includecmdlinebuilderh # <utility # \"gmockgmockh # \"gtestgtesthh namespace art namespace { tools namespace usingtestingElements; ::testingIsEmpty classlineTest public::Test protected CmdBuilder_; };_(CmdBuilder,OneSpecifier { EXPECTTRUEinternalContainsFormat(\"--=%\",s EXPECTTRUEinternal::OneSpecifierflag[%]\",s EXPECTTRUEinternalContainsFormat(\"--flags\",s EXPECTTRUEinternal::OneFormat(\"--flags\", ''));_(internalContainsFormat(\"--flag[%%% ''));_(internalContainsFormat(\"--flag[%%% ''));_(internalContainsFormat(\"--flag%%%\", ''));_(internalContainsFormat(\"--_(internalContainsFormat(\"--=\",s EXPECTFALSEinternal EXPECTTRUEinternalContainsFormat(\"--flagss ''));_(internalContainsOneSpecifier(\"--=%%s ''));_(internalContainsOneSpecifier(\"--=%%\",s",
        "confidence": 0.9219382405281067,
        "hesitated": false,
        "resolved": false
    }
]