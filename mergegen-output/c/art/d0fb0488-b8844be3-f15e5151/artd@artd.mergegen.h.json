[
    {
        "a_contents": "/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef ART_ARTD_ARTD_H_\n#define ART_ARTD_ARTD_H_\n\n#include <string>\n#include <vector>\n\n#include \"aidl/com/android/server/art/BnArtd.h\"\n#include \"android-base/result.h\"\n#include \"android/binder_auto_utils.h\"\n#include \"oat_file_assistant.h\"\n\nnamespace art {\nnamespace artd {\n\nclass Artd : public aidl::com::android::server::art::BnArtd {\n public:\n  ndk::ScopedAStatus isAlive(bool* _aidl_return) override;\n\n  ndk::ScopedAStatus deleteArtifacts(\n      const aidl::com::android::server::art::ArtifactsPath& in_artifactsPath,\n      int64_t* _aidl_return) override;\n\n  ndk::ScopedAStatus getOptimizationStatus(\n      const std::string& in_dexFile,\n      const std::string& in_instructionSet,\n      const std::string& in_classLoaderContext,\n      aidl::com::android::server::art::GetOptimizationStatusResult* _aidl_return) override;\n\n  android::base::Result<void> Start();\n\n private:\n  android::base::Result<OatFileAssistant::RuntimeOptions> GetRuntimeOptions();\n\n  android::base::Result<void> BuildRuntimeOptionsCache();\n\n  bool HasRuntimeOptionsCache() const;\n\n  std::vector<std::string> cached_boot_image_locations_;\n  std::vector<std::string> cached_boot_class_path_;\n  std::string cached_apex_versions_;\n  bool cached_deny_art_apex_data_files_;\n};\n\n}  // namespace artd\n}  // namespace art\n\n#endif  // ART_ARTD_ARTD_H_",
        "b_contents": "/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef ART_ARTD_ARTD_H_\n#define ART_ARTD_ARTD_H_\n\n#include \"aidl/com/android/server/art/BnArtd.h\"\n#include \"android-base/result.h\"\n#include \"android/binder_auto_utils.h\"\n\nnamespace art {\nnamespace artd {\n\nclass Artd : public aidl::com::android::server::art::BnArtd {\n public:\n  ndk::ScopedAStatus isAlive(bool* _aidl_return) override;\n\n  android::base::Result<void> Start();\n};\n\n}  // namespace artd\n}  // namespace art\n\n#endif  // ART_ARTD_ARTD_H_",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef ART_ARTD_ARTD_H_\n#define ART_ARTD_ARTD_H_\n\n#include <string>\n#include <vector>\n\n#include \"aidl/com/android/server/art/BnArtd.h\"\n#include \"android-base/result.h\"\n#include \"android/binder_auto_utils.h\"\n#include \"oat_file_assistant.h\"\n\nnamespace art {\nnamespace artd {\n\nclass Artd : public aidl::com::android::server::art::BnArtd {\n public:\n  ndk::ScopedAStatus isAlive(bool* _aidl_return) override;\n\n  ndk::ScopedAStatus deleteArtifacts(\n      const aidl::com::android::server::art::ArtifactsPath& in_artifactsPath,\n      int64_t* _aidl_return) override;\n\n  ndk::ScopedAStatus getOptimizationStatus(\n      const std::string& in_dexFile,\n      const std::string& in_instructionSet,\n      const std::string& in_classLoaderContext,\n      aidl::com::android::server::art::GetOptimizationStatusResult* _aidl_return) override;\n\n  android::base::Result<void> Start();\n\n private:\n  android::base::Result<OatFileAssistant::RuntimeOptions> GetRuntimeOptions();\n\n  android::base::Result<void> BuildRuntimeOptionsCache();\n\n  bool HasRuntimeOptionsCache() const;\n\n  std::vector<std::string> cached_boot_image_locations_;\n  std::vector<std::string> cached_boot_class_path_;\n  std::string cached_apex_versions_;\n  bool cached_deny_art_apex_data_files_;\n};\n\n}  // namespace artd\n}  // namespace art\n\n#endif  // ART_ARTD_ARTD_H_",
        "lookback": " * Copyright (C) 2022 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 103,
        "merge_gen_region": " CopyrightC 2 The Open Project * Licensed the Apache, 2. ( \"License * - not this except in with the. You obtain copy the License * may a of License * *://./licensesLICENSE20 * Unless by law agreed in,, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the the for specific governing and limitations the License */ifndefRTART_DART_DH # ARTART______includestring # <>includevector # \"lcomandroidserver///ndh # \"androidbaseresulth # \"androidbinderautoutilsh # \"o_fileas.\" art namespace art { art { A : a::::::::nd public n::A is(*aid_);dk::AScopedStatus_(landroidserverartBArtd publicerrordkScopedStatusAlivebool _aid_);dk::A deleteifacts constidlcomandroidserverartArts&&_ifactPath inartifactPath int64t _lreturn override n::AStatusOptimStatus const::&_dex, stdstring ininstruction, stdstring inclassContext a::::::::::::::OptimStatus*aid_)",
        "confidence": 0.9333628416061401,
        "hesitated": false,
        "resolved": false
    }
]