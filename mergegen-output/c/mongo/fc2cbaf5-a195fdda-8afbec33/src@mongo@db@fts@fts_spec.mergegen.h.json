[
    {
        "a_contents": "        extern const double MAX_WORD_WEIGHT;",
        "b_contents": "        extern const double DEFAULT_WEIGHT;",
        "base_contents": "",
        "res_region": "        extern const double MAX_WORD_WEIGHT;\n        extern const double DEFAULT_WEIGHT;",
        "lookback": "        extern const double DEFAULT_WEIGHT;",
        "lookahead": "",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 48,
        "end_line": 53,
        "merge_gen_region": "externexternexternexternexternexternexternexternexternexternexternexternexternexternexternexternexternexternextern",
        "confidence": 0.8992533087730408,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "        struct ScoreHelperStruct {\n            ScoreHelperStruct()\n                : freq(0), count(0), exp(0){\n            }\n            double freq;\n            double count;\n            double exp;\n        };\n        typedef unordered_map<string,ScoreHelperStruct> ScoreHelperMap;\n",
        "b_contents": "",
        "base_contents": "",
        "res_region": "        struct ScoreHelperStruct {\n            ScoreHelperStruct()\n                : freq(0), count(0), exp(0){\n            }\n            double freq;\n            double count;\n            double exp;\n        };\n        typedef unordered_map<string,ScoreHelperStruct> ScoreHelperMap;\n",
        "lookback": "            ScoreHelperStruct()",
        "lookahead": "        class FTSSpec {",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 58,
        "end_line": 72,
        "merge_gen_region": null,
        "confidence": 0.8034604787826538,
        "hesitated": true
    },
    {
        "a_contents": "            void scoreDocument( const BSONObj& obj,\n                                const FTSLanguage& parentLanguage,\n                                const string& parentPath,\n                                bool isArray,\n                                TermFrequencyMap* term_freqs ) const;",
        "b_contents": "            void scoreDocument( const BSONObj& obj, TermFrequencyMap* term_freqs ) const;",
        "base_contents": "            void scoreDocument( const BSONObj& obj,\n                                const FTSLanguage parentLanguage,\n                                const string& parentPath,\n                                bool isArray,\n                                TermFrequencyMap* term_freqs ) const;",
        "res_region": "            void scoreDocument( const BSONObj& obj, TermFrequencyMap* term_freqs ) const;",
        "lookback": "",
        "lookahead": "",
        "label": [
            "base",
            "complex_conflict"
        ],
        "start_line": 106,
        "end_line": 120,
        "merge_gen_region": null,
        "confidence": 0.5333006978034973,
        "hesitated": true
    },
    {
        "a_contents": "\n        private:\n            //\n            // Helper methods.  Invoked for TEXT_INDEX_VERSION_2 spec objects only.\n            //\n",
        "b_contents": "",
        "base_contents": "        private:",
        "res_region": "\n        private:\n            //\n            // Helper methods.  Invoked for TEXT_INDEX_VERSION_2 spec objects only.\n            //",
        "lookback": "        private:",
        "lookahead": "",
        "label": [
            "ours",
            "base_empty"
        ],
        "start_line": 129,
        "end_line": 140,
        "merge_gen_region": null,
        "confidence": 0.6372967958450317,
        "hesitated": true
    },
    {
        "a_contents": "            const FTSLanguage& _getLanguageToUseV2( const BSONObj& userDoc,\n                                                    const FTSLanguage& currentLanguage ) const;\n\n            /**\n             * Calculate the term scores for 'raw' and update 'term_freqs' with the result.  Parses\n             * 'raw' using 'tools', and weights term scores based on 'weight'.\n             */\n            void _scoreStringV2( const Tools& tools,\n                                 const StringData& raw,\n                                 TermFrequencyMap* term_freqs,\n                                 double weight ) const;\n\n            //\n            // Deprecated helper methods.  Invoked for TEXT_INDEX_VERSION_1 spec objects only.\n            //\n\n            void _scoreStringV1( const Tools& tools,\n                                 const StringData& raw,\n                                 TermFrequencyMap* docScores,\n                                 double weight ) const;\n\n            bool _weightV1( const StringData& field, double* out ) const;\n\n            void _scoreRecurseV1( const Tools& tools,\n                                  const BSONObj& obj,\n                                  TermFrequencyMap* term_freqs ) const;\n\n            void _scoreDocumentV1( const BSONObj& obj, TermFrequencyMap* term_freqs ) const;\n\n            const FTSLanguage& _getLanguageToUseV1( const BSONObj& userDoc ) const;\n\n            static BSONObj _fixSpecV1( const BSONObj& spec );\n\n            //\n            // Instance variables.\n            //",
        "b_contents": "            FTSLanguage getLanguageToUse( const BSONObj& userDoc, const FTSLanguage currentLanguage ) const;",
        "base_contents": "            const FTSLanguage getLanguageToUse( const BSONObj& userDoc,\n                                                const FTSLanguage currentLanguage ) const;",
        "res_region": "\n            /**\n             * Calculate the term scores for 'raw' and update 'term_freqs' with the result.  Parses\n             * 'raw' using 'tools', and weights term scores based on 'weight'.\n             */\n            void _scoreStringV2( const Tools& tools,\n                                 const StringData& raw,\n                                 TermFrequencyMap* term_freqs,\n                                 double weight ) const;\n\n        public:\n            /**\n             * Get the language override for the given BSON doc.  If no language override is\n             * specified, returns currentLanguage.\n             */\n            const FTSLanguage* _getLanguageToUseV2( const BSONObj& userDoc,\n                                                    const FTSLanguage* currentLanguage ) const;\n\n        private:\n            //\n            // Deprecated helper methods.  Invoked for TEXT_INDEX_VERSION_1 spec objects only.\n            //\n\n            void _scoreStringV1( const Tools& tools,\n                                 const StringData& raw,\n                                 TermFrequencyMap* docScores,\n                                 double weight ) const;\n\n            bool _weightV1( const StringData& field, double* out ) const;\n\n            void _scoreRecurseV1( const Tools& tools,\n                                  const BSONObj& obj,\n                                  TermFrequencyMap* term_freqs ) const;\n\n            void _scoreDocumentV1( const BSONObj& obj, TermFrequencyMap* term_freqs ) const;\n\n            const FTSLanguage& _getLanguageToUseV1( const BSONObj& userDoc ) const;\n\n            static BSONObj _fixSpecV1( const BSONObj& spec );\n\n            //\n            // Instance variables.\n            //",
        "lookback": "            /**",
        "lookahead": "",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 145,
        "end_line": 187,
        "merge_gen_region": null,
        "confidence": 0.8460397720336914,
        "hesitated": true
    },
    {
        "a_contents": "            TextIndexVersion _textIndexVersion;",
        "b_contents": "        private:\n            void _scoreString( const Tools& tools,\n                               const StringData& raw,\n                               TermFrequencyMap* term_freqs,\n                               double weight ) const;",
        "base_contents": "            void _scoreString( const Tools& tools,\n                               const StringData& raw,\n                               TermFrequencyMap* term_freqs,\n                               double weight ) const;",
        "res_region": "            TextIndexVersion _textIndexVersion;",
        "lookback": "",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 189,
        "end_line": 202,
        "merge_gen_region": null,
        "confidence": 0.618240475654602,
        "hesitated": true
    }
]