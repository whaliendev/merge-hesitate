[
    {
        "a_contents": "    static int pass;\n    class QLockTest : public ThreadedTest<3> {\n    public:\n        bool gotW;\n        QLockTest() : gotW(false), m() { }\n        void setup() { \n            if( pass == 1) { \n                m.stop_greed();\n            }\n        }\n        ~QLockTest() {\n            m.start_greed();\n        }\n    private:\n        QLock m;\n        virtual void validate() { }\n        virtual void subthread(int x) {\n            Client::initThread(\"qtest\");\n            if( x == 1 ) { \n                cout << mongo::curTimeMillis64() % 10000 << \" 1 lock_r()...\" << endl;\n                m.lock_r();\n                cout << mongo::curTimeMillis64() % 10000 << \" 1            got\" << endl;\n                sleepmillis(300);\n                m.unlock_r();\n                cout << mongo::curTimeMillis64() % 10000 << \" 1 unlock_r()\" << endl;\n            }\n            if( x == 2 || x == 4 ) {\n                sleepmillis(x*50);\n                cout << mongo::curTimeMillis64() % 10000 << \" 2 lock_W()...\" << endl;\n                m.lock_W();\n                cout << mongo::curTimeMillis64() % 10000 << \" 2            got\" << endl;\n                gotW = true;\n                m.unlock_W();\n            }\n            if( x == 3 ) {\n                sleepmillis(200);\n\n                Timer t;\n                cout << mongo::curTimeMillis64() % 10000 << \" 3 lock_r()...\" << endl;\n                m.lock_r();\n                assert( gotW );\n                cout << mongo::curTimeMillis64() % 10000 << \" 3            got\" << gotW << endl;\n                cout << t.millis() << endl;\n                m.unlock_r();\n                ASSERT( t.millis() > 50 );\n            }\n            cc().shutdown();\n        }\n    };\n",
        "b_contents": "    // Tests waiting on the TicketHolder by running many more threads than can fit into the \"hotel\", but only\n    // max _nRooms threads should ever get in at once\n    class TicketHolderWaits : public ThreadedTest<10> {\n\n        static const int checkIns = 1000;\n        static const int rooms = 3;\n\n    public:\n        TicketHolderWaits() : _hotel( rooms ), _tickets( _hotel._nRooms ) {}\n\n    private:\n\n        class Hotel {\n        public:\n            Hotel( int nRooms ) : _frontDesk( \"frontDesk\" ), _nRooms( nRooms ), _checkedIn( 0 ), _maxRooms( 0 ) {}\n\n            void checkIn(){\n                scoped_lock lk( _frontDesk );\n                _checkedIn++;\n                assert( _checkedIn <= _nRooms );\n                if( _checkedIn > _maxRooms ) _maxRooms = _checkedIn;\n            }\n\n            void checkOut(){\n                scoped_lock lk( _frontDesk );\n                _checkedIn--;\n                assert( _checkedIn >= 0 );\n            }\n\n            mongo::mutex _frontDesk;\n            int _nRooms;\n            int _checkedIn;\n            int _maxRooms;\n        };\n\n        Hotel _hotel;\n        TicketHolder _tickets;\n\n        virtual void subthread(int x) {\n\n            string threadName = ( str::stream() << \"ticketHolder\" << x );\n            Client::initThread( threadName.c_str() );\n\n            for( int i = 0; i < checkIns; i++ ){\n\n                _tickets.waitForTicket();\n                TicketHolderReleaser whenDone( &_tickets );\n\n                _hotel.checkIn();\n\n                sleepalittle();\n                if( i == checkIns - 1 ) sleepsecs( 2 );\n\n                _hotel.checkOut();\n\n                if( ( i % ( checkIns / 10 ) ) == 0 )\n                    log() << \"checked in \" << i << \" times...\" << endl;\n\n            }\n\n            cc().shutdown();\n\n        }\n\n        virtual void validate() {\n\n            // This should always be true, assuming that it takes < 1 sec for the hardware to process a check-out/check-in\n            // Time for test is then ~ #threads / _nRooms * 2 seconds\n            assert( _hotel._maxRooms == _hotel._nRooms );\n\n        }\n\n    };\n",
        "base_contents": "",
        "res_region": "    static int pass;\n    class QLockTest : public ThreadedTest<3> {\n    public:\n        bool gotW;\n        QLockTest() : gotW(false), m() { }\n        void setup() { \n            if( pass == 1) { \n                m.stop_greed();\n            }\n        }\n        ~QLockTest() {\n            m.start_greed();\n        }\n    private:\n        QLock m;\n        virtual void validate() { }\n        virtual void subthread(int x) {\n            Client::initThread(\"qtest\");\n            if( x == 1 ) { \n                cout << mongo::curTimeMillis64() % 10000 << \" 1 lock_r()...\" << endl;\n                m.lock_r();\n                cout << mongo::curTimeMillis64() % 10000 << \" 1            got\" << endl;\n                sleepmillis(300);\n                m.unlock_r();\n                cout << mongo::curTimeMillis64() % 10000 << \" 1 unlock_r()\" << endl;\n            }\n            if( x == 2 || x == 4 ) {\n                sleepmillis(x*50);\n                cout << mongo::curTimeMillis64() % 10000 << \" 2 lock_W()...\" << endl;\n                m.lock_W();\n                cout << mongo::curTimeMillis64() % 10000 << \" 2            got\" << endl;\n                gotW = true;\n                m.unlock_W();\n            }\n            if( x == 3 ) {\n                sleepmillis(200);\n\n                Timer t;\n                cout << mongo::curTimeMillis64() % 10000 << \" 3 lock_r()...\" << endl;\n                m.lock_r();\n                assert( gotW );\n                cout << mongo::curTimeMillis64() % 10000 << \" 3            got\" << gotW << endl;\n                cout << t.millis() << endl;\n                m.unlock_r();\n                ASSERT( t.millis() > 50 );\n            }\n            cc().shutdown();\n        }\n    };\n\n    // Tests waiting on the TicketHolder by running many more threads than can fit into the \"hotel\", but only\n    // max _nRooms threads should ever get in at once\n    class TicketHolderWaits : public ThreadedTest<10> {\n\n        static const int checkIns = 1000;\n        static const int rooms = 3;\n\n    public:\n        TicketHolderWaits() : _hotel( rooms ), _tickets( _hotel._nRooms ) {}\n\n    private:\n\n        class Hotel {\n        public:\n            Hotel( int nRooms ) : _frontDesk( \"frontDesk\" ), _nRooms( nRooms ), _checkedIn( 0 ), _maxRooms( 0 ) {}\n\n            void checkIn(){\n                scoped_lock lk( _frontDesk );\n                _checkedIn++;\n                assert( _checkedIn <= _nRooms );\n                if( _checkedIn > _maxRooms ) _maxRooms = _checkedIn;\n            }\n\n            void checkOut(){\n                scoped_lock lk( _frontDesk );\n                _checkedIn--;\n                assert( _checkedIn >= 0 );\n            }\n\n            mongo::mutex _frontDesk;\n            int _nRooms;\n            int _checkedIn;\n            int _maxRooms;\n        };\n\n        Hotel _hotel;\n        TicketHolder _tickets;\n\n        virtual void subthread(int x) {\n\n            string threadName = ( str::stream() << \"ticketHolder\" << x );\n            Client::initThread( threadName.c_str() );\n\n            for( int i = 0; i < checkIns; i++ ){\n\n                _tickets.waitForTicket();\n                TicketHolderReleaser whenDone( &_tickets );\n\n                _hotel.checkIn();\n\n                sleepalittle();\n                if( i == checkIns - 1 ) sleepsecs( 2 );\n\n                _hotel.checkOut();\n\n                if( ( i % ( checkIns / 10 ) ) == 0 )\n                    log() << \"checked in \" << i << \" times...\" << endl;\n\n            }\n\n            cc().shutdown();\n\n        }\n\n        virtual void validate() {\n\n            // This should always be true, assuming that it takes < 1 sec for the hardware to process a check-out/check-in\n            // Time for test is then ~ #threads / _nRooms * 2 seconds\n            assert( _hotel._maxRooms == _hotel._nRooms );\n\n        }\n\n    };\n",
        "lookback": "    class QLockTest : public ThreadedTest<3> {",
        "lookahead": "    class All : public Suite {",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 819,
        "end_line": 946,
        "merge_gen_region": " QLock : Theaded<> static pass classLock : publicreaded<> public boolW QTest : got(),() } void() if pass 1) mstopgr(); } ~ock() mstartgr(); private Q m m virtual validate { virtual sub( x) Clientinit(\"test if x 1 ) cout m::Time64 % << 1_()...\" endl mlockr cout m::Time() 10000 \" got\" endl sleepillis300 munlockr cout m::Time64 % 10000 \" unlockr <<; if x 2 x 4 { sleepillis(*); << m::_Time64 % 10000 \" 2_()...\" endl mlockW cout m::Time() 10000 \" 2\" endl got =;._W } if x 3 {m(); t cout m::Time64 % 10000 \" lockr...\" endl mlockr assert got ); <<ongocurMillis() 10000 \" got << got <<; << tm() endl munlockr ASSERT tm() 50 } ccshutdown }",
        "confidence": 0.9537370800971985,
        "hesitated": false,
        "resolved": false
    }
]