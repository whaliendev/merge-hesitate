[
    {
        "a_contents": "    if (c->argc == 1) {\n        addReplyError(c,\"You must specify a subcommand for DEBUG. Try DEBUG HELP for info.\");\n        return;\n    }\n\n    if (c->argc == 2 && !strcasecmp(c->argv[1]->ptr,\"help\")) {\n        const char *help[] = {\n            \"assert -- Crash by assertion failed.\",\n            \"crash-and-recovery <milliseconds> -- Hard crash and restart after <milliseconds> delay.\",\n            \"digest -- Outputs an hex signature representing the current DB content.\",\n            \"htstats <dbid> -- Return hash table statistics of the specified Redis database.\",\n            \"loadaof -- Flush the AOF buffers on disk and reload the AOF in memory.\",\n            \"lua-always-replicate-commands (0|1) -- Setting it to 1 makes Lua replication defaulting to replicating single commands, without the script having to enable effects replication.\",\n            \"object <key> -- Show low level info about key and associated value.\",\n            \"panic -- Crash the server simulating a panic.\",\n            \"populate <count> [prefix] [size] -- Create <count> string keys named key:<num>. If a prefix is specified is used instead of the 'key' prefix.\",\n            \"reload -- Save the RDB on disk and reload it back in memory.\",\n            \"restart -- Graceful restart: save config, db, restart.\",\n            \"sdslen <key> -- Show low level SDS string info representing key and value.\",\n            \"segfault -- Crash the server with sigsegv.\",\n            \"set-active-expire (0|1) -- Setting it to 0 disables expiring keys in background when they are not accessed (otherwise the Redis behavior). Setting it to 1 reenables back the default.\",\n            \"sleep <seconds> -- Stop the server for <seconds>. Decimals allowed.\",\n            \"structsize -- Return the size of different Redis core C structures.\",\n            \"ziplist <key> -- Show low level info about the ziplist encoding.\",\n            \"error <string> -- Return a Redis protocol error with <string> as message. Useful for clients unit tests to simulate Redis errors.\",\n            NULL\n        };\n        addReplyHelp(c, help);",
        "b_contents": "    if (!strcasecmp(c->argv[1]->ptr,\"help\")) {\n        void *blenp = addDeferredMultiBulkLength(c);\n        int blen = 0;\n        blen++; addReplyStatus(c,\n        \"DEBUG <subcommand> arg arg ... arg. Subcommands:\");\n        blen++; addReplyStatus(c,\n        \"segfault -- Crash the server with sigsegv.\");\n        blen++; addReplyStatus(c,\n        \"panic -- Crash the server simulating a panic.\");\n        blen++; addReplyStatus(c,\n        \"restart  -- Graceful restart: save config, db, restart.\");\n        blen++; addReplyStatus(c,\n        \"crash-and-recovery <milliseconds> -- Hard crash and restart after <milliseconds> delay.\");\n        blen++; addReplyStatus(c,\n        \"assert   -- Crash by assertion failed.\");\n        blen++; addReplyStatus(c,\n        \"reload   -- Save the RDB on disk and reload it back in memory.\");\n        blen++; addReplyStatus(c,\n        \"loadaof  -- Flush the AOF buffers on disk and reload the AOF in memory.\");\n        blen++; addReplyStatus(c,\n        \"object <key> -- Show low level info about key and associated value.\");\n        blen++; addReplyStatus(c,\n        \"sdslen <key> -- Show low level SDS string info representing key and value.\");\n        blen++; addReplyStatus(c,\n        \"ziplist <key> -- Show low level info about the ziplist encoding.\");\n        blen++; addReplyStatus(c,\n        \"populate <count> [prefix] [size] -- Create <count> string keys named key:<num>. If a prefix is specified is used instead of the 'key' prefix.\");\n        blen++; addReplyStatus(c,\n        \"digest   -- Outputs an hex signature representing the current DB content.\");\n        blen++; addReplyStatus(c,\n        \"sleep <seconds> -- Stop the server for <seconds>. Decimals allowed.\");\n        blen++; addReplyStatus(c,\n        \"set-active-expire (0|1) -- Setting it to 0 disables expiring keys in background when they are not accessed (otherwise the Redis behavior). Setting it to 1 reenables back the default.\");\n        blen++; addReplyStatus(c,\n        \"lua-always-replicate-commands (0|1) -- Setting it to 1 makes Lua replication defaulting to replicating single commands, without the script having to enable effects replication.\");\n        blen++; addReplyStatus(c,\n        \"error <string> -- Return a Redis protocol error with <string> as message. Useful for clients unit tests to simulate Redis errors.\");\n        blen++; addReplyStatus(c,\n        \"structsize -- Return the size of different Redis core C structures.\");\n        blen++; addReplyStatus(c,\n        \"htstats <dbid> -- Return hash table statistics of the specified Redis database.\");\n        blen++; addReplyStatus(c,\n        \"change-repl-id -- Change the replication IDs of the instance. Dangerous, should be used only for testing the replication subsystem.\");\n        setDeferredMultiBulkLength(c,blenp,blen);",
        "base_contents": "    if (c->argc == 1) {\n        addReplyError(c,\"You must specify a subcommand for DEBUG. Try DEBUG HELP for info.\");\n        return;\n    }\n\n    if (!strcasecmp(c->argv[1]->ptr,\"help\")) {\n        void *blenp = addDeferredMultiBulkLength(c);\n        int blen = 0;\n        blen++; addReplyStatus(c,\n        \"DEBUG <subcommand> arg arg ... arg. Subcommands:\");\n        blen++; addReplyStatus(c,\n        \"segfault -- Crash the server with sigsegv.\");\n        blen++; addReplyStatus(c,\n        \"panic -- Crash the server simulating a panic.\");\n        blen++; addReplyStatus(c,\n        \"restart  -- Graceful restart: save config, db, restart.\");\n        blen++; addReplyStatus(c,\n        \"crash-and-recovery <milliseconds> -- Hard crash and restart after <milliseconds> delay.\");\n        blen++; addReplyStatus(c,\n        \"assert   -- Crash by assertion failed.\");\n        blen++; addReplyStatus(c,\n        \"reload   -- Save the RDB on disk and reload it back in memory.\");\n        blen++; addReplyStatus(c,\n        \"loadaof  -- Flush the AOF buffers on disk and reload the AOF in memory.\");\n        blen++; addReplyStatus(c,\n        \"object <key> -- Show low level info about key and associated value.\");\n        blen++; addReplyStatus(c,\n        \"sdslen <key> -- Show low level SDS string info representing key and value.\");\n        blen++; addReplyStatus(c,\n        \"ziplist <key> -- Show low level info about the ziplist encoding.\");\n        blen++; addReplyStatus(c,\n        \"populate <count> [prefix] [size] -- Create <count> string keys named key:<num>. If a prefix is specified is used instead of the 'key' prefix.\");\n        blen++; addReplyStatus(c,\n        \"digest   -- Outputs an hex signature representing the current DB content.\");\n        blen++; addReplyStatus(c,\n        \"sleep <seconds> -- Stop the server for <seconds>. Decimals allowed.\");\n        blen++; addReplyStatus(c,\n        \"set-active-expire (0|1) -- Setting it to 0 disables expiring keys in background when they are not accessed (otherwise the Redis behavior). Setting it to 1 reenables back the default.\");\n        blen++; addReplyStatus(c,\n        \"lua-always-replicate-commands (0|1) -- Setting it to 1 makes Lua replication defaulting to replicating single commands, without the script having to enable effects replication.\");\n        blen++; addReplyStatus(c,\n        \"error <string> -- Return a Redis protocol error with <string> as message. Useful for clients unit tests to simulate Redis errors.\");\n        blen++; addReplyStatus(c,\n        \"structsize -- Return the size of different Redis core C structures.\");\n        blen++; addReplyStatus(c,\n        \"htstats <dbid> -- Return hash table statistics of the specified Redis database.\");\n        setDeferredMultiBulkLength(c,blenp,blen);",
        "res_region": "    if (c->argc == 2 && !strcasecmp(c->argv[1]->ptr,\"help\")) {\n        const char *help[] = {\n            \"assert -- Crash by assertion failed.\",\n            \"change-repl-id -- Change the replication IDs of the instance. Dangerous, should be used only for testing the replication subsystem.\",\n            \"crash-and-recovery <milliseconds> -- Hard crash and restart after <milliseconds> delay.\",\n            \"digest -- Outputs an hex signature representing the current DB content.\",\n            \"htstats <dbid> -- Return hash table statistics of the specified Redis database.\",\n            \"loadaof -- Flush the AOF buffers on disk and reload the AOF in memory.\",\n            \"lua-always-replicate-commands (0|1) -- Setting it to 1 makes Lua replication defaulting to replicating single commands, without the script having to enable effects replication.\",\n            \"object <key> -- Show low level info about key and associated value.\",\n            \"panic -- Crash the server simulating a panic.\",\n            \"populate <count> [prefix] [size] -- Create <count> string keys named key:<num>. If a prefix is specified is used instead of the 'key' prefix.\",\n            \"reload -- Save the RDB on disk and reload it back in memory.\",\n            \"restart -- Graceful restart: save config, db, restart.\",\n            \"sdslen <key> -- Show low level SDS string info representing key and value.\",\n            \"segfault -- Crash the server with sigsegv.\",\n            \"set-active-expire (0|1) -- Setting it to 0 disables expiring keys in background when they are not accessed (otherwise the Redis behavior). Setting it to 1 reenables back the default.\",\n            \"sleep <seconds> -- Stop the server for <seconds>. Decimals allowed.\",\n            \"structsize -- Return the size of different Redis core C structures.\",\n            \"ziplist <key> -- Show low level info about the ziplist encoding.\",\n            \"error <string> -- Return a Redis protocol error with <string> as message. Useful for clients unit tests to simulate Redis errors.\",\n            NULL\n        };\n        addReplyHelp(c, help);",
        "lookback": "        const char *help[] = {",
        "lookahead": "    } else if (!strcasecmp(c->argv[1]->ptr,\"segfault\")) {",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 285,
        "end_line": 407,
        "merge_gen_region": null,
        "confidence": 0.7656748294830322,
        "hesitated": true
    }
]