[
    {
        "a_contents": "int test_ld_conv(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    UNUSED(argv);\n    UNUSED(argc);\n    long double ld = 0.00000000000000001L;\n    const char *ldstr = \"0.00000000000000001\";\n    RedisModuleString *s1 = RedisModule_CreateStringFromLongDouble(ctx, ld, 1);\n    RedisModuleString *s2 =\n        RedisModule_CreateString(ctx, ldstr, strlen(ldstr));\n    if (RedisModule_StringCompare(s1, s2) != 0) {\n        char err[4096];\n        snprintf(err, 4096,\n            \"Failed to convert long double to string ('%s' != '%s')\",\n            RedisModule_StringPtrLen(s1, NULL),\n            RedisModule_StringPtrLen(s2, NULL));\n        RedisModule_ReplyWithError(ctx, err);\n        goto final;\n    }\n    long double ld2 = 0;\n    if (RedisModule_StringToLongDouble(s2, &ld2) == REDISMODULE_ERR) {\n        RedisModule_ReplyWithError(ctx,\n            \"Failed to convert string to long double\");\n        goto final;\n    }\n    if (ld2 != ld) {\n        char err[4096];\n        snprintf(err, 4096,\n            \"Failed to convert string to long double (%.40Lf != %.40Lf)\",\n            ld2,\n            ld);\n        RedisModule_ReplyWithError(ctx, err);\n        goto final;\n    }\n    RedisModule_ReplyWithLongDouble(ctx, ld2);\nfinal:\n    RedisModule_FreeString(ctx, s1);\n    RedisModule_FreeString(ctx, s2);\n    return REDISMODULE_OK;\n}\n",
        "b_contents": "int test_flushall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    REDISMODULE_NOT_USED(argv);\n    REDISMODULE_NOT_USED(argc);\n    RedisModule_ResetDataset(1, 0);\n    RedisModule_ReplyWithCString(ctx, \"Ok\");\n    return REDISMODULE_OK;\n}\n\nint test_dbsize(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    REDISMODULE_NOT_USED(argv);\n    REDISMODULE_NOT_USED(argc);\n    long long ll = RedisModule_DbSize(ctx);\n    RedisModule_ReplyWithLongLong(ctx, ll);\n    return REDISMODULE_OK;\n}\n\nint test_randomkey(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    REDISMODULE_NOT_USED(argv);\n    REDISMODULE_NOT_USED(argc);\n    RedisModuleString *str = RedisModule_RandomKey(ctx);\n    RedisModule_ReplyWithString(ctx, str);\n    RedisModule_FreeString(ctx, str);\n    return REDISMODULE_OK;\n}\n\nRedisModuleKey *open_key_or_reply(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode) {\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, keyname, mode);\n    if (!key) {\n        RedisModule_ReplyWithError(ctx, \"key not found\");\n        return NULL;\n    }\n    return key;\n}\n\nint test_getlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<2) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lru;\n    RedisModule_GetLRU(key, &lru);\n    RedisModule_ReplyWithLongLong(ctx, lru);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n\nint test_setlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<3) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lru;\n    if (RedisModule_StringToLongLong(argv[2], &lru) != REDISMODULE_OK) {\n        RedisModule_ReplyWithError(ctx, \"invalid idle time\");\n        return REDISMODULE_OK;\n    }\n    int was_set = RedisModule_SetLRU(key, lru)==REDISMODULE_OK;\n    RedisModule_ReplyWithLongLong(ctx, was_set);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n\nint test_getlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<2) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lfu;\n    RedisModule_GetLFU(key, &lfu);\n    RedisModule_ReplyWithLongLong(ctx, lfu);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n\nint test_setlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<3) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lfu;\n    if (RedisModule_StringToLongLong(argv[2], &lfu) != REDISMODULE_OK) {\n        RedisModule_ReplyWithError(ctx, \"invalid freq\");\n        return REDISMODULE_OK;\n    }\n    int was_set = RedisModule_SetLFU(key, lfu)==REDISMODULE_OK;\n    RedisModule_ReplyWithLongLong(ctx, was_set);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n",
        "base_contents": "",
        "res_region": "int test_ld_conv(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    UNUSED(argv);\n    UNUSED(argc);\n    long double ld = 0.00000000000000001L;\n    const char *ldstr = \"0.00000000000000001\";\n    RedisModuleString *s1 = RedisModule_CreateStringFromLongDouble(ctx, ld, 1);\n    RedisModuleString *s2 =\n        RedisModule_CreateString(ctx, ldstr, strlen(ldstr));\n    if (RedisModule_StringCompare(s1, s2) != 0) {\n        char err[4096];\n        snprintf(err, 4096,\n            \"Failed to convert long double to string ('%s' != '%s')\",\n            RedisModule_StringPtrLen(s1, NULL),\n            RedisModule_StringPtrLen(s2, NULL));\n        RedisModule_ReplyWithError(ctx, err);\n        goto final;\n    }\n    long double ld2 = 0;\n    if (RedisModule_StringToLongDouble(s2, &ld2) == REDISMODULE_ERR) {\n        RedisModule_ReplyWithError(ctx,\n            \"Failed to convert string to long double\");\n        goto final;\n    }\n    if (ld2 != ld) {\n        char err[4096];\n        snprintf(err, 4096,\n            \"Failed to convert string to long double (%.40Lf != %.40Lf)\",\n            ld2,\n            ld);\n        RedisModule_ReplyWithError(ctx, err);\n        goto final;\n    }\n    RedisModule_ReplyWithLongDouble(ctx, ld2);\nfinal:\n    RedisModule_FreeString(ctx, s1);\n    RedisModule_FreeString(ctx, s2);\n    return REDISMODULE_OK;\n}\n\nint test_flushall(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    REDISMODULE_NOT_USED(argv);\n    REDISMODULE_NOT_USED(argc);\n    RedisModule_ResetDataset(1, 0);\n    RedisModule_ReplyWithCString(ctx, \"Ok\");\n    return REDISMODULE_OK;\n}\n\nint test_dbsize(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    REDISMODULE_NOT_USED(argv);\n    REDISMODULE_NOT_USED(argc);\n    long long ll = RedisModule_DbSize(ctx);\n    RedisModule_ReplyWithLongLong(ctx, ll);\n    return REDISMODULE_OK;\n}\n\nint test_randomkey(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    REDISMODULE_NOT_USED(argv);\n    REDISMODULE_NOT_USED(argc);\n    RedisModuleString *str = RedisModule_RandomKey(ctx);\n    RedisModule_ReplyWithString(ctx, str);\n    RedisModule_FreeString(ctx, str);\n    return REDISMODULE_OK;\n}\n\nRedisModuleKey *open_key_or_reply(RedisModuleCtx *ctx, RedisModuleString *keyname, int mode) {\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, keyname, mode);\n    if (!key) {\n        RedisModule_ReplyWithError(ctx, \"key not found\");\n        return NULL;\n    }\n    return key;\n}\n\nint test_getlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<2) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lru;\n    RedisModule_GetLRU(key, &lru);\n    RedisModule_ReplyWithLongLong(ctx, lru);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n\nint test_setlru(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<3) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lru;\n    if (RedisModule_StringToLongLong(argv[2], &lru) != REDISMODULE_OK) {\n        RedisModule_ReplyWithError(ctx, \"invalid idle time\");\n        return REDISMODULE_OK;\n    }\n    int was_set = RedisModule_SetLRU(key, lru)==REDISMODULE_OK;\n    RedisModule_ReplyWithLongLong(ctx, was_set);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n\nint test_getlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<2) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lfu;\n    RedisModule_GetLFU(key, &lfu);\n    RedisModule_ReplyWithLongLong(ctx, lfu);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n\nint test_setlfu(RedisModuleCtx *ctx, RedisModuleString **argv, int argc)\n{\n    if (argc<3) {\n        RedisModule_WrongArity(ctx);\n        return REDISMODULE_OK;\n    }\n    RedisModuleKey *key = open_key_or_reply(ctx, argv[1], REDISMODULE_READ|REDISMODULE_OPEN_KEY_NOTOUCH);\n    mstime_t lfu;\n    if (RedisModule_StringToLongLong(argv[2], &lfu) != REDISMODULE_OK) {\n        RedisModule_ReplyWithError(ctx, \"invalid freq\");\n        return REDISMODULE_OK;\n    }\n    int was_set = RedisModule_SetLFU(key, lfu)==REDISMODULE_OK;\n    RedisModule_ReplyWithLongLong(ctx, was_set);\n    RedisModule_CloseKey(key);\n    return REDISMODULE_OK;\n}\n",
        "lookback": "    UNUSED(argv);",
        "lookahead": "int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 44,
        "end_line": 187,
        "merge_gen_region": null,
        "confidence": 0.8707982897758484,
        "hesitated": true
    },
    {
        "a_contents": "    if (RedisModule_CreateCommand(ctx,\"test.ld_conversion\", test_ld_conv, \"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;",
        "b_contents": "    if (RedisModule_CreateCommand(ctx,\"test.flushall\", test_flushall,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.dbsize\", test_dbsize,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.randomkey\", test_randomkey,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.setlru\", test_setlru,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.getlru\", test_getlru,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.setlfu\", test_setlfu,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.getlfu\", test_getlfu,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n",
        "base_contents": "",
        "res_region": "    if (RedisModule_CreateCommand(ctx,\"test.ld_conversion\", test_ld_conv, \"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.flushall\", test_flushall,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.dbsize\", test_dbsize,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.randomkey\", test_randomkey,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.setlru\", test_setlru,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.getlru\", test_getlru,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.setlfu\", test_setlfu,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n    if (RedisModule_CreateCommand(ctx,\"test.getlfu\", test_getlfu,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n",
        "lookback": "        return REDISMODULE_ERR;",
        "lookahead": "    return REDISMODULE_OK;",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 198,
        "end_line": 219,
        "merge_gen_region": "MODULEERRifelsedex_;___elseif",
        "confidence": 0.9021908044815063,
        "hesitated": false,
        "resolved": false
    }
]