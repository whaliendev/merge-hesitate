[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2021 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <utility>\n#include <vector>\n\n#include \"torch/extension.h\"\n#include \"torch/script.h\"\n#include \"modules/prediction/evaluator/evaluator.h\"\n#include \"modules/prediction/pipeline/vector_net.h\"\n\nnamespace apollo {\nnamespace prediction {\n\nclass VectornetEvaluator : public Evaluator {\n public:\n  /**\n   * @brief Constructor\n   */\n  VectornetEvaluator();\n\n  /**\n   * @brief Destructor\n   */\n  virtual ~VectornetEvaluator() = default;\n\n  /**\n   * @brief Clear obstacle feature map\n   */\n  void Clear();\n\n  /**\n   * @brief Override Evaluate\n   * @param Obstacle pointer\n   * @param Obstacles container\n   */\n  bool Evaluate(Obstacle* obstacle_ptr,\n                ObstaclesContainer* obstacles_container) override;\n\n  /**\n   * @brief Extract all obstacles history\n   * @param Obstacles container\n   *        Feature container in a vector for receiving the obstacle history\n   */\n  bool ExtractObstaclesHistory(\n      Obstacle* obstacle_ptr, ObstaclesContainer* obstacles_container,\n      std::vector<std::pair<double, double>>* curr_pos_history,\n      std::vector<std::pair<double, double>>* all_obs_length,\n      std::vector<std::vector<std::pair<double, double>>>* all_obs_pos_history);\n\n  /**\n   * @brief Get the name of evaluator.\n   */\n  std::string GetName() override { return \"VECTORNET_EVALUATOR\"; }\n\n private:\n  /**\n   * @brief Load model file\n   */\n  void LoadModel();\n\n private:\n  torch::jit::script::Module torch_vehicle_model_;\n  at::Tensor torch_default_output_tensor_;\n  torch::Device device_;\n  VectorNet vector_net_;\n};\n\n}  // namespace prediction\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2021 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <utility>\n#include <vector>\n\n#include \"torch/extension.h\"\n#include \"torch/script.h\"\n#include \"modules/prediction/evaluator/evaluator.h\"\n#include \"modules/prediction/pipeline/vector_net.h\"\n\nnamespace apollo {\nnamespace prediction {\n\nclass VectornetEvaluator : public Evaluator {\n public:\n  /**\n   * @brief Constructor\n   */\n  VectornetEvaluator();\n\n  /**\n   * @brief Destructor\n   */\n  virtual ~VectornetEvaluator() = default;\n\n  /**\n   * @brief Clear obstacle feature map\n   */\n  void Clear();\n\n  /**\n   * @brief Process obstacle position to vector\n   * @param Obstacles pointer\n   * @param Obstacles container\n   * @param Tensor: target obstacle position\n   * @param Tensor: target obstacle position step\n   * @param Tensor: vector mask\n   * @param Tensor: all obstacle position\n   * @param Tensor: all obstacle p_id\n   * @param Tensor: all obstacle length\n   */\n  bool VectornetProcessObstaclePosition(Obstacle* obstacle_ptr,\n                                    ObstaclesContainer* obstacles_container,\n                                    torch::Tensor* ptr_target_obs_pos,\n                                    torch::Tensor* ptr_target_obs_pos_step,\n                                    torch::Tensor* ptr_vector_mask,\n                                    torch::Tensor* ptr_all_obstacle_pos,\n                                    torch::Tensor* ptr_all_obs_p_id,\n                                    torch::Tensor* ptr_obs_length);\n\n  /**\n  * @brief Process map data to vector\n  * @param FeatureVector: map feature vector\n  * @param int: obstacle number\n  * @param PidVector: map p_id vector\n  * @param Tensor: map data\n  * @param Tensor: map data p_id\n  */\n  bool VectornetProcessMapData(FeatureVector *map_feature,\n                               PidVector *map_p_id,\n                               const int obs_num,\n                               torch::Tensor* ptr_map_data,\n                               torch::Tensor* ptr_all_map_p_id,\n                               torch::Tensor* ptr_vector_mask);\n\n  /**\n   * @brief Override Evaluate\n   * @param Obstacle pointer\n   * @param Obstacles container\n   */\n  bool Evaluate(Obstacle* obstacle_ptr,\n                ObstaclesContainer* obstacles_container) override;\n\n  /**\n   * @brief Extract all obstacles history\n   * @param Obstacles container\n   *        Feature container in a vector for receiving the obstacle history\n   */\n  bool ExtractObstaclesHistory(\n      Obstacle* obstacle_ptr, ObstaclesContainer* obstacles_container,\n      std::vector<std::pair<double, double>>* curr_pos_history,\n      std::vector<std::pair<double, double>>* all_obs_length,\n      std::vector<std::vector<std::pair<double, double>>>* all_obs_pos_history,\n      torch::Tensor* vector_mask);\n\n  /**\n   * @brief Get the name of evaluator.\n   */\n  std::string GetName() override { return \"VECTORNET_EVALUATOR\"; }\n\n private:\n  /**\n   * @brief Load model file\n   */\n  void LoadModel();\n\n private:\n  torch::jit::script::Module torch_vehicle_model_;\n  at::Tensor torch_default_output_tensor_;\n  torch::Device device_;\n  VectorNet vector_net_;\n};\n\n}  // namespace prediction\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2021 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <utility>\n#include <vector>\n\n#include \"torch/extension.h\"\n#include \"torch/script.h\"\n#include \"modules/prediction/evaluator/evaluator.h\"\n#include \"modules/prediction/pipeline/vector_net.h\"\n\nnamespace apollo {\nnamespace prediction {\n\nclass VectornetEvaluator : public Evaluator {\n public:\n  /**\n   * @brief Constructor\n   */\n  VectornetEvaluator();\n\n  /**\n   * @brief Destructor\n   */\n  virtual ~VectornetEvaluator() = default;\n\n  /**\n   * @brief Clear obstacle feature map\n   */\n  void Clear();\n\n  /**\n   * @brief Process obstacle position to vector\n   * @param Obstacles pointer\n   * @param Obstacles container\n   * @param Tensor: target obstacle position\n   * @param Tensor: target obstacle position step\n   * @param Tensor: vector mask\n   * @param Tensor: all obstacle position\n   * @param Tensor: all obstacle p_id\n   * @param Tensor: all obstacle length\n   */\n  bool VectornetProcessObstaclePosition(Obstacle* obstacle_ptr,\n                                    ObstaclesContainer* obstacles_container,\n                                    torch::Tensor* ptr_target_obs_pos,\n                                    torch::Tensor* ptr_target_obs_pos_step,\n                                    torch::Tensor* ptr_vector_mask,\n                                    torch::Tensor* ptr_all_obstacle_pos,\n                                    torch::Tensor* ptr_all_obs_p_id,\n                                    torch::Tensor* ptr_obs_length);\n\n  /**\n  * @brief Process map data to vector\n  * @param FeatureVector: map feature vector\n  * @param int: obstacle number\n  * @param PidVector: map p_id vector\n  * @param Tensor: map data\n  * @param Tensor: map data p_id\n  */\n  bool VectornetProcessMapData(FeatureVector *map_feature,\n                               PidVector *map_p_id,\n                               const int obs_num,\n                               torch::Tensor* ptr_map_data,\n                               torch::Tensor* ptr_all_map_p_id,\n                               torch::Tensor* ptr_vector_mask);\n\n  /**\n   * @brief Override Evaluate\n   * @param Obstacle pointer\n   * @param Obstacles container\n   */\n  bool Evaluate(Obstacle* obstacle_ptr,\n                ObstaclesContainer* obstacles_container) override;\n\n  /**\n   * @brief Extract all obstacles history\n   * @param Obstacles container\n   *        Feature container in a vector for receiving the obstacle history\n   */\n  bool ExtractObstaclesHistory(\n      Obstacle* obstacle_ptr, ObstaclesContainer* obstacles_container,\n      std::vector<std::pair<double, double>>* curr_pos_history,\n      std::vector<std::pair<double, double>>* all_obs_length,\n      std::vector<std::vector<std::pair<double, double>>>* all_obs_pos_history,\n      torch::Tensor* vector_mask);\n\n  /**\n   * @brief Get the name of evaluator.\n   */\n  std::string GetName() override { return \"VECTORNET_EVALUATOR\"; }\n\n private:\n  /**\n   * @brief Load model file\n   */\n  void LoadModel();\n\n private:\n  torch::jit::script::Module torch_vehicle_model_;\n  at::Tensor torch_default_output_tensor_;\n  torch::Device device_;\n  VectorNet vector_net_;\n};\n\n}  // namespace prediction\n}  // namespace apollo",
        "lookback": " * Copyright 2021 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "base",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 211,
        "merge_gen_region": " Copyright021 Alo Authors All Reserved/****************************************************************************** Copyright021 Apol Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except in with the. * may a of License * may a of License * *://../licensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludestring # <>includeutility # <> # <> # <> # <>includevector # \"tor/extensionh # \"tor/scripth # \"///atorevalu.\"includemodulespredictionpipelinevectornethh namespacepol { namespace { VectorEvaluator publicvalu { public /** @ Constructor VectorEvaluator /** @ Destructor virtualVectorEvaluator =; *brief ob feature map void(); * @ Override * @ Ob pointer @ Obstacle container bool(stacle ob_,,stacleContainer obscontainer override /** @ Extract obs *paramstacles *paramstacles * container Feature in vector receiving ob history boolObs(stacleHistory Ob*stacleptr Obs*staclescontainer stdvectorstdpairdouble double* currposhistory stdvectorstdpairdouble double* allobslength",
        "confidence": 0.9241734743118286,
        "hesitated": false,
        "resolved": false
    }
]