[
    {
        "a_contents": "/*\n * Copyright (c) 2010, Willow Garage, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the Willow Garage, Inc. nor the names of its\n *       contributors may be used to endorse or promote products derived from\n *       this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include <stdio.h>\n\n#include <tf2/buffer_core.h>\n#include \"tf2/time.h\"\n#include <boost/lexical_cast.hpp>\n#include <chrono>\n\nusing std::chrono::system_clock;\nusing std::chrono::steady_clock;\nusing std::chrono::high_resolution_clock;\n\nint main(int argc, char** argv)\n{\n  uint32_t num_levels = 10;\n  // if (argc > 1)\n  // {\n  //   num_levels = boost::lexical_cast<uint32_t>(argv[1]);\n  // }\n\n  tf2::BufferCore bc;\n  geometry_msgs::TransformStamped t;\n  t.header.stamp = 1;\n  t.header.frame_id = \"root\";\n  t.child_frame_id = \"0\";\n  t.transform.translation.x = 1;\n  t.transform.rotation.w = 1.0;\n  bc.setTransform(t, \"me\");\n  t.header.stamp = 2;\n  bc.setTransform(t, \"me\");\n\n  for (uint32_t i = 1; i < num_levels/2; ++i)\n  {\n    for (uint32_t j = 1; j < 3; ++j)\n    {\n      std::stringstream parent_ss;\n      parent_ss << (i - 1);\n      std::stringstream child_ss;\n      child_ss << i;\n\n      t.header.stamp = tf2::Time(j);\n      t.header.frame_id = parent_ss.str();\n      t.child_frame_id = child_ss.str();\n      bc.setTransform(t, \"me\");\n    }\n  }\n\n  t.header.frame_id = \"root\";\n  std::stringstream ss;\n  ss << num_levels/2;\n  t.header.stamp = 1; \n  t.child_frame_id = ss.str();\n  bc.setTransform(t, \"me\");\n  t.header.stamp = 2;\n  bc.setTransform(t, \"me\");\n\n  for (uint32_t i = num_levels/2 + 1; i < num_levels; ++i)\n  {\n    for (uint32_t j = 1; j < 3; ++j)\n    {\n      std::stringstream parent_ss;\n      parent_ss << (i - 1);\n      std::stringstream child_ss;\n      child_ss << i;\n\n      t.header.stamp = tf2::Time(j);\n      t.header.frame_id = parent_ss.str();\n      t.child_frame_id = child_ss.str();\n      bc.setTransform(t, \"me\");\n    }\n  }\n\n  //logInfo_STREAM(bc.allFramesAsYAML());\n\n  std::string v_frame0 = boost::lexical_cast<std::string>(num_levels - 1);\n  std::string v_frame1 = boost::lexical_cast<std::string>(num_levels/2 - 1);\n  printf(\"%s to %s\\n\", v_frame0.c_str(), v_frame1.c_str());\n  geometry_msgs::TransformStamped out_t;\n\n  const uint32_t count = 1000000;\n  printf(\"Doing %d %d-level tests\\n\", count, num_levels);\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, 0);\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(0) took: %f (secs) for an average of: %.9f (secs)\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(1));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(1) took: %f for an average of: %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(1.5));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(1.5) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(2));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(2) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(0));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(0) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(1));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(1) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(1.5 * 1e9));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(1.5) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(2));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(2) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n}",
        "b_contents": "/*\n * Copyright (c) 2010, Willow Garage, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the Willow Garage, Inc. nor the names of its\n *       contributors may be used to endorse or promote products derived from\n *       this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include <stdio.h>\n\n#include <tf2/buffer_core.h>\n#include \"tf2/time.h\"\n#include <boost/lexical_cast.hpp>\n#include <chrono>\n\nusing std::chrono::system_clock;\nusing std::chrono::steady_clock;\nusing std::chrono::high_resolution_clock;\n\nint main(int argc, char** argv)\n{\n  int num_levels = 10;\n  // if (argc > 1)\n  // {\n  //   num_levels = boost::lexical_cast<uint32_t>(argv[1]);\n  // }\n\n  tf2::BufferCore bc;\n  geometry_msgs::TransformStamped t;\n  t.header.stamp = 1;\n  t.header.frame_id = \"root\";\n  t.child_frame_id = \"0\";\n  t.transform.translation.x = 1;\n  t.transform.rotation.w = 1.0;\n  bc.setTransform(t, \"me\");\n  t.header.stamp = 2;\n  bc.setTransform(t, \"me\");\n\n  for (uint32_t i = 1; i < num_levels/2; ++i)\n  {\n    for (uint32_t j = 1; j < 3; ++j)\n    {\n      std::stringstream parent_ss;\n      parent_ss << (i - 1);\n      std::stringstream child_ss;\n      child_ss << i;\n\n      t.header.stamp = tf2::Time(j);\n      t.header.frame_id = parent_ss.str();\n      t.child_frame_id = child_ss.str();\n      bc.setTransform(t, \"me\");\n    }\n  }\n\n  t.header.frame_id = \"root\";\n  std::stringstream ss;\n  ss << num_levels/2;\n  t.header.stamp = 1; \n  t.child_frame_id = ss.str();\n  bc.setTransform(t, \"me\");\n  t.header.stamp = 2;\n  bc.setTransform(t, \"me\");\n\n  for (uint32_t i = num_levels/2 + 1; i < num_levels; ++i)\n  {\n    for (uint32_t j = 1; j < 3; ++j)\n    {\n      std::stringstream parent_ss;\n      parent_ss << (i - 1);\n      std::stringstream child_ss;\n      child_ss << i;\n\n      t.header.stamp = tf2::Time(j);\n      t.header.frame_id = parent_ss.str();\n      t.child_frame_id = child_ss.str();\n      bc.setTransform(t, \"me\");\n    }\n  }\n\n  //logInfo_STREAM(bc.allFramesAsYAML());\n\n  std::string v_frame0 = boost::lexical_cast<std::string>(num_levels - 1);\n  std::string v_frame1 = boost::lexical_cast<std::string>(num_levels/2 - 1);\n  printf(\"%s to %s\\n\", v_frame0.c_str(), v_frame1.c_str());\n  geometry_msgs::TransformStamped out_t;\n\n  const int count = 1000000;\n  printf(\"Doing %d %d-level tests\\n\", count, num_levels);\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, 0);\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(0) took: %f (secs) for an average of: %.9f (secs)\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(1));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(1) took: %f for an average of: %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(1.5));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(1.5) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(2));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(2) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(0));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(0) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(1));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(1) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(1.5 * 1e9));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(1.5) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(2));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(2) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n}",
        "base_contents": "",
        "res_region": "/*\n * Copyright (c) 2010, Willow Garage, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the Willow Garage, Inc. nor the names of its\n *       contributors may be used to endorse or promote products derived from\n *       this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include <stdio.h>\n\n#include <tf2/buffer_core.h>\n#include \"tf2/time.h\"\n#include <boost/lexical_cast.hpp>\n#include <chrono>\n\nusing std::chrono::system_clock;\nusing std::chrono::steady_clock;\nusing std::chrono::high_resolution_clock;\n\nint main(int argc, char** argv)\n{\n  int num_levels = 10;\n  // if (argc > 1)\n  // {\n  //   num_levels = boost::lexical_cast<uint32_t>(argv[1]);\n  // }\n\n  tf2::BufferCore bc;\n  geometry_msgs::TransformStamped t;\n  t.header.stamp = 1;\n  t.header.frame_id = \"root\";\n  t.child_frame_id = \"0\";\n  t.transform.translation.x = 1;\n  t.transform.rotation.w = 1.0;\n  bc.setTransform(t, \"me\");\n  t.header.stamp = 2;\n  bc.setTransform(t, \"me\");\n\n  for (uint32_t i = 1; i < num_levels/2; ++i)\n  {\n    for (uint32_t j = 1; j < 3; ++j)\n    {\n      std::stringstream parent_ss;\n      parent_ss << (i - 1);\n      std::stringstream child_ss;\n      child_ss << i;\n\n      t.header.stamp = tf2::Time(j);\n      t.header.frame_id = parent_ss.str();\n      t.child_frame_id = child_ss.str();\n      bc.setTransform(t, \"me\");\n    }\n  }\n\n  t.header.frame_id = \"root\";\n  std::stringstream ss;\n  ss << num_levels/2;\n  t.header.stamp = 1; \n  t.child_frame_id = ss.str();\n  bc.setTransform(t, \"me\");\n  t.header.stamp = 2;\n  bc.setTransform(t, \"me\");\n\n  for (uint32_t i = num_levels/2 + 1; i < num_levels; ++i)\n  {\n    for (uint32_t j = 1; j < 3; ++j)\n    {\n      std::stringstream parent_ss;\n      parent_ss << (i - 1);\n      std::stringstream child_ss;\n      child_ss << i;\n\n      t.header.stamp = tf2::Time(j);\n      t.header.frame_id = parent_ss.str();\n      t.child_frame_id = child_ss.str();\n      bc.setTransform(t, \"me\");\n    }\n  }\n\n  //logInfo_STREAM(bc.allFramesAsYAML());\n\n  std::string v_frame0 = boost::lexical_cast<std::string>(num_levels - 1);\n  std::string v_frame1 = boost::lexical_cast<std::string>(num_levels/2 - 1);\n  printf(\"%s to %s\\n\", v_frame0.c_str(), v_frame1.c_str());\n  geometry_msgs::TransformStamped out_t;\n\n  const int count = 1000000;\n  printf(\"Doing %d %d-level tests\\n\", count, num_levels);\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, 0);\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(0) took: %f (secs) for an average of: %.9f (secs)\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(1));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(1) took: %f for an average of: %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(1.5));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(1.5) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      out_t = bc.lookupTransform(v_frame1, v_frame0, tf2::Time(2));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"lookupTransform at Time(2) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(0));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(0) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(1));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(1) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(1.5 * 1e9));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(1.5) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n\n#if 01\n  {\n    steady_clock::time_point start = steady_clock::now();\n    for (uint32_t i = 0; i < count; ++i)\n    {\n      bc.canTransform(v_frame1, v_frame0, tf2::Time(2));\n    }\n    steady_clock::time_point end = steady_clock::now();\n    double dur = std::chrono::duration_cast<std::chrono::duration<double>>(end - start).count();\n    printf(\"canTransform at Time(2) took %f for an average of %.9f\\n\", dur, dur / (double)count);\n  }\n#endif\n}",
        "lookback": " * Copyright (c) 2010, Willow Garage, Inc.",
        "lookahead": "",
        "label": [
            "base",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 431,
        "merge_gen_region": " Copyrightc 2010 Wlowar,. * Copyrightc 2010 Wlowar,. All reserved * Redistribution use source binary, or * modification are provided that following are: * * Redistributions source must retain above * copyright notice this of and following. * Redistributions binary form reproduce above * copyright notice, list conditions the following in the documentation/ other provided the distribution * Neither name the Wlowar,. theil Gage Inc nor names its contributors be to or promote derived * software specific written. * THIS IS BY COPYRIGHT AND CONTRIBUTORSAS\" AND EXPRESS IMPLIED,, NOT TO THE IMPLIED OF MERCHANTABILITY FITNESS A PURPOSE ARE. NO SHALL COPYRIGHT OR OR BE LIABLE ANY,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,_",
        "confidence": 0.9251888990402222,
        "hesitated": false,
        "resolved": false
    }
]