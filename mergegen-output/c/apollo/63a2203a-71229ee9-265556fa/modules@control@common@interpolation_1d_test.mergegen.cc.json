[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/control/common/interpolation_1d.h\"\n\n#include <string>\n#include <utility>\n\n#include \"gmock/gmock.h\"\n#include \"modules/common/log.h\"\n#include \"modules/common/util/file.h\"\n#include \"modules/control/proto/control_conf.pb.h\"\n\nusing ::testing::ElementsAre;\n\nnamespace apollo {\nnamespace control {\n\nclass Interpolation1DTest : public ::testing::Test {\n public:\n  virtual void SetUp() {\n    std::string control_conf_file =\n        \"modules/control/testdata/conf/lincoln.pb.txt\";\n    CHECK(::apollo::common::util::GetProtoFromFile(control_conf_file,\n                                                   &control_conf_));\n  }\n\n protected:\n  ControlConf control_conf_;\n};\n\nTEST_F(Interpolation1DTest, normal) {\n  Interpolation1D::DataType xy{{0, 0}, {15, 12}, {30, 17}};\n\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n\n  EXPECT_DOUBLE_EQ(4.7777777777777777, estimator.Interpolate(5));\n  EXPECT_DOUBLE_EQ(8.7777777777777786, estimator.Interpolate(10));\n  EXPECT_DOUBLE_EQ(14.444444444444445, estimator.Interpolate(20));\n\n  // out of x range\n  EXPECT_DOUBLE_EQ(0, estimator.Interpolate(-1));\n  EXPECT_DOUBLE_EQ(17, estimator.Interpolate(30));\n}\n\nTEST_F(Interpolation1DTest, unordered) {\n  Interpolation1D::DataType xy{{15, 12}, {5, 5}, {40, 25}, {30, 17}};\n\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n}\n\nTEST_F(Interpolation1DTest, gain_scheduler) {\n  const auto& gain_scheduler =\n      control_conf_.lat_controller_conf().lat_err_gain_scheduler();\n  AINFO << \"Lateral Error Gain Scheduler:\" << gain_scheduler.DebugString();\n\n  Interpolation1D::DataType xy;\n\n  for (const auto& scheduler : gain_scheduler.scheduler()) {\n    xy.push_back(std::make_pair(scheduler.speed(), scheduler.ratio()));\n  }\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n}\n\n}  // namespace control\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/control/common/interpolation_1d.h\"\n\n#include <string>\n#include <utility>\n\n#include \"gmock/gmock.h\"\n#include \"modules/common/log.h\"\n#include \"modules/common/util/file.h\"\n#include \"modules/control/proto/control_conf.pb.h\"\n\nusing ::testing::ElementsAre;\n\nnamespace apollo {\nnamespace control {\n\nclass Interpolation1DTest : public ::testing::Test {\n public:\n  virtual void SetUp() {\n    std::string control_conf_file =\n        \"modules/control/testdata/conf/lincoln.pb.txt\";\n    CHECK(common::util::GetProtoFromFile(control_conf_file,\n                                                   &control_conf_));\n  }\n\n protected:\n  ControlConf control_conf_;\n};\n\nTEST_F(Interpolation1DTest, normal) {\n  Interpolation1D::DataType xy{{0, 0}, {15, 12}, {30, 17}};\n\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n\n  EXPECT_DOUBLE_EQ(4.7777777777777777, estimator.Interpolate(5));\n  EXPECT_DOUBLE_EQ(8.7777777777777786, estimator.Interpolate(10));\n  EXPECT_DOUBLE_EQ(14.444444444444445, estimator.Interpolate(20));\n\n  // out of x range\n  EXPECT_DOUBLE_EQ(0, estimator.Interpolate(-1));\n  EXPECT_DOUBLE_EQ(17, estimator.Interpolate(30));\n}\n\nTEST_F(Interpolation1DTest, unordered) {\n  Interpolation1D::DataType xy{{15, 12}, {5, 5}, {40, 25}, {30, 17}};\n\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n}\n\nTEST_F(Interpolation1DTest, gain_scheduler) {\n  const auto& gain_scheduler =\n      control_conf_.lat_controller_conf().lat_err_gain_scheduler();\n  AINFO << \"Lateral Error Gain Scheduler:\" << gain_scheduler.DebugString();\n\n  Interpolation1D::DataType xy;\n\n  for (const auto& scheduler : gain_scheduler.scheduler()) {\n    xy.push_back(std::make_pair(scheduler.speed(), scheduler.ratio()));\n  }\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n}\n\n}  // namespace control\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/control/common/interpolation_1d.h\"\n\n#include <string>\n#include <utility>\n\n#include \"gmock/gmock.h\"\n#include \"modules/common/log.h\"\n#include \"modules/common/util/file.h\"\n#include \"modules/control/proto/control_conf.pb.h\"\n\nusing ::testing::ElementsAre;\n\nnamespace apollo {\nnamespace control {\n\nclass Interpolation1DTest : public ::testing::Test {\n public:\n  virtual void SetUp() {\n    std::string control_conf_file =\n        \"modules/control/testdata/conf/lincoln.pb.txt\";\n    CHECK(common::util::GetProtoFromFile(control_conf_file,\n                                                   &control_conf_));\n  }\n\n protected:\n  ControlConf control_conf_;\n};\n\nTEST_F(Interpolation1DTest, normal) {\n  Interpolation1D::DataType xy{{0, 0}, {15, 12}, {30, 17}};\n\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n\n  EXPECT_DOUBLE_EQ(4.7777777777777777, estimator.Interpolate(5));\n  EXPECT_DOUBLE_EQ(8.7777777777777786, estimator.Interpolate(10));\n  EXPECT_DOUBLE_EQ(14.444444444444445, estimator.Interpolate(20));\n\n  // out of x range\n  EXPECT_DOUBLE_EQ(0, estimator.Interpolate(-1));\n  EXPECT_DOUBLE_EQ(17, estimator.Interpolate(30));\n}\n\nTEST_F(Interpolation1DTest, unordered) {\n  Interpolation1D::DataType xy{{15, 12}, {5, 5}, {40, 25}, {30, 17}};\n\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n}\n\nTEST_F(Interpolation1DTest, gain_scheduler) {\n  const auto& gain_scheduler =\n      control_conf_.lat_controller_conf().lat_err_gain_scheduler();\n  AINFO << \"Lateral Error Gain Scheduler:\" << gain_scheduler.DebugString();\n\n  Interpolation1D::DataType xy;\n\n  for (const auto& scheduler : gain_scheduler.scheduler()) {\n    xy.push_back(std::make_pair(scheduler.speed(), scheduler.ratio()));\n  }\n  Interpolation1D estimator;\n  EXPECT_TRUE(estimator.Init(xy));\n\n  for (unsigned i = 0; i < xy.size(); i++) {\n    EXPECT_DOUBLE_EQ(xy[i].second, estimator.Interpolate(xy[i].first));\n  }\n}\n\n}  // namespace control\n}  // namespace apollo",
        "lookback": " * Copyright 2017 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "base",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 191,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the License, 20theLicense *\"); you not this except in with the. * may a of License * may a of License * *://../licensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License the for specific governing and limitations the License *****************************************************************************/includemodulescontrolcommoninter_dh # <>includeutility # \"gmockgmockh # \"modulescommonlogh # \"/commonutilfileh # \"modulescontrolprotocontrolconfpbh usingtesting::Are namespacepol { control classpolationD : ::::Test public: void() stdstring___ =modulescontroltest///col..\";(::ol::::utilGetFromFilecontrolconffile &__)); }: Control controlconf };_(1Test normal { Inter1DDataType{{,},15 12 {30 17 Inter1Dimator EXPECTTRUEest.()); (unsigned =; <.(); i {___(77777777,imatorInter());__(.7777777786 est.polate10 EXPECTDOUBLEEQ1444444444,imatorInter()); out x",
        "confidence": 0.954913318157196,
        "hesitated": false,
        "resolved": false
    }
]