[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n#include <memory>\n\n#include \"modules/perception/camera/lib/obstacle/preprocessor/get_image_data/get_image_data.h\"\n#include \"modules/perception/camera/lib/obstacle/preprocessor/resize_and_normalize/resize_and_normalize.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraDetectionPreprocessor : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using PluginType = pipeline::PluginType;\n\n public:\n  CameraDetectionPreprocessor() = default;\n\n  virtual ~CameraDetectionPreprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(DataFrame* data_frame, float* k_inv, float* image_data_array);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  //   CameraDetectionPreprocessorConfig camera_detection_preprocessor_config_;\n\n  std::unique_ptr<GetImageData> get_image_data_;\n  std::unique_ptr<ReSizeAndNormalize> resize_and_normalize_;\n};  // class CameraDetectionPreprocessor\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/camera/lib/obstacle/preprocessor/get_image_data/get_image_data.h\"\n#include \"modules/perception/camera/lib/obstacle/preprocessor/resize_and_normalize/resize_and_normalize.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraDetectionPreprocessor : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using PluginType = pipeline::PluginType;\n\n public:\n  CameraDetectionPreprocessor() = default;\n\n  virtual ~CameraDetectionPreprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(DataFrame* data_frame, float* k_inv, float* image_data_array);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  //   CameraDetectionPreprocessorConfig camera_detection_preprocessor_config_;\n\n  std::unique_ptr<GetImageData> get_image_data_;\n  std::unique_ptr<ReSizeAndNormalize> resize_and_normalize_;\n\n};  // class CameraDetectionPreprocessor\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n#include <memory>\n\n#include \"modules/perception/camera/lib/obstacle/preprocessor/get_image_data/get_image_data.h\"\n#include \"modules/perception/camera/lib/obstacle/preprocessor/resize_and_normalize/resize_and_normalize.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraDetectionPreprocessor : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using PluginType = pipeline::PluginType;\n\n public:\n  CameraDetectionPreprocessor() = default;\n\n  virtual ~CameraDetectionPreprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(DataFrame* data_frame, float* k_inv, float* image_data_array);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  //   CameraDetectionPreprocessorConfig camera_detection_preprocessor_config_;\n\n  std::unique_ptr<GetImageData> get_image_data_;\n  std::unique_ptr<ReSizeAndNormalize> resize_and_normalize_;\n};  // class CameraDetectionPreprocessor\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 121,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Apol Authors All Reserved * Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * *://../licensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludestring # <>includememory # \"//ceptioncameralibob/processorgetimagedatagetimagedatah # \"/per///staclepre/___//_.\"includemodulesper///staclepre/______.\"includemodulesper///staclepre/____.\"includemodulesper////////////////////////////////////////___.\"includemodulesper////////__.\"includemodulesper/////////////////////////////",
        "confidence": 0.9491982460021973,
        "hesitated": false,
        "resolved": false
    }
]