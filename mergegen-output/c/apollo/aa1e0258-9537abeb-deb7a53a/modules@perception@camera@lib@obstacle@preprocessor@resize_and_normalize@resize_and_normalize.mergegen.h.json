[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include <opencv2/opencv.hpp>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass ReSizeAndNormalize : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n\n public:\n  ReSizeAndNormalize() = default;\n\n  explicit ReSizeAndNormalize(const PluginConfig& plugin_config);\n\n  virtual ~ReSizeAndNormalize() = default;\n\n  bool Process(const cv::Mat &im, float *image_data_array);\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void Resize(const cv::Mat &img, int resized_h, int resized_w,\n              cv::Mat *resize_img);\n\nvoid Normalize(const std::vector<float> &mean,\n                                   const std::vector<float> &std, float scale,\n                                   cv::Mat *im);\n\n  void Mat2Vec(const cv::Mat &im, float *image_data_array);\n\n  int resized_width_;\n  int resized_height_;\n  std::vector<float> mean_;\n  std::vector<float> std_;\n  float scale_;\n};  // class ReSizeAndNormalize\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <opencv2/opencv.hpp>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass ReSizeAndNormalize : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n\n public:\n  ReSizeAndNormalize() = default;\n\n  explicit ReSizeAndNormalize(const PluginConfig& plugin_config);\n\n  virtual ~ReSizeAndNormalize() = default;\n\n  bool Process(cv::Mat &im, float *image_data_array);\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void Resize(const cv::Mat &img, int resized_h, int resized_w,\n              cv::Mat *resize_img);\n\nvoid Normalize(const std::vector<float> &mean,\n                                   const std::vector<float> &std, float scale,\n                                   cv::Mat *im);\n\n  void Mat2Vec(const cv::Mat &im, float *image_data_array);\n\n  int resized_width_;\n  int resized_height_;\n  std::vector<float> mean_;\n  std::vector<float> std_;\n  float scale_;\n};  // class ReSizeAndNormalize\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include <opencv2/opencv.hpp>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass ReSizeAndNormalize : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n\n public:\n  ReSizeAndNormalize() = default;\n\n  explicit ReSizeAndNormalize(const PluginConfig& plugin_config);\n\n  virtual ~ReSizeAndNormalize() = default;\n\n  bool Process(const cv::Mat &im, float *image_data_array);\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void Resize(const cv::Mat &img, int resized_h, int resized_w,\n              cv::Mat *resize_img);\n\nvoid Normalize(const std::vector<float> &mean,\n                                   const std::vector<float> &std, float scale,\n                                   cv::Mat *im);\n\n  void Mat2Vec(const cv::Mat &im, float *image_data_array);\n\n  int resized_width_;\n  int resized_height_;\n  std::vector<float> mean_;\n  std::vector<float> std_;\n  float scale_;\n};  // class ReSizeAndNormalize\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 137,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Apol Authors All Reserved * Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * *://../licensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludevector # <>includestring # <2/..>includemodulesper///_.\"includemodulesper///.\"includemodulesper//.\" alo namespaceception namespace { camera classSizeNormalize : pipelinePlugin public usingConfig pipelinePlugin;:SizeNormalize =; ReAnd() =; ReAnd( Plugin&_); ~ReAnd()() default bool( cvMatim floatimagedataarray bool( Plugin&_); boolEnabled const { enable }:: Name const { name }: Resizeconst:: &, res intizedh intizedw cvMatresizeimg void void( cvMatimg intizedh intizedw cvMatresizeimg void void( stdvectorfloat &, resizedh intim void2( cvMatim floatimagedataarray intizedwidth intized",
        "confidence": 0.945942759513855,
        "hesitated": false,
        "resolved": false
    }
]