[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_util.h\"\n\n#include <cmath>\n\nnamespace apollo {\nnamespace dreamview {\n\ndouble SimControlUtil::interpolate_1d(const double& p1, const double& p2,\n                                      const double& frac1) {\n  return p1 * (1.0 - frac1) + p2 * frac1;\n}\n\ndouble SimControlUtil::interpolated_find(const std::vector<double>& range_table,\n                                         const std::vector<double>& val_table,\n                                         double to_find) {\n  int size = range_table.size();\n  int left = -1;\n  int right = size;\n  int mid = 0;\n\n  // assert range_table[right] >= to_find and range_table[left] < to_find\n  while (left + 1 != right) {\n    mid = ((right - left) >> 1) + left;\n\n    if (range_table[mid] >= to_find) {\n      right = mid;\n    } else {\n      left = mid;\n    }\n  }\n\n  if (left == -1) {\n    return val_table[0];\n  }\n\n  if (left == (size - 1)) {\n    return val_table[range_table.size() - 1];\n  }\n\n  double range = range_table[right] - range_table[left];\n\n  if (fabs(range) < 1e-6) {\n    return 0.0;\n  }\n\n  double fraction = (to_find - range_table[left]) / range;\n\n  return interpolate_1d(val_table[left], val_table[right], fraction);\n}\n\ndouble SimControlUtil::sigmoid(const double value) {\n  return 1 / (1 + std::exp(-1.0 * value));\n}\n\ndouble SimControlUtil::relu(const double value) {\n  return (value > 0.0) ? value : 0.0;\n}\n\ndouble SimControlUtil::normalize(const double value, const double mean,\n                                 const double std) {\n  double eps = 1e-10;\n  return (value - mean) / (std + eps);\n}\n\n}  // namespace dreamview\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_util.h\"\n#include <cmath>\n\nnamespace apollo {\nnamespace dreamview {\n\ndouble SimControlUtil::interpolate_1d(const double& p1, const double& p2,\n                                      const double& frac1) {\n  return p1 * (1.0 - frac1) + p2 * frac1;\n}\n\ndouble SimControlUtil::interpolated_find(const std::vector<double>& range_table,\n                                         const std::vector<double>& val_table,\n                                         double to_find) {\n  int size = range_table.size();\n  int left = -1;\n  int right = size;\n  int mid = 0;\n\n  // assert range_table[right] >= to_find and range_table[left] < to_find\n  while (left + 1 != right) {\n    mid = ((right - left) >> 1) + left;\n\n    if (range_table[mid] >= to_find) {\n      right = mid;\n    } else {\n      left = mid;\n    }\n  }\n\n  if (left == -1) {\n    return val_table[0];\n  }\n\n  if (left == (size - 1)) {\n    return val_table[range_table.size() - 1];\n  }\n\n  double range = range_table[right] - range_table[left];\n\n  if (fabs(range) < 1e-6) {\n    return 0.0;\n  }\n\n  double fraction = (to_find - range_table[left]) / range;\n\n  return interpolate_1d(val_table[left], val_table[right], fraction);\n}\n\ndouble SimControlUtil::sigmoid(const double value) {\n  return 1 / (1 + std::exp(-1.0 * value));\n}\n\ndouble SimControlUtil::relu(const double value) {\n  return (value > 0.0) ? value : 0.0;\n}\n\ndouble SimControlUtil::normalize(const double value, const double mean,\n                                 const double std) {\n  double eps = 1e-10;\n  return (value - mean) / (std + eps);\n}\n\n\n}  // namespace dreamview\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_util.h\"\n\n#include <cmath>\n\nnamespace apollo {\nnamespace dreamview {\n\ndouble SimControlUtil::interpolate_1d(const double& p1, const double& p2,\n                                      const double& frac1) {\n  return p1 * (1.0 - frac1) + p2 * frac1;\n}\n\ndouble SimControlUtil::interpolated_find(const std::vector<double>& range_table,\n                                         const std::vector<double>& val_table,\n                                         double to_find) {\n  int size = range_table.size();\n  int left = -1;\n  int right = size;\n  int mid = 0;\n\n  // assert range_table[right] >= to_find and range_table[left] < to_find\n  while (left + 1 != right) {\n    mid = ((right - left) >> 1) + left;\n\n    if (range_table[mid] >= to_find) {\n      right = mid;\n    } else {\n      left = mid;\n    }\n  }\n\n  if (left == -1) {\n    return val_table[0];\n  }\n\n  if (left == (size - 1)) {\n    return val_table[range_table.size() - 1];\n  }\n\n  double range = range_table[right] - range_table[left];\n\n  if (fabs(range) < 1e-6) {\n    return 0.0;\n  }\n\n  double fraction = (to_find - range_table[left]) / range;\n\n  return interpolate_1d(val_table[left], val_table[right], fraction);\n}\n\ndouble SimControlUtil::sigmoid(const double value) {\n  return 1 / (1 + std::exp(-1.0 * value));\n}\n\ndouble SimControlUtil::relu(const double value) {\n  return (value > 0.0) ? value : 0.0;\n}\n\ndouble SimControlUtil::normalize(const double value, const double mean,\n                                 const double std) {\n  double eps = 1e-10;\n  return (value - mean) / (std + eps);\n}\n\n}  // namespace dreamview\n}  // namespace apollo",
        "lookback": " * Copyright 2018 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 0,
        "end_line": 167,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except in with the. * may a of License * may a of License * *://.///LICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License *****************************************************************************/includemodulesdrviewbackendsimcontrolmanagercommonsim___.h # <> apol { drview doubleControl::polate1( double p, double p, double frac) return11 (. -1 +2 frac; doubleControl::pol__( stdvectordouble rangetable const::<>& valtable double_) int =__.(); left -; right size int = mid 0 // rangetableright >=_ and__[] tofind rangetableleft modetableleft <_ whileleft 1 !=) mid ((right left >>) left; (rangetablemid >=_) { =; else left mid } ifleft ( -)) return_[_[_tablesize - 1 } double =_[] rangetableleft iffabsrange <e-) return.; double =",
        "confidence": 0.9220930933952332,
        "hesitated": false,
        "resolved": false
    }
]