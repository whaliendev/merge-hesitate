[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <memory>\n#include <string>\n\n#include \"Eigen/Core\"\n\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointCloudGetObjects : public pipeline::Plugin {\n public:\n  using DataFrame = pipeline::DataFrame;\n  using PluginConfig = pipeline::PluginConfig;\n\n  PointCloudGetObjects() = default;\n  explicit PointCloudGetObjects(const PluginConfig& plugin_config);\n\n  virtual ~PointCloudGetObjects() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(const std::vector<float>& detections,\n               const std::vector<int>& labels,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n  std::string Name() const override { return name_; }\n\n private:\n  base::ObjectSubType GetObjectsubType(const int label);\n  /*\n  void PointCloudGetObjects::PointCloudGetObjects(\n  std::vector<std::shared_ptr<Object>>* objects, const Eigen::Affine3d& pose,\n  std::vector<float>* detections, std::vector<int>* labels);\n  */\n  void GetObjects(const Eigen::Affine3d& pose,\n                  const std::vector<float>& detections,\n                  const std::vector<int>& labels,\n                  std::vector<std::shared_ptr<base::Object>>* objects);\n};\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <memory>\n\n#include \"Eigen/Core\"\n\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointCloudGetObjects : public pipeline::Plugin {\n public:\n  using DataFrame = pipeline::DataFrame;\n  using PluginConfig = pipeline::PluginConfig;\n\n  PointCloudGetObjects() = default;\n  explicit PointCloudGetObjects(const PluginConfig& plugin_config);\n\n  virtual ~PointCloudGetObjects() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(const std::vector<float>& detections,\n               const std::vector<int>& labels,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n  std::string Name() const override { return name_; }\n\n private:\n  base::ObjectSubType GetObjectsubType(const int label);\n  /*\n  void PointCloudGetObjects::PointCloudGetObjects(\n  std::vector<std::shared_ptr<Object>>* objects, const Eigen::Affine3d& pose,\n  std::vector<float>* detections, std::vector<int>* labels);\n  */\n  void GetObjects(const Eigen::Affine3d& pose,\n                  const std::vector<float>& detections,\n                  const std::vector<int>& labels,\n                  std::vector<std::shared_ptr<base::Object>>* objects);\n};\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <memory>\n#include <string>\n\n#include \"Eigen/Core\"\n\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointCloudGetObjects : public pipeline::Plugin {\n public:\n  using DataFrame = pipeline::DataFrame;\n  using PluginConfig = pipeline::PluginConfig;\n\n  PointCloudGetObjects() = default;\n  explicit PointCloudGetObjects(const PluginConfig& plugin_config);\n\n  virtual ~PointCloudGetObjects() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(const std::vector<float>& detections,\n               const std::vector<int>& labels,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n  std::string Name() const override { return name_; }\n\n private:\n  base::ObjectSubType GetObjectsubType(const int label);\n  /*\n  void PointCloudGetObjects::PointCloudGetObjects(\n  std::vector<std::shared_ptr<Object>>* objects, const Eigen::Affine3d& pose,\n  std::vector<float>* detections, std::vector<int>* labels);\n  */\n  void GetObjects(const Eigen::Affine3d& pose,\n                  const std::vector<float>& detections,\n                  const std::vector<int>& labels,\n                  std::vector<std::shared_ptr<base::Object>>* objects);\n};\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 134,
        "merge_gen_region": " Copyright022 Alo. Rights. Rights Copyright022 Apol Authors All Reserved * Licensed the Apache, 2. ( \"License *\"); you not this except in with the. You obtain copy the License * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the License License the language permissions * under License *****************************************************************************/pragma # onceincludevector # <>includememory # <>include \"///////////////////////////////.\"includemodulesper//.\"includemodulesper//.\" alo namespaceception namespaceid { PointGet : pipelinePlugin public usingFrame pipelineData; Plugin =::Config PointGet() default explicitCloudObjectsconstENGINE&_config virtualPointCloudObjects = default bool( Plugin&__); ~Get() default bool( Plugin&_); Processconst::<float detection, stdvectorint labels Data**_); Is() const { enable } stdstring() override { name } private baseObject Getsub( int); void PointGet::Get(::<::::<",
        "confidence": 0.9425628781318665,
        "hesitated": false,
        "resolved": false
    }
]