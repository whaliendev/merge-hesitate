[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <memory>\n#include <vector>\n\n#include \"modules/perception/fusion/lib/interface/base_gatekeeper.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace fusion {\n\nclass CollectFusedObject : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using PluginType = pipeline::PluginType;\n\n public:\n  CollectFusedObject() = default;\n  ~CollectFusedObject() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void Process(double timestamp, std::vector<base::ObjectPtr>* fused_objects);\n\n  void CollectObjectsByTrack(\n      double timestamp,\n      const TrackPtr& track,\n      std::vector<base::ObjectPtr>* fused_objects);\n\n  void CollectSensorMeasurementFromObject(\n      const SensorObjectConstPtr& object,\n      base::SensorObjectMeasurement* measurement);\n\n private:\n  std::unique_ptr<BaseGatekeeper> gate_keeper_;\n  ScenePtr scenes_;\n};\n\n}  // namespace fusion\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <memory>\n\n#include \"modules/perception/fusion/lib/interface/base_gatekeeper.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace fusion {\n\nclass CollectFusedObject : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using PluginType = pipeline::PluginType;\n\n public:\n  CollectFusedObject() = default;\n  ~CollectFusedObject() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void Process(double timestamp, std::vector<base::ObjectPtr>* fused_objects);\n\n  void CollectObjectsByTrack(\n      double timestamp,\n      const TrackPtr& track,\n      std::vector<base::ObjectPtr>* fused_objects);\n\n  void CollectSensorMeasurementFromObject(\n      const SensorObjectConstPtr& object,\n      base::SensorObjectMeasurement* measurement);\n\n private:\n  std::unique_ptr<BaseGatekeeper> gate_keeper_;\n  ScenePtr scenes_;\n};\n\n}  // namespace fusion\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <memory>\n#include <vector>\n\n#include \"modules/perception/fusion/lib/interface/base_gatekeeper.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace fusion {\n\nclass CollectFusedObject : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using PluginType = pipeline::PluginType;\n\n public:\n  CollectFusedObject() = default;\n  ~CollectFusedObject() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void Process(double timestamp, std::vector<base::ObjectPtr>* fused_objects);\n\n  void CollectObjectsByTrack(\n      double timestamp,\n      const TrackPtr& track,\n      std::vector<base::ObjectPtr>* fused_objects);\n\n  void CollectSensorMeasurementFromObject(\n      const SensorObjectConstPtr& object,\n      base::SensorObjectMeasurement* measurement);\n\n private:\n  std::unique_ptr<BaseGatekeeper> gate_keeper_;\n  ScenePtr scenes_;\n};\n\n}  // namespace fusion\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 136,
        "merge_gen_region": " Copyright022 Alo. Rights. * Licensed the Apache, 20theLicense * may use file in with License * may obtain copy the License * *://..///-. * * required applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License *****************************************************************************/pragma # onceincludestring # <>includememory # <>includevector # \"/per//libinterfacebasegate.\".\"includemodulesper///..\" alo namespaceception namespace alo namespaceception namespace { classFObject public:: {: Stage =::Config pipelineStage; Data =::Frame pipelineData; Plugin = pipelinePlugin;:FObject =;Collectused() default bool( Stage&__); ProcessData*_); ProcessData*_); boolEnabled const { enable }:: Name const { name } private void( timestamp stdvectorbaseObjectPtr fusedobjects voidObjectsTrack double, TrackPtr track stdvectorbaseObjectPtr fusedobjects void CollectMeasurementObject constObjectPtr object base baseSensorMeasurement measurement private stduniqueptrBasekeeper gatekeeper Scene scene_; }; // fusion // per } namespacepol",
        "confidence": 0.9578844308853149,
        "hesitated": false,
        "resolved": false
    }
]