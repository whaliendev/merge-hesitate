[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <limits>\n#include <memory>\n#include <string>\n\n#include \"nlohmann/json.hpp\"\n\n#include \"modules/common_msgs/localization_msgs/localization.pb.h\"\n#include \"modules/common_msgs/prediction_msgs/prediction_obstacle.pb.h\"\n#include \"modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h\"\n\n#include \"cyber/common/log.h\"\n#include \"cyber/cyber.h\"\n#include \"modules/common/adapters/adapter_gflags.h\"\n#include \"modules/common/math/math_utils.h\"\n#include \"modules/common/math/quaternion.h\"\n#include \"modules/common/util/message_util.h\"\n#include \"modules/dreamview/backend/common/dreamview_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_util.h\"\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class SimControlBase\n *\n * @brief Interface of simulated control algorithm\n */\nclass SimControlBase {\n public:\n  /**\n   * @brief Main logic of the simulated control algorithm.\n   */\n  virtual void RunOnce() = 0;\n\n  /**\n   * @brief Initialization.\n   */\n  virtual void Init(bool set_start_point, nlohmann::json start_point_attr,\n                    bool use_start_point_position = false) = 0;\n\n  /**\n   * @brief Starts running the simulated control algorithm, e.g., publish\n   * simulated localization and chassis messages triggered by timer.\n   */\n  virtual void Start() = 0;\n\n  /**\n   * @brief Starts running the simulated control algorithm with position, e.g.,\n   * publish simulated localization and chassis messages triggered by timer.\n   */\n  virtual void Start(double x, double y) = 0;\n\n  /**\n   * @brief Stops the algorithm.\n   */\n  virtual void Stop() = 0;\n\n  /**\n   * @brief Resets the internal state.\n   */\n  virtual void Reset() = 0;\n\n  // virtual std::unique_ptr<SimControlBase> GetDynamicModel();\n\n protected:\n  void TransformToVRF(const apollo::common::Point3D& point_mrf,\n                      const apollo::common::Quaternion& orientation,\n                      apollo::common::Point3D* point_vrf);\n\n  // The timer to publish simulated localization and chassis messages.\n  std::unique_ptr<cyber::Timer> sim_control_timer_;\n\n  // The timer to publish dummy prediction\n  std::unique_ptr<cyber::Timer> sim_prediction_timer_;\n\n  // Linearized reader/timer callbacks and external operations.\n  std::mutex mutex_;\n\n  // Whether the sim control is enabled / initialized.\n  bool enabled_ = false;\n\n  // Whether start point is initialized from actual localization data\n  bool start_point_from_localization_ = false;\n\n  // Initial state of the ego vehicle\n  double start_velocity_ = 0.0;\n  double start_acceleration_ = 0.0;\n  double start_heading_ = std::numeric_limits<double>::max();\n};\n\n/**\n * @brief Get SimControl class\n */\ntypedef SimControlBase* create_t(std::string dynamic_name,\n                                 std::string home_path);\n\n}  // namespace dreamview\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <limits>\n\n#include \"cyber/common/log.h\"\n#include \"cyber/cyber.h\"\n\n#include \"modules/common/adapters/adapter_gflags.h\"\n#include \"modules/common/math/math_utils.h\"\n#include \"modules/common/math/quaternion.h\"\n#include \"modules/common/util/message_util.h\"\n#include \"modules/dreamview/backend/common/dreamview_gflags.h\"\n#include \"modules/common_msgs/localization_msgs/localization.pb.h\"\n#include \"modules/common_msgs/prediction_msgs/prediction_obstacle.pb.h\"\n\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_util.h\"\n#include \"modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h\"\n#include \"nlohmann/json.hpp\"\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class SimControlBase\n *\n * @brief Interface of simulated control algorithm\n */\nclass SimControlBase {\n public:\n  /**\n   * @brief Main logic of the simulated control algorithm.\n   */\n  virtual void RunOnce() = 0;\n\n  /**\n   * @brief Initialization.\n   */\n  virtual void Init(\n      bool set_start_point,\n      nlohmann::json start_point_attr,\n      bool use_start_point_position=false) = 0;\n\n  /**\n   * @brief Starts running the simulated control algorithm, e.g., publish\n   * simulated localization and chassis messages triggered by timer.\n   */\n  virtual void Start() = 0;\n\n   /**\n   * @brief Starts running the simulated control algorithm with position, e.g., publish\n   * simulated localization and chassis messages triggered by timer.\n   */\n  virtual void Start(double x,double y) = 0;\n\n  /**\n   * @brief Stops the algorithm.\n   */\n  virtual void Stop() = 0;\n\n /**\n   * @brief Resets the internal state.\n   */\n  virtual void Reset() = 0;\n\n  // virtual std::unique_ptr<SimControlBase> GetDynamicModel();\n\n protected:\n  void TransformToVRF(const apollo::common::Point3D& point_mrf,\n                      const apollo::common::Quaternion& orientation,\n                      apollo::common::Point3D* point_vrf);\n\n  // The timer to publish simulated localization and chassis messages.\n  std::unique_ptr<cyber::Timer> sim_control_timer_;\n\n  // The timer to publish dummy prediction\n  std::unique_ptr<cyber::Timer> sim_prediction_timer_;\n\n  // Linearized reader/timer callbacks and external operations.\n  std::mutex mutex_;\n\n  // Whether the sim control is enabled / initialized.\n  bool enabled_ = false;\n\n  // Whether start point is initialized from actual localization data\n  bool start_point_from_localization_ = false;\n\n  // Initial state of the ego vehicle\n  double start_velocity_ = 0.0;\n  double start_acceleration_ = 0.0;\n  double start_heading_ = std::numeric_limits<double>::max();\n};\n\n /**\n   * @brief Get SimControl class\n   */\ntypedef SimControlBase* create_t(std::string dynamic_name, std::string home_path);\n\n}  // namespace dreamview\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <limits>\n#include <memory>\n#include <string>\n\n#include \"nlohmann/json.hpp\"\n\n#include \"modules/common_msgs/localization_msgs/localization.pb.h\"\n#include \"modules/common_msgs/prediction_msgs/prediction_obstacle.pb.h\"\n#include \"modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h\"\n\n#include \"cyber/common/log.h\"\n#include \"cyber/cyber.h\"\n#include \"modules/common/adapters/adapter_gflags.h\"\n#include \"modules/common/math/math_utils.h\"\n#include \"modules/common/math/quaternion.h\"\n#include \"modules/common/util/message_util.h\"\n#include \"modules/dreamview/backend/common/dreamview_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_util.h\"\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class SimControlBase\n *\n * @brief Interface of simulated control algorithm\n */\nclass SimControlBase {\n public:\n  /**\n   * @brief Main logic of the simulated control algorithm.\n   */\n  virtual void RunOnce() = 0;\n\n  /**\n   * @brief Initialization.\n   */\n  virtual void Init(bool set_start_point, nlohmann::json start_point_attr,\n                    bool use_start_point_position = false) = 0;\n\n  /**\n   * @brief Starts running the simulated control algorithm, e.g., publish\n   * simulated localization and chassis messages triggered by timer.\n   */\n  virtual void Start() = 0;\n\n  /**\n   * @brief Starts running the simulated control algorithm with position, e.g.,\n   * publish simulated localization and chassis messages triggered by timer.\n   */\n  virtual void Start(double x, double y) = 0;\n\n  /**\n   * @brief Stops the algorithm.\n   */\n  virtual void Stop() = 0;\n\n  /**\n   * @brief Resets the internal state.\n   */\n  virtual void Reset() = 0;\n\n  // virtual std::unique_ptr<SimControlBase> GetDynamicModel();\n\n protected:\n  void TransformToVRF(const apollo::common::Point3D& point_mrf,\n                      const apollo::common::Quaternion& orientation,\n                      apollo::common::Point3D* point_vrf);\n\n  // The timer to publish simulated localization and chassis messages.\n  std::unique_ptr<cyber::Timer> sim_control_timer_;\n\n  // The timer to publish dummy prediction\n  std::unique_ptr<cyber::Timer> sim_prediction_timer_;\n\n  // Linearized reader/timer callbacks and external operations.\n  std::mutex mutex_;\n\n  // Whether the sim control is enabled / initialized.\n  bool enabled_ = false;\n\n  // Whether start point is initialized from actual localization data\n  bool start_point_from_localization_ = false;\n\n  // Initial state of the ego vehicle\n  double start_velocity_ = 0.0;\n  double start_acceleration_ = 0.0;\n  double start_heading_ = std::numeric_limits<double>::max();\n};\n\n/**\n * @brief Get SimControl class\n */\ntypedef SimControlBase* create_t(std::string dynamic_name,\n                                 std::string home_path);\n\n}  // namespace dreamview\n}  // namespace apollo",
        "lookback": " * Copyright 2018 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 240,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved. * Licensed the Apache, 20theLicense * may use file in with the. * may a of License * may a of License * *://../licensesLICENSE20 * Unless by law agreed in,, * to writing software distributed the License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, either or. See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludelimits # <>includememory # <>includenhmannjsonhpp # \"modulescommonmsgslocal_/izationmsgslocal...\"includemodulescommonmsgspredictionmsgspredictionob...\"includemodulesdrviewbackendsimcontrolmanagerprotosimcontrolinternalpbh # \"cy///.h # \"///ersg.\"includemodulescommonmathmathutilsh # \"/commonmathqu.\"includemodulescommonutilmessageutilh # \"modulesdrviewbackendcommondrviewg.\"includemodulesdrviewbackendsim___flagsh # \"modulesdrview addsim___managercommonsim___flagsh # \"/eam///viewbackendsimcontrolmanagercommonsim___flagsh # \"modulesdrviewbackendsim",
        "confidence": 0.9236921072006226,
        "hesitated": false,
        "resolved": false
    }
]