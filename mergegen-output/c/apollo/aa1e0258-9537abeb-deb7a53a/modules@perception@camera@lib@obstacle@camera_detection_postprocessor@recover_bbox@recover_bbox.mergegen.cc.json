[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/recover_bbox/recover_bbox.h\"\n\n#include \"cyber/common/file.h\"\n#include \"cyber/common/log.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nRecoverBbox::RecoverBbox(const PluginConfig& plugin_config) {\n  Init(plugin_config);\n}\n\nbool RecoverBbox::Init(const PluginConfig &plugin_config) {\n  ACHECK(plugin_config.has_recover_bbox_config());\n\n  roi_w_ = plugin_config.recover_bbox_config().roi_w();\n  roi_h_ = plugin_config.recover_bbox_config().roi_h();\n  offset_y_ = plugin_config.recover_bbox_config().offset_y();\n  return true;\n}\n\nbool RecoverBbox::Process(DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null dataframe ptr.\";\n    return false;\n  }\n\n  auto frame = data_frame->camera_frame;\n  recover_bbox(roi_w_, roi_h_, offset_y_, &(frame->detected_objects));\n\n  return true;\n}\n\n\nvoid RecoverBbox::recover_bbox(int roi_w, int roi_h, int offset_y,\n                  std::vector<base::ObjectPtr> *objects) {\n  for (auto &obj : *objects) {\n    float xmin = obj->camera_supplement.box.xmin;\n    float ymin = obj->camera_supplement.box.ymin;\n    float xmax = obj->camera_supplement.box.xmax;\n    float ymax = obj->camera_supplement.box.ymax;\n    float x = xmin * static_cast<float>(roi_w);\n    float w = (xmax - xmin) * static_cast<float>(roi_w);\n    float y = ymin * static_cast<float>(roi_h) + static_cast<float>(offset_y);\n    float h = (ymax - ymin) * static_cast<float>(roi_h);\n    base::RectF rect_det(x, y, w, h);\n    base::RectF rect_img(0, 0, static_cast<float>(roi_w),\n                         static_cast<float>(roi_h + offset_y));\n    base::RectF rect = rect_det & rect_img;\n    obj->camera_supplement.box = rect;\n\n    double eps = 1e-2;\n\n    // Truncation assignment based on bbox positions\n    if ((ymin < eps) || (ymax >= (1.0 - eps))) {\n      obj->camera_supplement.truncated_vertical = 0.5;\n    } else {\n      obj->camera_supplement.truncated_vertical = 0.0;\n    }\n    if ((xmin < eps) || (xmax >= (1.0 - eps))) {\n      obj->camera_supplement.truncated_horizontal = 0.5;\n    } else {\n      obj->camera_supplement.truncated_horizontal = 0.0;\n    }\n  }\n}\n\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/recover_bbox/recover_bbox.h\"\n\n#include \"cyber/common/file.h\"\n#include \"cyber/common/log.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nRecoverBbox::RecoverBbox(const PluginConfig& plugin_config) {\n  Init(plugin_config);\n}\n\n// wxt todo: get roi_w\u3001roi_h\u3001offset_y more reasonable\nbool RecoverBbox::Init(const PluginConfig &plugin_config) {\n  ACHECK(plugin_config.has_recover_bbox_config());\n\n  roi_w_ = plugin_config.recover_bbox_config().roi_w();\n  roi_h_ = plugin_config.recover_bbox_config().roi_h();\n  offset_y_ = plugin_config.recover_bbox_config().offset_y();\n  return true;\n}\n\nbool RecoverBbox::Process(DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null dataframe ptr.\";\n    return false;\n  }\n\n  auto frame = data_frame->camera_frame;\n  recover_bbox(roi_w_, roi_h_, offset_y_, &(frame->detected_objects));\n\n  return true;\n}\n\n\nvoid RecoverBbox::recover_bbox(int roi_w, int roi_h, int offset_y,\n                  std::vector<base::ObjectPtr> *objects) {\n  for (auto &obj : *objects) {\n    float xmin = obj->camera_supplement.box.xmin;\n    float ymin = obj->camera_supplement.box.ymin;\n    float xmax = obj->camera_supplement.box.xmax;\n    float ymax = obj->camera_supplement.box.ymax;\n    float x = xmin * static_cast<float>(roi_w);\n    float w = (xmax - xmin) * static_cast<float>(roi_w);\n    float y = ymin * static_cast<float>(roi_h) + static_cast<float>(offset_y);\n    float h = (ymax - ymin) * static_cast<float>(roi_h);\n    base::RectF rect_det(x, y, w, h);\n    base::RectF rect_img(0, 0, static_cast<float>(roi_w),\n                         static_cast<float>(roi_h + offset_y));\n    base::RectF rect = rect_det & rect_img;\n    obj->camera_supplement.box = rect;\n\n    double eps = 1e-2;\n\n    // Truncation assignment based on bbox positions\n    if ((ymin < eps) || (ymax >= (1.0 - eps))) {\n      obj->camera_supplement.truncated_vertical = 0.5;\n    } else {\n      obj->camera_supplement.truncated_vertical = 0.0;\n    }\n    if ((xmin < eps) || (xmax >= (1.0 - eps))) {\n      obj->camera_supplement.truncated_horizontal = 0.5;\n    } else {\n      obj->camera_supplement.truncated_horizontal = 0.0;\n    }\n  }\n}\n\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/recover_bbox/recover_bbox.h\"\n\n#include \"cyber/common/file.h\"\n#include \"cyber/common/log.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nRecoverBbox::RecoverBbox(const PluginConfig& plugin_config) {\n  Init(plugin_config);\n}\n\nbool RecoverBbox::Init(const PluginConfig &plugin_config) {\n  ACHECK(plugin_config.has_recover_bbox_config());\n\n  roi_w_ = plugin_config.recover_bbox_config().roi_w();\n  roi_h_ = plugin_config.recover_bbox_config().roi_h();\n  offset_y_ = plugin_config.recover_bbox_config().offset_y();\n  return true;\n}\n\nbool RecoverBbox::Process(DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null dataframe ptr.\";\n    return false;\n  }\n\n  auto frame = data_frame->camera_frame;\n  recover_bbox(roi_w_, roi_h_, offset_y_, &(frame->detected_objects));\n\n  return true;\n}\n\n\nvoid RecoverBbox::recover_bbox(int roi_w, int roi_h, int offset_y,\n                  std::vector<base::ObjectPtr> *objects) {\n  for (auto &obj : *objects) {\n    float xmin = obj->camera_supplement.box.xmin;\n    float ymin = obj->camera_supplement.box.ymin;\n    float xmax = obj->camera_supplement.box.xmax;\n    float ymax = obj->camera_supplement.box.ymax;\n    float x = xmin * static_cast<float>(roi_w);\n    float w = (xmax - xmin) * static_cast<float>(roi_w);\n    float y = ymin * static_cast<float>(roi_h) + static_cast<float>(offset_y);\n    float h = (ymax - ymin) * static_cast<float>(roi_h);\n    base::RectF rect_det(x, y, w, h);\n    base::RectF rect_img(0, 0, static_cast<float>(roi_w),\n                         static_cast<float>(roi_h + offset_y));\n    base::RectF rect = rect_det & rect_img;\n    obj->camera_supplement.box = rect;\n\n    double eps = 1e-2;\n\n    // Truncation assignment based on bbox positions\n    if ((ymin < eps) || (ymax >= (1.0 - eps))) {\n      obj->camera_supplement.truncated_vertical = 0.5;\n    } else {\n      obj->camera_supplement.truncated_vertical = 0.0;\n    }\n    if ((xmin < eps) || (xmax >= (1.0 - eps))) {\n      obj->camera_supplement.truncated_horizontal = 0.5;\n    } else {\n      obj->camera_supplement.truncated_horizontal = 0.0;\n    }\n  }\n}\n\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 180,
        "merge_gen_region": " Copyright022 Alo. Rights. Rights. * Licensed the Apache, 20theLicense * may use file in with License * may a of License * *://..///LICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the License License the language permissions * under License *****************************************************************************/includemodulesper///staclecameradetectionpost/__/__/_/_processorrecoverbboxrecoverbboxh # \"bercommonfileh # \"cy///..\" alo namespaceception namespace { camera ReBboxReB( Plugin&_) Initpluginconfig } ReB::( Plugin&_) A(__.___); boolcoverboxInitconstConfigpluginconfig { A(_.hasrecoverbboxconfig roiw =_._______()._(); roih =_._____()._();__ pluginconfigrecoverbboxconfig()._(); offsety =_.___offsety return; boolcoverboxProcessData *_) ifnullptr data_) A <<Input data ptr return; auto =_->_->_; auto =_->_->_",
        "confidence": 0.947071373462677,
        "hesitated": false,
        "resolved": false
    }
]