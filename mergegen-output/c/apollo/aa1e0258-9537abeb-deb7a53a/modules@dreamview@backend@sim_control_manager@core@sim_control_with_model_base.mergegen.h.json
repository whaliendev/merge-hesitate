[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2019 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n#include <limits>\n#include <memory>\n\n#include \"cyber/common/log.h\"\n#include \"cyber/cyber.h\"\n#include \"modules/common/adapters/adapter_gflags.h\"\n#include \"modules/common/configs/vehicle_config_helper.h\"\n#include \"modules/common/math/linear_interpolation.h\"\n#include \"modules/common/math/math_utils.h\"\n#include \"modules/common/math/quaternion.h\"\n#include \"modules/common/util/message_util.h\"\n#include \"modules/common_msgs/control_msgs/control_cmd.pb.h\"\n#include \"modules/dreamview/backend/common/dreamview_gflags.h\"\n#include \"modules/common_msgs/localization_msgs/localization.pb.h\"\n#include \"modules/common_msgs/prediction_msgs/prediction_obstacle.pb.h\"\n#include \"modules/common_msgs/routing_msgs/routing.pb.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/sim_control_base.h\"\n#include \"modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h\"\n#include \"modules/dreamview/backend/map/map_service.h\"\n\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class sim control base for dynamic models (perfect model excluded)\n */\nclass SimControlWithModelBase : public SimControlBase {\n public:\n  /**\n   * @brief Construct a new Sim Control With Model Base object\n   * @param node_name\n   */\n  explicit SimControlWithModelBase(const std::string& node_name);\n\n  /**\n   * @brief Starts the timer to publish simulated localization and chassis\n   * messages.\n   */\n  void Start() override;\n\n  void Start(double x, double y) override;\n\n  void Stop() override;\n\n  /**\n   * @brief Resets the internal state.\n   */\n  void Reset() override;\n\n protected:\n  void InitTimerAndIO();\n\n  void UpdateGearPosition();\n  void InitStartPoint(nlohmann::json start_point_attr,\n                      bool use_start_point_position = false);\n\n  void InternalReset();\n\n  void OnControlCommand(const apollo::control::ControlCommand& control_command);\n  void OnRoutingResponse(const apollo::routing::RoutingResponse& routing);\n  void OnRoutingRequest(\n      const std::shared_ptr<apollo::routing::RoutingRequest> &routing_request);\n  void OnPredictionObstacles(\n    const std::shared_ptr<apollo::prediction::PredictionObstacles> &obstacles);\n\n  virtual void SetStartPoint(const ::apollo::sim_control::SimCarStatus& point);\n\n  void PublishChassis(const std::string model_name);\n  void PublishLocalization(const std::string model_name);\n  void PublishDummyPrediction();\n\n  // Whether the sim control is initialized.\n  bool start_auto_ = false;\n\n  std::unique_ptr<cyber::Node> node_;\n\n  std::shared_ptr<cyber::Reader<apollo::control::ControlCommand>>\n      control_command_reader_;\n  std::shared_ptr<cyber::Reader<apollo::routing::RoutingResponse>>\n      routing_reader_;\n  std::shared_ptr<cyber::Reader<apollo::routing::RoutingRequest>>\n      routing_request_reader_;\n  std::shared_ptr<cyber::Reader<apollo::localization::LocalizationEstimate>>\n      localization_reader_;\n  std::shared_ptr<cyber::Reader<apollo::prediction::PredictionObstacles>>\n      prediction_reader_;\n\n  std::shared_ptr<cyber::Writer<apollo::canbus::Chassis>> chassis_writer_;\n  std::shared_ptr<cyber::Writer<apollo::prediction::PredictionObstacles>>\n      prediction_writer_;\n  std::shared_ptr<cyber::Writer<apollo::localization::LocalizationEstimate>>\n      localization_writer_;\n\n  apollo::sim_control::SimCarStatus previous_point_;\n  apollo::sim_control::SimCarStatus current_point_;\n\n  apollo::control::ControlCommand control_cmd_;\n\n  // Filtered control command, used to fulfill chassis feedback\n  apollo::control::ControlCommand filtered_control_cmd_;\n\n  // The header of the routing planning is following.\n  apollo::common::Header current_routing_header_;\n\n  apollo::common::PathPoint adc_position_;\n\n  // vehicle parameter\n  apollo::common::VehicleParam vehicle_param_;\n\n  int gear_position_;\n  double dt_;\n\n  // Time interval of the timer, in milliseconds.\n  static constexpr double kModelIntervalMs = 10;\n  static constexpr double kSimPredictionIntervalMs = 100;\n\n  // Whether planning has requested a re-routing.\n  bool re_routing_triggered_ = false;\n\n  // Whether to send dummy predictions\n  bool send_dummy_prediction_ = true;\n  MapService *map_service_;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2019 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n\n#include \"cyber/common/log.h\"\n#include \"cyber/cyber.h\"\n#include \"modules/common/adapters/adapter_gflags.h\"\n#include \"modules/common/configs/vehicle_config_helper.h\"\n#include \"modules/common/math/linear_interpolation.h\"\n#include \"modules/common/math/math_utils.h\"\n#include \"modules/common/math/quaternion.h\"\n#include \"modules/common/util/message_util.h\"\n#include \"modules/common_msgs/control_msgs/control_cmd.pb.h\"\n#include \"modules/dreamview/backend/common/dreamview_gflags.h\"\n#include \"modules/common_msgs/localization_msgs/localization.pb.h\"\n#include \"modules/common_msgs/prediction_msgs/prediction_obstacle.pb.h\"\n#include \"modules/common_msgs/routing_msgs/routing.pb.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/sim_control_base.h\"\n#include \"modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h\"\n#include \"modules/dreamview/backend/map/map_service.h\"\n\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class sim control base for dynamic models (perfect model excluded)\n */\nclass SimControlWithModelBase : public SimControlBase {\n public:\n  /**\n   * @brief Construct a new Sim Control With Model Base object\n   * @param node_name\n   */\n  explicit SimControlWithModelBase(const std::string& node_name);\n\n  /**\n   * @brief Starts the timer to publish simulated localization and chassis\n   * messages.\n   */\n  void Start() override;\n\n  void Start(double x, double y) override;\n\n  void Stop() override;\n\n  /**\n   * @brief Resets the internal state.\n   */\n  void Reset() override;\n\n protected:\n  void InitTimerAndIO();\n\n  void UpdateGearPosition();\n  void InitStartPoint(nlohmann::json start_point_attr,\n                      bool use_start_point_position = false);\n\n  void InternalReset();\n\n  void OnControlCommand(const apollo::control::ControlCommand& control_command);\n  void OnRoutingResponse(const apollo::routing::RoutingResponse& routing);\n  void OnRoutingRequest(\n      const std::shared_ptr<apollo::routing::RoutingRequest> &routing_request);\n  void OnPredictionObstacles(\n    const std::shared_ptr<apollo::prediction::PredictionObstacles> &obstacles);\n\n  virtual void SetStartPoint(const ::apollo::sim_control::SimCarStatus& point);\n\n  void PublishChassis(const std::string model_name);\n  void PublishLocalization(const std::string model_name);\n  void PublishDummyPrediction();\n\n  // Whether the sim control is initialized.\n  bool start_auto_ = false;\n\n  std::unique_ptr<cyber::Node> node_;\n\n  std::shared_ptr<cyber::Reader<apollo::control::ControlCommand>>\n      control_command_reader_;\n  std::shared_ptr<cyber::Reader<apollo::routing::RoutingResponse>>\n      routing_reader_;\n  std::shared_ptr<cyber::Reader<apollo::routing::RoutingRequest>>\n      routing_request_reader_;\n  std::shared_ptr<cyber::Reader<apollo::localization::LocalizationEstimate>>\n      localization_reader_;\n  std::shared_ptr<cyber::Reader<apollo::prediction::PredictionObstacles>>\n      prediction_reader_;\n\n  std::shared_ptr<cyber::Writer<apollo::canbus::Chassis>> chassis_writer_;\n  std::shared_ptr<cyber::Writer<apollo::prediction::PredictionObstacles>>\n      prediction_writer_;\n  std::shared_ptr<cyber::Writer<apollo::localization::LocalizationEstimate>>\n      localization_writer_;\n\n  apollo::sim_control::SimCarStatus previous_point_;\n  apollo::sim_control::SimCarStatus current_point_;\n\n  apollo::control::ControlCommand control_cmd_;\n\n  // Filtered control command, used to fulfill chassis feedback\n  apollo::control::ControlCommand filtered_control_cmd_;\n\n  // The header of the routing planning is following.\n  apollo::common::Header current_routing_header_;\n\n  apollo::common::PathPoint adc_position_;\n\n  // vehicle parameter\n  apollo::common::VehicleParam vehicle_param_;\n\n  int gear_position_;\n  double dt_;\n\n  // Time interval of the timer, in milliseconds.\n  static constexpr double kModelIntervalMs = 10;\n  static constexpr double kSimPredictionIntervalMs = 100;\n\n  // Whether planning has requested a re-routing.\n  bool re_routing_triggered_ = false;\n\n  // Whether to send dummy predictions\n  bool send_dummy_prediction_ = true;\n  MapService *map_service_;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2019 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n#include <limits>\n#include <memory>\n\n#include \"cyber/common/log.h\"\n#include \"cyber/cyber.h\"\n#include \"modules/common/adapters/adapter_gflags.h\"\n#include \"modules/common/configs/vehicle_config_helper.h\"\n#include \"modules/common/math/linear_interpolation.h\"\n#include \"modules/common/math/math_utils.h\"\n#include \"modules/common/math/quaternion.h\"\n#include \"modules/common/util/message_util.h\"\n#include \"modules/common_msgs/control_msgs/control_cmd.pb.h\"\n#include \"modules/dreamview/backend/common/dreamview_gflags.h\"\n#include \"modules/common_msgs/localization_msgs/localization.pb.h\"\n#include \"modules/common_msgs/prediction_msgs/prediction_obstacle.pb.h\"\n#include \"modules/common_msgs/routing_msgs/routing.pb.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/sim_control_base.h\"\n#include \"modules/dreamview/backend/sim_control_manager/proto/sim_control_internal.pb.h\"\n#include \"modules/dreamview/backend/map/map_service.h\"\n\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class sim control base for dynamic models (perfect model excluded)\n */\nclass SimControlWithModelBase : public SimControlBase {\n public:\n  /**\n   * @brief Construct a new Sim Control With Model Base object\n   * @param node_name\n   */\n  explicit SimControlWithModelBase(const std::string& node_name);\n\n  /**\n   * @brief Starts the timer to publish simulated localization and chassis\n   * messages.\n   */\n  void Start() override;\n\n  void Start(double x, double y) override;\n\n  void Stop() override;\n\n  /**\n   * @brief Resets the internal state.\n   */\n  void Reset() override;\n\n protected:\n  void InitTimerAndIO();\n\n  void UpdateGearPosition();\n  void InitStartPoint(nlohmann::json start_point_attr,\n                      bool use_start_point_position = false);\n\n  void InternalReset();\n\n  void OnControlCommand(const apollo::control::ControlCommand& control_command);\n  void OnRoutingResponse(const apollo::routing::RoutingResponse& routing);\n  void OnRoutingRequest(\n      const std::shared_ptr<apollo::routing::RoutingRequest> &routing_request);\n  void OnPredictionObstacles(\n    const std::shared_ptr<apollo::prediction::PredictionObstacles> &obstacles);\n\n  virtual void SetStartPoint(const ::apollo::sim_control::SimCarStatus& point);\n\n  void PublishChassis(const std::string model_name);\n  void PublishLocalization(const std::string model_name);\n  void PublishDummyPrediction();\n\n  // Whether the sim control is initialized.\n  bool start_auto_ = false;\n\n  std::unique_ptr<cyber::Node> node_;\n\n  std::shared_ptr<cyber::Reader<apollo::control::ControlCommand>>\n      control_command_reader_;\n  std::shared_ptr<cyber::Reader<apollo::routing::RoutingResponse>>\n      routing_reader_;\n  std::shared_ptr<cyber::Reader<apollo::routing::RoutingRequest>>\n      routing_request_reader_;\n  std::shared_ptr<cyber::Reader<apollo::localization::LocalizationEstimate>>\n      localization_reader_;\n  std::shared_ptr<cyber::Reader<apollo::prediction::PredictionObstacles>>\n      prediction_reader_;\n\n  std::shared_ptr<cyber::Writer<apollo::canbus::Chassis>> chassis_writer_;\n  std::shared_ptr<cyber::Writer<apollo::prediction::PredictionObstacles>>\n      prediction_writer_;\n  std::shared_ptr<cyber::Writer<apollo::localization::LocalizationEstimate>>\n      localization_writer_;\n\n  apollo::sim_control::SimCarStatus previous_point_;\n  apollo::sim_control::SimCarStatus current_point_;\n\n  apollo::control::ControlCommand control_cmd_;\n\n  // Filtered control command, used to fulfill chassis feedback\n  apollo::control::ControlCommand filtered_control_cmd_;\n\n  // The header of the routing planning is following.\n  apollo::common::Header current_routing_header_;\n\n  apollo::common::PathPoint adc_position_;\n\n  // vehicle parameter\n  apollo::common::VehicleParam vehicle_param_;\n\n  int gear_position_;\n  double dt_;\n\n  // Time interval of the timer, in milliseconds.\n  static constexpr double kModelIntervalMs = 10;\n  static constexpr double kSimPredictionIntervalMs = 100;\n\n  // Whether planning has requested a re-routing.\n  bool re_routing_triggered_ = false;\n\n  // Whether to send dummy predictions\n  bool send_dummy_prediction_ = true;\n  MapService *map_service_;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "lookback": " * Copyright 2019 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 299,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the Apache, 20theLicense * may use file in with the. * may a of License * *://../licensesLICENSE20 * Unless by law agreed in,, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License the for specific governing and limitations the License *****************************************************************************/pragma # onceincludestring>includelimits # <>includememory # \"cy///logh # \"cy/cy.\"includemodulescommonadapt/ersadapterg.\"includemodulescommonconfigsvehicleconfighelperh # \"/commonmathlinearinter.\"includemodulescommonmathmath__.\"includemodulescommonmathmathutilsh # \"/commonmathqu.\"includemodulescommonutilmessageutilh # \"modulescommonmsgscontrolmsgscontrolcmdpbh # \"/eam//eam//eam//eam_/izationmsgslocal...\"includemodulescommonmsgspredictionmsgspredictionob..\"includemodulescommonmsgsroutingmsgsroutingpbh # \"/eam/eam/eam//eam_//_..\"includemodulesdr_//_..\"includemodulesdr_/",
        "confidence": 0.9219349026679993,
        "hesitated": false,
        "resolved": false
    }
]