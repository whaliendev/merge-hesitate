[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <memory>\n#include <string>\n\n#include \"modules/perception/lidar/lib/pointcloud_detection_postprocessor/pointcloud_get_objects/pointcloud_get_objects.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointcloudDetectionPostprocessor : public pipeline::Stage {\n public:\n  using DataFrame = pipeline::DataFrame;\n  using Plugin = pipeline::Plugin;\n  using PluginType = pipeline::PluginType;\n  using StageConfig = pipeline::StageConfig;\n  using PointCloudGetObjectsPtr = std::unique_ptr<PointCloudGetObjects>;\n\n public:\n  PointcloudDetectionPostprocessor() = default;\n\n  virtual ~PointcloudDetectionPostprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(const std::vector<float>& detections,\n               const std::vector<int>& labels,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  PointCloudGetObjectsPtr pointcloud_get_objects_;\n};  // class PointcloudDetectionPostprocessor\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/lidar/lib/pointcloud_detection_postprocessor/pointcloud_get_objects/pointcloud_get_objects.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointcloudDetectionPostprocessor : public pipeline::Stage {\n public:\n  using DataFrame = pipeline::DataFrame;\n  using Plugin = pipeline::Plugin;\n  using PluginType = pipeline::PluginType;\n  using StageConfig = pipeline::StageConfig;\n  using PointCloudGetObjectsPtr = std::unique_ptr<PointCloudGetObjects>;\n\n public:\n  PointcloudDetectionPostprocessor() = default;\n\n  virtual ~PointcloudDetectionPostprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(const std::vector<float>& detections,\n               const std::vector<int>& labels,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  PointCloudGetObjectsPtr pointcloud_get_objects_;\n};  // class PointcloudDetectionPostprocessor\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <memory>\n#include <string>\n\n#include \"modules/perception/lidar/lib/pointcloud_detection_postprocessor/pointcloud_get_objects/pointcloud_get_objects.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointcloudDetectionPostprocessor : public pipeline::Stage {\n public:\n  using DataFrame = pipeline::DataFrame;\n  using Plugin = pipeline::Plugin;\n  using PluginType = pipeline::PluginType;\n  using StageConfig = pipeline::StageConfig;\n  using PointCloudGetObjectsPtr = std::unique_ptr<PointCloudGetObjects>;\n\n public:\n  PointcloudDetectionPostprocessor() = default;\n\n  virtual ~PointcloudDetectionPostprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(const std::vector<float>& detections,\n               const std::vector<int>& labels,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  PointCloudGetObjectsPtr pointcloud_get_objects_;\n};  // class PointcloudDetectionPostprocessor\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 121,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Alo Authors All Reserved * Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * *://..///LICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludevector # <>includememory # <>includemodulesper/arlibpoint___processorpoint___/cloudgetobjectspoint___.\"includemodulesper//__.\"includemodulesper//__//clouddetectionpost/cloudgetobjectspoint___.\"includemodulesper///__//clouddetectionpost/cloudgetobjectspoint___.\"includemodulesper///__/dataframeh # \"/ceptionpipelinestageh namespacepol { lar classcloudPostprocessor public:: {: Data =::Frame pipelineData; Plugin pipelinePlugin using Plugin =::; Plugin = pipelinePlugin usingType pipelinePlugin; Stage =::Config pipelineStage; PointGetPtr =::_<Get>;:cloudPost() =; ~",
        "confidence": 0.9592015743255615,
        "hesitated": false,
        "resolved": false
    }
]