[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2019 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <deque>\n#include <map>\n#include <memory>\n#include <string>\n#include <vector>\n\n#include \"modules/dreamview/proto/dv_plugin_msg.pb.h\"\n#include \"modules/dreamview/proto/plugin_config.pb.h\"\n\n#include \"cyber/cyber.h\"\n#include \"modules/dreamview/backend/handlers/websocket_handler.h\"\n\nusing apollo::dreamview::ChannelConf;\nusing apollo::dreamview::DvPluginMsg;\nusing apollo::dreamview::PluginConfig;\n\nnamespace apollo {\nnamespace dreamview {\nstruct PluginInfo {\n  std::string launch_command;\n  std::string stop_command;\n  // for writer\n  std::map<std::string, std::string> plugin_accept_msg;\n  std::vector<std::string> process_command_keywords;\n  // writer \u6307\u9488 \u6839\u636echannel\u8c03\u7528\u5bf9\u5e94writer \u53bb\u5199\u4fe1\u606f\n  std::map<std::string, std::shared_ptr<cyber::Writer<DvPluginMsg>>> writers;\n  std::map<std::string, std::shared_ptr<cyber::Reader<DvPluginMsg>>> readers;\n};\nclass PluginManager {\n public:\n  /**\n   * @class PluginManager\n   *\n   * @brief A module that maintains all dv-related plugin information.\n   * Process the information communicated by the dv and the plugin.\n   */\n  using DvApi = bool (PluginManager::*)(const DvPluginMsg& msg,\n                                        const std::string& json_str);\n  using DvCallback = std::function<bool(const std::string& function_name,\n                                        const nlohmann::json& param_json)>;\n\n  explicit PluginManager(WebSocketHandler* plugin_ws);\n\n  void Start(DvCallback callback_api);\n  void Stop();\n\n  bool IsEnabled() const { return true; }\n  bool SendMsgToPlugin(const std::string& json_str);\n\n private:\n  bool RegisterPlugins();\n  bool RegisterPlugin(const std::shared_ptr<PluginConfig>& plugin_config);\n  auto InitPluginReader(const ChannelConf& channel_conf,\n                        const std::string& channel_prefix,\n                        const std::string& plugin_name)\n      -> std::shared_ptr<cyber::Reader<DvPluginMsg>>;\n  auto InitPluginWriterAndMsg(const ChannelConf& channel_conf,\n                              const std::string& channel_prefix,\n                              const std::string& plugin_name)\n      -> std::shared_ptr<cyber::Writer<DvPluginMsg>>;\n  bool CheckPluginStatus(const std::string& plugin_name);\n  void RegisterDvSupportApi(const std::string& api_name, const DvApi& api);\n  void RegisterDvSupportApis();\n  bool ReceiveMsgFromPlugin(const DvPluginMsg& msg);\n  bool UpdateData(const DvPluginMsg& msg, const std::string& json_str);\n  std::map<std::string, PluginInfo> plugins_;\n  std::unique_ptr<cyber::Node> node_;\n  bool enabled_;\n  WebSocketHandler* plugin_ws_ = nullptr;\n  std::map<std::string, DvApi> dv_support_apis_;\n  DvCallback callback_api_;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2019 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <deque>\n#include <memory>\n#include <string>\n#include <vector>\n\n#include \"modules/dreamview/proto/dv_plugin_msg.pb.h\"\n#include \"modules/dreamview/proto/plugin_config.pb.h\"\n\n#include \"cyber/cyber.h\"\n#include \"modules/dreamview/backend/handlers/websocket_handler.h\"\n\nusing apollo::dreamview::ChannelConf;\nusing apollo::dreamview::DvPluginMsg;\nusing apollo::dreamview::PluginConfig;\n\nnamespace apollo {\nnamespace dreamview {\nstruct PluginInfo {\n  std::string launch_command;\n  std::string stop_command;\n  // for writer\n  std::map<std::string, std::string> plugin_accept_msg;\n  std::vector<std::string> process_command_keywords;\n  // writer \u6307\u9488 \u6839\u636echannel\u8c03\u7528\u5bf9\u5e94writer \u53bb\u5199\u4fe1\u606f\n  std::map<std::string, std::shared_ptr<cyber::Writer<DvPluginMsg>>> writers;\n  std::map<std::string, std::shared_ptr<cyber::Reader<DvPluginMsg>>> readers;\n};\nclass PluginManager {\n public:\n  /**\n   * @class PluginManager\n   *\n   * @brief A module that maintains all dv-related plugin information.\n   * Process the information communicated by the dv and the plugin.\n   */\n  using DvApi = bool (PluginManager::*)(const DvPluginMsg& msg,\n                                        std::string& json_str);\n  using DvCallback = std::function<bool(const std::string& function_name,\n                                        const nlohmann::json& param_json)>;\n\n  explicit PluginManager(WebSocketHandler* plugin_ws);\n\n  void Start(DvCallback callback_api);\n  void Stop();\n\n  bool IsEnabled() const { return true; };\n  bool SendMsgToPlugin(const std::string& json_str);\n\n private:\n  bool RegisterPlugins();\n  bool RegisterPlugin(const std::shared_ptr<PluginConfig>& plugin_config);\n  auto InitPluginReader(ChannelConf& channel_conf,\n                        const std::string& channel_prefix,\n                        const std::string& plugin_name)\n      -> std::shared_ptr<cyber::Reader<DvPluginMsg>>;\n  auto InitPluginWriterAndMsg(ChannelConf& channel_conf,\n                              const std::string& channel_prefix,\n                              const std::string& plugin_name)\n      -> std::shared_ptr<cyber::Writer<DvPluginMsg>>;\n  bool CheckPluginStatus(const std::string& plugin_name);\n  void RegisterDvSupportApi(const std::string& api_name, const DvApi& api);\n  void RegisterDvSupportApis();\n  bool ReceiveMsgFromPlugin(const DvPluginMsg& msg);\n  bool UpdateData(const DvPluginMsg& msg, std::string& json_str);\n  std::map<std::string, PluginInfo> plugins_;\n  std::unique_ptr<cyber::Node> node_;\n  bool enabled_;\n  WebSocketHandler* plugin_ws_ = nullptr;\n  std::map<std::string, DvApi> dv_support_apis_;\n  DvCallback callback_api_;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2019 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <deque>\n#include <map>\n#include <memory>\n#include <string>\n#include <vector>\n\n#include \"modules/dreamview/proto/dv_plugin_msg.pb.h\"\n#include \"modules/dreamview/proto/plugin_config.pb.h\"\n\n#include \"cyber/cyber.h\"\n#include \"modules/dreamview/backend/handlers/websocket_handler.h\"\n\nusing apollo::dreamview::ChannelConf;\nusing apollo::dreamview::DvPluginMsg;\nusing apollo::dreamview::PluginConfig;\n\nnamespace apollo {\nnamespace dreamview {\nstruct PluginInfo {\n  std::string launch_command;\n  std::string stop_command;\n  // for writer\n  std::map<std::string, std::string> plugin_accept_msg;\n  std::vector<std::string> process_command_keywords;\n  // writer \u6307\u9488 \u6839\u636echannel\u8c03\u7528\u5bf9\u5e94writer \u53bb\u5199\u4fe1\u606f\n  std::map<std::string, std::shared_ptr<cyber::Writer<DvPluginMsg>>> writers;\n  std::map<std::string, std::shared_ptr<cyber::Reader<DvPluginMsg>>> readers;\n};\nclass PluginManager {\n public:\n  /**\n   * @class PluginManager\n   *\n   * @brief A module that maintains all dv-related plugin information.\n   * Process the information communicated by the dv and the plugin.\n   */\n  using DvApi = bool (PluginManager::*)(const DvPluginMsg& msg,\n                                        const std::string& json_str);\n  using DvCallback = std::function<bool(const std::string& function_name,\n                                        const nlohmann::json& param_json)>;\n\n  explicit PluginManager(WebSocketHandler* plugin_ws);\n\n  void Start(DvCallback callback_api);\n  void Stop();\n\n  bool IsEnabled() const { return true; }\n  bool SendMsgToPlugin(const std::string& json_str);\n\n private:\n  bool RegisterPlugins();\n  bool RegisterPlugin(const std::shared_ptr<PluginConfig>& plugin_config);\n  auto InitPluginReader(const ChannelConf& channel_conf,\n                        const std::string& channel_prefix,\n                        const std::string& plugin_name)\n      -> std::shared_ptr<cyber::Reader<DvPluginMsg>>;\n  auto InitPluginWriterAndMsg(const ChannelConf& channel_conf,\n                              const std::string& channel_prefix,\n                              const std::string& plugin_name)\n      -> std::shared_ptr<cyber::Writer<DvPluginMsg>>;\n  bool CheckPluginStatus(const std::string& plugin_name);\n  void RegisterDvSupportApi(const std::string& api_name, const DvApi& api);\n  void RegisterDvSupportApis();\n  bool ReceiveMsgFromPlugin(const DvPluginMsg& msg);\n  bool UpdateData(const DvPluginMsg& msg, const std::string& json_str);\n  std::map<std::string, PluginInfo> plugins_;\n  std::unique_ptr<cyber::Node> node_;\n  bool enabled_;\n  WebSocketHandler* plugin_ws_ = nullptr;\n  std::map<std::string, DvApi> dv_support_apis_;\n  DvCallback callback_api_;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "lookback": " * Copyright 2019 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 188,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except in with the. * may obtain copy the License * may a of License * *://../licensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WITHOUT OR OF KIND either or. See License the for specific governing and limitations the License *****************************************************************************/pragma # onceincludedeque # <>includemap # <>includememory # <string # <vector # \"modulesdrviewprotodvpluginmsgpbh # \"/eam/eam//___...\"includecy/ber.\"includemodulesdream///viewbackendhandlersweb_handlerh usingpol::eam::Channel; apol::eam::vMsg usingpol::eam::eam::Config namespacepol { namespaceeam { Plugin { Plugin {:: launchcommand stdstring_;:: stopcommand // writer::<<::,::>__;::<::>___ stdvectorstdstring processcommandkeywords // \u61d2 \ufffdchannel\ufffd\u7528\ufffd\ufffdwriter\ufffd\ufffd\ufffd\ufffd::<<::,::,::_<::,::__<",
        "confidence": 0.9325065612792969,
        "hesitated": false,
        "resolved": false
    }
]