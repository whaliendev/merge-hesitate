[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/lidar/lib/pointcloud_detection_postprocessor/pointcloud_detection_postprocessor.h\"\n\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\n// stage init\nbool PointcloudDetectionPostprocessor::Init(const StageConfig& stage_config) {\n  // ACHECK(stage_config.has_pointcloud_detection_postprocessor_config());\n\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  pointcloud_get_objects_ =\n      pipeline::dynamic_unique_cast<PointCloudGetObjects>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::POINTCLOUD_GET_OBJECTS]));\n  CHECK_NOTNULL(pointcloud_get_objects_);\n\n  return true;\n}\n\nbool PointcloudDetectionPostprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool PointcloudDetectionPostprocessor::Process(\n    const std::vector<float>& detections,\n    const std::vector<int>& labels,\n    DataFrame* data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  if (!pointcloud_get_objects_->Process(detections, labels, data_frame)) {\n    return false;\n  }\n  return true;\n}\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/lidar/lib/pointcloud_detection_postprocessor/pointcloud_detection_postprocessor.h\"\n\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\n// stage init\nbool PointcloudDetectionPostprocessor::Init(const StageConfig& stage_config) {\n  // ACHECK(stage_config.has_pointcloud_detection_postprocessor_config());\n\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  pointcloud_get_objects_ =\n      pipeline::dynamic_unique_cast<PointCloudGetObjects>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::POINTCLOUD_GET_OBJECTS])\n      );\n  CHECK_NOTNULL(pointcloud_get_objects_);\n\n  return true;\n}\n\nbool PointcloudDetectionPostprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool PointcloudDetectionPostprocessor::Process(\n    const std::vector<float>& detections,\n    const std::vector<int>& labels,\n    DataFrame* data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  if (!pointcloud_get_objects_->Process(detections, labels, data_frame)) {\n    return false;\n  }\n  return true;\n}\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/lidar/lib/pointcloud_detection_postprocessor/pointcloud_detection_postprocessor.h\"\n\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\n// stage init\nbool PointcloudDetectionPostprocessor::Init(const StageConfig& stage_config) {\n  // ACHECK(stage_config.has_pointcloud_detection_postprocessor_config());\n\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  pointcloud_get_objects_ =\n      pipeline::dynamic_unique_cast<PointCloudGetObjects>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::POINTCLOUD_GET_OBJECTS]));\n  CHECK_NOTNULL(pointcloud_get_objects_);\n\n  return true;\n}\n\nbool PointcloudDetectionPostprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool PointcloudDetectionPostprocessor::Process(\n    const std::vector<float>& detections,\n    const std::vector<int>& labels,\n    DataFrame* data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  if (!pointcloud_get_objects_->Process(detections, labels, data_frame)) {\n    return false;\n  }\n  return true;\n}\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 0,
        "end_line": 128,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Alo Authors All Reserved * Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the See License the for specific governing and limitations the License *****************************************************************************/includemodulesper/arlibpoint____processorpoint___processorh # \"modulesper///_.\" alo namespaceception namespaceid { stage boolcloudPost::( Stage&_) //CHECKstageconfighaspoint______ ifInitializestageconfig { false }cloudgetobjects =::__________ ifInitializestageconfig { false } point______ pipelinedynamicuniquecastPointCloudObjects pipelinePlugin::CLO___S CHECKNOT(cloudgetobjects return; boolcloudPost::(Frame dataframe { true; boolcloudDetectionprocessorProcess const::<>&s const::<>& labels Data* dataframe { ifnullptr dataframe {ERROR \" null_ ptr return; ifpoint____->Processdetection, labels",
        "confidence": 0.9650757312774658,
        "hesitated": false,
        "resolved": false
    }
]