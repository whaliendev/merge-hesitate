[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n#include <memory>\n\n#include <opencv2/opencv.hpp>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass GetImageData : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  GetImageData() = default;\n\n  explicit GetImageData(const PluginConfig& plugin_config);\n\n  virtual ~GetImageData() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(DataFrame* data_frame, float* k_inv, cv::Mat* imag_cv);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  bool GetKInverse(const CameraFrame& frame, float* k_inv);\n\n  bool GetImage(const CameraFrame& frame, cv::Mat* image_cv);\n\n private:\n  int image_origin_width_;\n  int image_origin_height_;\n  int image_origin_channel_;\n\n  float offset_y_ = 0.0;\n\n  std::shared_ptr<base::BaseCameraModel> base_camera_model_ = nullptr;\n\n  std::shared_ptr<base::Image8U> image_ = nullptr;\n};  // class GetImageData\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <opencv2/opencv.hpp>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass GetImageData : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  GetImageData() = default;\n\n  explicit GetImageData(const PluginConfig& plugin_config);\n\n  virtual ~GetImageData() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(DataFrame* data_frame, float* k_inv, cv::Mat* imag_cv);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  bool GetKInverse(const CameraFrame& frame, float* k_inv);\n\n  bool GetImage(const CameraFrame& frame, cv::Mat* image_cv);\n\n private:\n  int image_origin_width_;\n  int image_origin_height_;\n  int image_origin_channel_;\n\n  float offset_y_ = 0.0;\n\n  std::shared_ptr<base::BaseCameraModel> base_camera_model_ = nullptr;\n\n  std::shared_ptr<base::Image8U> image_ = nullptr;\n};  // class GetImageData\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <string>\n#include <memory>\n\n#include <opencv2/opencv.hpp>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass GetImageData : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  GetImageData() = default;\n\n  explicit GetImageData(const PluginConfig& plugin_config);\n\n  virtual ~GetImageData() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(DataFrame* data_frame, float* k_inv, cv::Mat* imag_cv);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  bool GetKInverse(const CameraFrame& frame, float* k_inv);\n\n  bool GetImage(const CameraFrame& frame, cv::Mat* image_cv);\n\n private:\n  int image_origin_width_;\n  int image_origin_height_;\n  int image_origin_channel_;\n\n  float offset_y_ = 0.0;\n\n  std::shared_ptr<base::BaseCameraModel> base_camera_model_ = nullptr;\n\n  std::shared_ptr<base::Image8U> image_ = nullptr;\n};  // class GetImageData\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 138,
        "merge_gen_region": " Copyright022 Alo Authors All Reserved Copyright022 Alo. Rights. Rights Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the See License for specific governing and limitations the License *****************************************************************************/pragma # <>includememory # <opencv/.>includemodulesper//_.>includemodulesper///.\"includemodulesper//.\" alo namespaceception namespace { camera classImageData : pipelinePlugin public using Plugin =::Config usingFrame pipelineData;: Get() =; GetImageData =; Get( Plugin = default explicitImageDataconstConfig pluginconfig virtualGetImage() default bool( Plugin&_); ~Data =; InitconstConfig pluginconfig override bool( Plugin&_,**_,::*_); Is() const { enable } stdstring() override bool( Plugin&_); ProcessData*_,*_,**_,::* imagcv bool Is() const { enable } stdstring() override { name }: GetK( Camera&,**",
        "confidence": 0.9465534090995789,
        "hesitated": false,
        "resolved": false
    }
]