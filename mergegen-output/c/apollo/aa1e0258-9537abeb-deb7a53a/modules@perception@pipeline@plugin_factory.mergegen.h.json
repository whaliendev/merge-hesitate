[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <memory>\n#include <unordered_map>\n\n#include \"modules/perception/pipeline/proto/pipeline_config.pb.h\"\n\n#include \"modules/common/util/factory.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace pipeline {\n\ntemplate <typename To, typename From>\nstd::unique_ptr<To> dynamic_unique_cast(std::unique_ptr<From>&& p) {\n  To* q = dynamic_cast<To*>(p.get());\n  if (q) p.release();\n  return std::unique_ptr<To>(q);\n}\n\nclass PluginFactory {\n public:\n  static void Init();\n\n  static std::unique_ptr<Plugin> CreatePlugin(\n      const PluginConfig& plugin_config);\n\n private:\n  static apollo::common::util::Factory<\n      PluginType, Plugin, Plugin* (*)(const PluginConfig& plugin_config),\n      std::unordered_map<PluginType,\n                         Plugin* (*)(const PluginConfig& plugin_config),\n                         std::hash<int>>>\n      plugin_factory_;\n};\n\n}  // namespace pipeline\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n\n#pragma once\n\n#include <memory>\n#include <unordered_map>\n\n#include \"modules/common/util/factory.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\n#include \"modules/perception/pipeline/proto/pipeline_config.pb.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace pipeline {\n\ntemplate <typename To, typename From>\nstd::unique_ptr<To> dynamic_unique_cast(std::unique_ptr<From>&& p) {\n  To* q = dynamic_cast<To*>(p.get());\n  if (q) p.release();\n  return std::unique_ptr<To>(q);\n}\n\nclass PluginFactory {\n public:\n  static void Init();\n\n  static std::unique_ptr<Plugin>\n        CreatePlugin(const PluginConfig& plugin_config);\n\n private:\n  static apollo::common::util::Factory<\n      PluginType, Plugin,\n      Plugin *(*)(const PluginConfig& plugin_config),\n      std::unordered_map<\n          PluginType,\n          Plugin *(*)(const PluginConfig& plugin_config),\n          std::hash<int>>>\n      plugin_factory_;\n};\n\n} // namespace pipeline\n} // namespace perception\n} // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <memory>\n#include <unordered_map>\n\n#include \"modules/perception/pipeline/proto/pipeline_config.pb.h\"\n\n#include \"modules/common/util/factory.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace pipeline {\n\ntemplate <typename To, typename From>\nstd::unique_ptr<To> dynamic_unique_cast(std::unique_ptr<From>&& p) {\n  To* q = dynamic_cast<To*>(p.get());\n  if (q) p.release();\n  return std::unique_ptr<To>(q);\n}\n\nclass PluginFactory {\n public:\n  static void Init();\n\n  static std::unique_ptr<Plugin> CreatePlugin(\n      const PluginConfig& plugin_config);\n\n private:\n  static apollo::common::util::Factory<\n      PluginType, Plugin, Plugin* (*)(const PluginConfig& plugin_config),\n      std::unordered_map<PluginType,\n                         Plugin* (*)(const PluginConfig& plugin_config),\n                         std::hash<int>>>\n      plugin_factory_;\n};\n\n}  // namespace pipeline\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 118,
        "merge_gen_region": " Copyright022 Alo. Rights. * Licensed the Apache, 20 \"\"\"includemodulesper/.\"includemodulesper.\"includemodulesper.\" namespacepol { per { pipeline templatetypename To typename>includeuniqueptrTo>___(::_<>&&) To q) To q =_<*>(.()); ifq)..(); stduniqueptrToq } Plugin {: void(); stduniqueptrPlugin Create( Plugin&_);: alocommonutilFactory Plugin,,****ENGINE*constConfig pluginconfig stdunorderedmapPlugin,**constConfig pluginconfig stdhashint pluginfactory }; // pipeline // per } namespacepol",
        "confidence": 0.9407669305801392,
        "hesitated": false,
        "resolved": false
    }
]