[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraGetObject : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  CameraGetObject() = default;\n  explicit CameraGetObject(const PluginConfig& plugin_config);\n\n  virtual ~CameraGetObject() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(const std::vector<float> &detect_result, DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void get_smoke_objects_cpu(const std::vector<float> &detect_result,\n                             float confidence_threshold, int width, int height,\n                             std::vector<base::ObjectPtr> *objects);\n  void fill_smoke_base(base::ObjectPtr obj, const float *bbox,\n                                int width, int height);\n  void fill_smoke_bbox3d(bool with_box3d, base::ObjectPtr obj,\n                                  const float *bbox);\n\n  float confidence_threshold_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraGetObject : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  CameraGetObject() = default;\n  explicit CameraGetObject(const PluginConfig& plugin_config);\n\n  virtual ~CameraGetObject() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(const std::vector<float> &detect_result, DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void get_smoke_objects_cpu(const std::vector<float> &detect_result,\n                             float confidence_threshold, int width, int height,\n                             std::vector<base::ObjectPtr> *objects);\n  void fill_smoke_base(base::ObjectPtr obj, const float *bbox,\n                                int width, int height);\n  void fill_smoke_bbox3d(bool with_box3d, base::ObjectPtr obj,\n                                  const float *bbox);\n\n  float confidence_threshold_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraGetObject : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  CameraGetObject() = default;\n  explicit CameraGetObject(const PluginConfig& plugin_config);\n\n  virtual ~CameraGetObject() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n\n  bool Process(const std::vector<float> &detect_result, DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void get_smoke_objects_cpu(const std::vector<float> &detect_result,\n                             float confidence_threshold, int width, int height,\n                             std::vector<base::ObjectPtr> *objects);\n  void fill_smoke_base(base::ObjectPtr obj, const float *bbox,\n                                int width, int height);\n  void fill_smoke_bbox3d(bool with_box3d, base::ObjectPtr obj,\n                                  const float *bbox);\n\n  float confidence_threshold_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 126,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Alo. Rights. Rights. Rights Licensed the Apache, 20theLicense * may use file in with License * may a of License * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludevector # <>includestring # \"/per//..\"includemodulesper///.\"includemodulesper//.\"includemodulesper//.\" per { camera classGetObject public:: {: Plugin =::Config usingFrame pipelineData;: Camera() =; Camera( Plugin&_); ~GetObject =; InitconstENGINE&_); Processconst::vectorfloat &__,Framedataframeframe boolEnabled const { enable }::string() override { name } private void_okeobjectscpuconst::<>>detectresult Data *_dataframe boolEnabled const { enable }:: Name const { name } private void_okeobjectscpuconst::<>>detectresult floatfidencethreshold int, height stdvectorbaseObjectPtr *); fillsm_(:: obj",
        "confidence": 0.9368586540222168,
        "hesitated": false,
        "resolved": false
    }
]