[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#include \"modules/dreamview/backend/sim_control_manager/sim_control_manager.h\"\n\n#include \"nlohmann/json.hpp\"\n\nnamespace apollo {\nnamespace dreamview {\n\nusing apollo::canbus::Chassis;\nusing apollo::common::ErrorCode;\nusing apollo::control::ControlCommand;\nusing Json = nlohmann::json;\n\nstd::string SimControlManager::Name() const {\n  return FLAGS_sim_control_module_name;\n}\n\nJson SimControlManager::LoadDynamicModels() {\n  auto *model_factory = DynamicModelFactory::Instance();\n  return model_factory->RegisterDynamicModels();\n}\n\nvoid SimControlManager::Reset() {\n  if (IsEnabled() && model_ptr_) {\n    model_ptr_->Reset();\n  }\n}\n\nvoid SimControlManager::ResetDynamicModel() {\n  if (!current_dynamic_model_.empty()) {\n    if (!model_ptr_) {\n      auto *model_factory = DynamicModelFactory::Instance();\n      model_ptr_ = model_factory->GetModelType(current_dynamic_model_);\n    }\n    if (model_ptr_) {\n      model_ptr_->Stop();\n    }\n  }\n  return;\n}\n\nbool SimControlManager::AddDynamicModel(const std::string &dynamic_model_name) {\n  if (IsEnabled()) {\n    auto *model_factory = DynamicModelFactory::Instance();\n    return model_factory->RegisterDynamicModel(dynamic_model_name);\n  } else {\n    AERROR << \"Sim control manager is not enabled! Can not download dynamic \"\n              \"model to local!\";\n    return false;\n  }\n}\n\nbool SimControlManager::ChangeDynamicModel(\n    const std::string &dynamic_model_name) {\n  auto *model_factory = DynamicModelFactory::Instance();\n  auto next_model_ptr_ = model_factory->GetModelType(dynamic_model_name);\n  if (!next_model_ptr_) {\n    AERROR << \"Can not get dynamic model to start.Use original dynamic model!\";\n    return false;\n  }\n  ResetDynamicModel();\n  model_ptr_ = next_model_ptr_;\n  next_model_ptr_ = nullptr;\n  model_ptr_->Start();\n  current_dynamic_model_ = dynamic_model_name;\n  return true;\n}\n\nbool SimControlManager::DeleteDynamicModel(\n    const std::string &dynamic_model_name) {\n  auto *model_factory = DynamicModelFactory::Instance();\n  return model_factory->UnregisterDynamicModel(dynamic_model_name);\n}\n\nvoid SimControlManager::Start() {\n  // enabled_\u4ec5\u627f\u62c5\u5f00\u5173\u4f5c\u7528\n  if (!enabled_) {\n    enabled_ = true;\n  }\n}\n\nvoid SimControlManager::Restart(double x, double y) {\n  // reset start point for dynamic model.\n  if (!IsEnabled() || !model_ptr_) {\n    AERROR << \"Sim control is invalid,Failed to restart!\";\n  }\n  model_ptr_->Stop();\n  model_ptr_->Start(x, y);\n  return;\n}\n\nvoid SimControlManager::RunOnce() { model_ptr_->RunOnce(); }\n\nvoid SimControlManager::Stop() {\n  if (enabled_) {\n    enabled_ = false;\n    ResetDynamicModel();\n    std::system(FLAGS_sim_obstacle_stop_command.data());\n    model_ptr_ = nullptr;\n    current_dynamic_model_ = \"\";\n  }\n}\n\n}  // namespace dreamview\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#include \"modules/dreamview/backend/sim_control_manager/sim_control_manager.h\"\n\n#include \"nlohmann/json.hpp\"\n\nnamespace apollo\n{\n  namespace dreamview\n  {\n\n    using apollo::canbus::Chassis;\n    using apollo::common::ErrorCode;\n    using apollo::control::ControlCommand;\n    using Json = nlohmann::json;\n\n    std::string SimControlManager::Name() const\n    {\n      return FLAGS_sim_control_module_name;\n    }\n\n    Json SimControlManager::LoadDynamicModels()\n    {\n      auto *model_factory = DynamicModelFactory::Instance();\n      return model_factory->RegisterDynamicModels();\n    }\n\n    void SimControlManager::Reset(){\n      if(IsEnabled() && model_ptr_){\n        model_ptr_->Reset();\n      }\n    }\n\n    void SimControlManager::ResetDynamicModel()\n    {\n      if (!current_dynamic_model_.empty())\n      {\n        if (!model_ptr_)\n        {\n          auto *model_factory = DynamicModelFactory::Instance();\n          model_ptr_ = model_factory->GetModelType(current_dynamic_model_);\n        }\n        if (model_ptr_)\n        {\n          model_ptr_->Stop();\n        }\n      }\n      return;\n    }\n\n    bool SimControlManager::AddDynamicModel(std::string &dynamic_model_name)\n    {\n      if (IsEnabled())\n      {\n        auto *model_factory = DynamicModelFactory::Instance();\n        return model_factory->RegisterDynamicModel(dynamic_model_name);\n      }\n      else\n      {\n        AERROR << \"Sim control manager is not enabled! Can not download dynamic model to local!\";\n        return false;\n      }\n    }\n\n    bool SimControlManager::ChangeDynamicModel(std::string &dynamic_model_name)\n    {\n      auto *model_factory = DynamicModelFactory::Instance();\n      auto next_model_ptr_ = model_factory->GetModelType(dynamic_model_name);\n      if(!next_model_ptr_){\n         AERROR << \"Can not get dynamic model to start.Use original dynamic model!\";\n         return false;\n      }\n      ResetDynamicModel();\n      model_ptr_=next_model_ptr_;\n      next_model_ptr_ = nullptr;\n      model_ptr_->Start();\n      current_dynamic_model_ = dynamic_model_name;\n      return true;\n    }\n\n    bool SimControlManager::DeleteDynamicModel(std::string &dynamic_model_name)\n    {\n      auto *model_factory = DynamicModelFactory::Instance();\n      return model_factory->UnregisterDynamicModel(dynamic_model_name);\n    }\n\n    void SimControlManager::Start()\n    {\n      // enabled_\u4ec5\u627f\u62c5\u5f00\u5173\u4f5c\u7528\n      if (!enabled_)\n      {\n        enabled_ = true;\n      }\n    }\n\n    void SimControlManager::Restart(double x, double y)\n    {\n      // reset start point for dynamic model.\n      if(!IsEnabled() || !model_ptr_){\n        AERROR<<\"Sim control is invalid,Failed to restart!\";\n      }\n      model_ptr_->Stop();\n      model_ptr_->Start(x,y);\n      return;\n    }\n\n    void SimControlManager::RunOnce() { model_ptr_->RunOnce(); }\n\n    void SimControlManager::Stop()\n    {\n      if (enabled_)\n      {\n        enabled_ = false;\n        ResetDynamicModel();\n        std::system(FLAGS_sim_obstacle_stop_command.data());\n        model_ptr_ = nullptr;\n        current_dynamic_model_ = \"\";\n      }\n    }\n\n  } // namespace dreamview\n} // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2018 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#include \"modules/dreamview/backend/sim_control_manager/sim_control_manager.h\"\n\n#include \"nlohmann/json.hpp\"\n\nnamespace apollo {\nnamespace dreamview {\n\nusing apollo::canbus::Chassis;\nusing apollo::common::ErrorCode;\nusing apollo::control::ControlCommand;\nusing Json = nlohmann::json;\n\nstd::string SimControlManager::Name() const {\n  return FLAGS_sim_control_module_name;\n}\n\nJson SimControlManager::LoadDynamicModels() {\n  auto *model_factory = DynamicModelFactory::Instance();\n  return model_factory->RegisterDynamicModels();\n}\n\nvoid SimControlManager::Reset() {\n  if (IsEnabled() && model_ptr_) {\n    model_ptr_->Reset();\n  }\n}\n\nvoid SimControlManager::ResetDynamicModel() {\n  if (!current_dynamic_model_.empty()) {\n    if (!model_ptr_) {\n      auto *model_factory = DynamicModelFactory::Instance();\n      model_ptr_ = model_factory->GetModelType(current_dynamic_model_);\n    }\n    if (model_ptr_) {\n      model_ptr_->Stop();\n    }\n  }\n  return;\n}\n\nbool SimControlManager::AddDynamicModel(const std::string &dynamic_model_name) {\n  if (IsEnabled()) {\n    auto *model_factory = DynamicModelFactory::Instance();\n    return model_factory->RegisterDynamicModel(dynamic_model_name);\n  } else {\n    AERROR << \"Sim control manager is not enabled! Can not download dynamic \"\n              \"model to local!\";\n    return false;\n  }\n}\n\nbool SimControlManager::ChangeDynamicModel(\n    const std::string &dynamic_model_name) {\n  auto *model_factory = DynamicModelFactory::Instance();\n  auto next_model_ptr_ = model_factory->GetModelType(dynamic_model_name);\n  if (!next_model_ptr_) {\n    AERROR << \"Can not get dynamic model to start.Use original dynamic model!\";\n    return false;\n  }\n  ResetDynamicModel();\n  model_ptr_ = next_model_ptr_;\n  next_model_ptr_ = nullptr;\n  model_ptr_->Start();\n  current_dynamic_model_ = dynamic_model_name;\n  return true;\n}\n\nbool SimControlManager::DeleteDynamicModel(\n    const std::string &dynamic_model_name) {\n  auto *model_factory = DynamicModelFactory::Instance();\n  return model_factory->UnregisterDynamicModel(dynamic_model_name);\n}\n\nvoid SimControlManager::Start() {\n  // enabled_\u4ec5\u627f\u62c5\u5f00\u5173\u4f5c\u7528\n  if (!enabled_) {\n    enabled_ = true;\n  }\n}\n\nvoid SimControlManager::Restart(double x, double y) {\n  // reset start point for dynamic model.\n  if (!IsEnabled() || !model_ptr_) {\n    AERROR << \"Sim control is invalid,Failed to restart!\";\n  }\n  model_ptr_->Stop();\n  model_ptr_->Start(x, y);\n  return;\n}\n\nvoid SimControlManager::RunOnce() { model_ptr_->RunOnce(); }\n\nvoid SimControlManager::Stop() {\n  if (enabled_) {\n    enabled_ = false;\n    ResetDynamicModel();\n    std::system(FLAGS_sim_obstacle_stop_command.data());\n    model_ptr_ = nullptr;\n    current_dynamic_model_ = \"\";\n  }\n}\n\n}  // namespace dreamview\n}  // namespace apollo",
        "lookback": " * Copyright 2018 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 257,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except in with the. * may a of License * may a of License * *://../licensesLICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WITHOUT OR OF KIND either or. See License the for specific governing and limitations the License *****************************************************************************/includemodulesdrviewbackendsimcontrolmanagersimcontrolmanagerh # \"loh/.\"includenh/.\" alo namespaceeam { a alo namespaceeam { a alotesting::busChis usingpol::::::; alocommonErrorCode usingpol::::::::Command using =lomannjson stdstringControl::()() { FLAGSsimcontrolmodulename } SimManager::Dynamic() automodel_ =ModelFactoryInstance return modelfactoryRegisterModels(); void SimManagerReset { ifIsEnabled &&__) modelptr {__->(); } void SimManagerResetModel { (! (!_ =Model::();__ modelfactoryGetTypecurrentdynamicmodel_); ifmodelptr { modelptrStop } }; boolControl::Dynamic( stdstringdynamicmodelname { (()) automodel_ =ModelFactoryInstance return_",
        "confidence": 0.943310558795929,
        "hesitated": false,
        "resolved": false
    }
]