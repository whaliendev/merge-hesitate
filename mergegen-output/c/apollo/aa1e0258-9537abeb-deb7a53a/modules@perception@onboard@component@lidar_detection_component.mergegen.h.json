[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2020 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <atomic>\n#include <memory>\n#include <string>\n#include <limits>\n\n#include \"cyber/cyber.h\"\n#include \"modules/perception/lidar/app/lidar_obstacle_detection.h\"\n#include \"modules/perception/lidar/common/lidar_frame.h\"\n#include \"modules/perception/onboard/inner_component_messages/lidar_inner_component_messages.h\"\n#include \"modules/perception/onboard/transform_wrapper/transform_wrapper.h\"\n\n#include \"modules/common_msgs/sensor_msgs/pointcloud.pb.h\"\n#include \"modules/perception/onboard/proto/lidar_component_config.pb.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace onboard {\n\nclass LidarDetectionComponent : public cyber::Component<drivers::PointCloud> {\n public:\n  using PipelineConfig = pipeline::PipelineConfig;\n\n public:\n  LidarDetectionComponent() = default;\n  virtual ~LidarDetectionComponent() = default;\n\n  bool Init() override;\n  bool Proc(const std::shared_ptr<drivers::PointCloud>& message) override;\n\n private:\n  bool InitAlgorithmPlugin();\n  bool InternalProc(\n      const std::shared_ptr<const drivers::PointCloud>& in_message,\n      const std::shared_ptr<LidarFrameMessage>& out_message);\n\n  bool ConvertCloud(\n      const std::shared_ptr<const drivers::PointCloud>& from,\n      std::shared_ptr<base::AttributePointCloud<base::PointF>> to);\n\n private:\n  static std::atomic<uint32_t> seq_num_;\n  std::string sensor_name_;\n  std::string detector_name_;\n  bool enable_hdmap_ = true;\n  float lidar_query_tf_offset_ = 20.0f;\n  std::string lidar2novatel_tf2_child_frame_id_;\n  std::string output_channel_name_;\n  base::SensorInfo sensor_info_;\n  TransformWrapper lidar2world_trans_;\n  // std::unique_ptr<lidar::BaseLidarObstacleDetection> detector_;\n\n  std::unique_ptr<lidar::BaseLidarObstacleDetection> lidar_detection_pipeline_;\n\n  pipeline::PipelineConfig lidar_detection_config_;\n\n  std::shared_ptr<apollo::cyber::Writer<LidarFrameMessage>> writer_;\n};\n\nCYBER_REGISTER_COMPONENT(LidarDetectionComponent);\n\n}  // namespace onboard\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2020 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <atomic>\n#include <memory>\n#include <string>\n\n#include \"cyber/cyber.h\"\n#include \"modules/perception/lidar/app/lidar_obstacle_detection.h\"\n#include \"modules/perception/lidar/common/lidar_frame.h\"\n#include \"modules/perception/onboard/inner_component_messages/lidar_inner_component_messages.h\"\n#include \"modules/perception/onboard/transform_wrapper/transform_wrapper.h\"\n\n#include \"modules/common_msgs/sensor_msgs/pointcloud.pb.h\"\n#include \"modules/perception/onboard/proto/lidar_component_config.pb.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace onboard {\n\nclass LidarDetectionComponent : public cyber::Component<drivers::PointCloud> {\n public:\n  using PipelineConfig = pipeline::PipelineConfig;\n\n public:\n  LidarDetectionComponent() = default;\n  virtual ~LidarDetectionComponent() = default;\n\n  bool Init() override;\n  bool Proc(const std::shared_ptr<drivers::PointCloud>& message) override;\n\n private:\n  bool InitAlgorithmPlugin();\n  bool InternalProc(\n      const std::shared_ptr<const drivers::PointCloud>& in_message,\n      const std::shared_ptr<LidarFrameMessage>& out_message);\n\n  bool ConvertCloud(\n      const std::shared_ptr<const drivers::PointCloud>& from,\n      std::shared_ptr<base::AttributePointCloud<base::PointF>> to);\n\n private:\n  static std::atomic<uint32_t> seq_num_;\n  std::string sensor_name_;\n  std::string detector_name_;\n  bool enable_hdmap_ = true;\n  float lidar_query_tf_offset_ = 20.0f;\n  std::string lidar2novatel_tf2_child_frame_id_;\n  std::string output_channel_name_;\n  base::SensorInfo sensor_info_;\n  TransformWrapper lidar2world_trans_;\n  // std::unique_ptr<lidar::BaseLidarObstacleDetection> detector_;\n\n  std::unique_ptr<lidar::BaseLidarObstacleDetection> lidar_detection_pipeline_;\n\n  pipeline::PipelineConfig lidar_detection_config_;\n\n  std::shared_ptr<apollo::cyber::Writer<LidarFrameMessage>> writer_;\n};\n\nCYBER_REGISTER_COMPONENT(LidarDetectionComponent);\n\n}  // namespace onboard\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2020 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <atomic>\n#include <memory>\n#include <string>\n#include <limits>\n\n#include \"cyber/cyber.h\"\n#include \"modules/perception/lidar/app/lidar_obstacle_detection.h\"\n#include \"modules/perception/lidar/common/lidar_frame.h\"\n#include \"modules/perception/onboard/inner_component_messages/lidar_inner_component_messages.h\"\n#include \"modules/perception/onboard/transform_wrapper/transform_wrapper.h\"\n\n#include \"modules/common_msgs/sensor_msgs/pointcloud.pb.h\"\n#include \"modules/perception/onboard/proto/lidar_component_config.pb.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace onboard {\n\nclass LidarDetectionComponent : public cyber::Component<drivers::PointCloud> {\n public:\n  using PipelineConfig = pipeline::PipelineConfig;\n\n public:\n  LidarDetectionComponent() = default;\n  virtual ~LidarDetectionComponent() = default;\n\n  bool Init() override;\n  bool Proc(const std::shared_ptr<drivers::PointCloud>& message) override;\n\n private:\n  bool InitAlgorithmPlugin();\n  bool InternalProc(\n      const std::shared_ptr<const drivers::PointCloud>& in_message,\n      const std::shared_ptr<LidarFrameMessage>& out_message);\n\n  bool ConvertCloud(\n      const std::shared_ptr<const drivers::PointCloud>& from,\n      std::shared_ptr<base::AttributePointCloud<base::PointF>> to);\n\n private:\n  static std::atomic<uint32_t> seq_num_;\n  std::string sensor_name_;\n  std::string detector_name_;\n  bool enable_hdmap_ = true;\n  float lidar_query_tf_offset_ = 20.0f;\n  std::string lidar2novatel_tf2_child_frame_id_;\n  std::string output_channel_name_;\n  base::SensorInfo sensor_info_;\n  TransformWrapper lidar2world_trans_;\n  // std::unique_ptr<lidar::BaseLidarObstacleDetection> detector_;\n\n  std::unique_ptr<lidar::BaseLidarObstacleDetection> lidar_detection_pipeline_;\n\n  pipeline::PipelineConfig lidar_detection_config_;\n\n  std::shared_ptr<apollo::cyber::Writer<LidarFrameMessage>> writer_;\n};\n\nCYBER_REGISTER_COMPONENT(LidarDetectionComponent);\n\n}  // namespace onboard\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2020 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 162,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except in with the. You obtain copy the License * may a of License * *://..///LICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License the for specific governing and limitations the License *****************************************************************************/pragma # onceincludeatomic # <>includememory # <string # <>includelimits # \"cy/bercy.\"includemodulesper/ar///arob_.\"includemodulesper/arcommonlid_frameh # \"/ceptionon/innercomponentmessageslid_innercomponentmessagesh # \"modulesper/boardtransformwrappertransformwrapperh # \"/commonmsgssensormsgspoint...\"includemodulesper/boardprotolid__configpbh namespacepol { namespaceception namespaceboard classidDetection : cy::::<<::> public usinglineConfig pipelinePipeline;: LarComponent =; ~idDetection() default virtualLarComponent =; Init override bool(); Procconst::_<::::>&) override private boolAlgorithm(); Internal( stdsharedptrconst::DB",
        "confidence": 0.9177976250648499,
        "hesitated": false,
        "resolved": false
    }
]