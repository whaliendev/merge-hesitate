[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass FilterBbox : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  FilterBbox() = default;\n\n  explicit FilterBbox(const PluginConfig& plugin_config);\n\n  virtual ~FilterBbox() = default;\n\n  bool Init(const PluginConfig &plugin_config) override;\n\n  bool Process(DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  struct MinDims {\n    float min_2d_height = 0.0f;\n    float min_3d_height = 0.0f;\n    float min_3d_length = 0.0f;\n    float min_3d_width = 0.0f;\n  };\n\n  void filter_bbox(const MinDims &min_dims,\n                   std::vector<base::ObjectPtr> *objects);\n\n  MinDims min_dims_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass FilterBbox : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  FilterBbox() = default;\n\n  explicit FilterBbox(const PluginConfig& plugin_config);\n\n  virtual ~FilterBbox() = default;\n\n  bool Init(const PluginConfig &plugin_config) override;\n\n  bool Process(DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  struct MinDims {\n    float min_2d_height = 0.0f;\n    float min_3d_height = 0.0f;\n    float min_3d_length = 0.0f;\n    float min_3d_width = 0.0f;\n  };\n\n  void filter_bbox(const MinDims &min_dims,\n                   std::vector<base::ObjectPtr> *objects);\n\n  MinDims min_dims_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass FilterBbox : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  FilterBbox() = default;\n\n  explicit FilterBbox(const PluginConfig& plugin_config);\n\n  virtual ~FilterBbox() = default;\n\n  bool Init(const PluginConfig &plugin_config) override;\n\n  bool Process(DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  struct MinDims {\n    float min_2d_height = 0.0f;\n    float min_3d_height = 0.0f;\n    float min_3d_length = 0.0f;\n    float min_3d_width = 0.0f;\n  };\n\n  void filter_bbox(const MinDims &min_dims,\n                   std::vector<base::ObjectPtr> *objects);\n\n  MinDims min_dims_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 132,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Alo Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except in with License * may obtain copy the License * *://../licensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludevector # <>includemodulesper//..\"includemodulesper///////////////////////////////////.\" alo namespaceception namespace { camera classBbox public:: {: Plugin =::Config usingFrame pipelineData;: Filterbox = default explicitB( Plugin&_); ~B() default bool( Plugin&_); bool( Plugin&_); bool(Framedataframe boolEnabled const { enable } stdstring() override bool( Plugin &_); bool(Framedataframe boolEnabled const { enable }:: Name const { name }: structDims float_dheight 0.f float_dheight 0.f float_dheight 0.f float_d",
        "confidence": 0.9391875267028809,
        "hesitated": false,
        "resolved": false
    }
]