[
    {
        "a_contents": "bool SemanticReviser::Init(const StageConfig& stage_config) {\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  semantic_param_ = stage_config.semantic_reviser_config();\n\n  int non_blink_coef = 2;\n  revise_time_s_ = semantic_param_.revise_time_second();\n  blink_threshold_s_ = semantic_param_.blink_threshold_second();\n  hysteretic_threshold_ = semantic_param_.hysteretic_threshold_count();\n  non_blink_threshold_s_ =\n      blink_threshold_s_ * static_cast<float>(non_blink_coef);\n\n  ADEBUG << \"revise_time_s_: \" << revise_time_s_;\n  ADEBUG << \"blink_threshold_s_: \" << blink_threshold_s_;\n  ADEBUG << \"hysteretic_threshold_: \" << hysteretic_threshold_;\n\n  return true;\n}\n\nbool SemanticReviser::Process(DataFrame* data_frame) {\n  if (data_frame == nullptr || data_frame->camera_frame == nullptr)\n    return false;\n\n  TrafficLightTrackerOptions traffic_light_tracker_options;\n  bool res = Track(traffic_light_tracker_options, data_frame->camera_frame);\n\n  return res;\n}\n",
        "b_contents": "bool SemanticReviser::Init(const StageConfig& stage_config){\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  semantic_param_ = stage_config.semantic_reviser_config();\n\n  int non_blink_coef = 2;\n  revise_time_s_ = semantic_param_.revise_time_second();\n  blink_threshold_s_ = semantic_param_.blink_threshold_second();\n  hysteretic_threshold_ = semantic_param_.hysteretic_threshold_count();\n  non_blink_threshold_s_ =\n      blink_threshold_s_ * static_cast<float>(non_blink_coef);\n\n  ADEBUG << \"revise_time_s_: \" << revise_time_s_;\n  ADEBUG << \"blink_threshold_s_: \" << blink_threshold_s_;\n  ADEBUG << \"hysteretic_threshold_: \" << hysteretic_threshold_;\n\n  return true;\n}\n\nbool SemanticReviser::Process(DataFrame* data_frame) {\n  if (data_frame == nullptr || data_frame->camera_frame == nullptr)\n    return false;\n\n  TrafficLightTrackerOptions traffic_light_tracker_options;\n  bool res = Track(traffic_light_tracker_options, data_frame->camera_frame);\n\n  return res;\n}\n",
        "base_contents": "",
        "res_region": "bool SemanticReviser::Init(const StageConfig& stage_config) {\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  semantic_param_ = stage_config.semantic_reviser_config();\n\n  int non_blink_coef = 2;\n  revise_time_s_ = semantic_param_.revise_time_second();\n  blink_threshold_s_ = semantic_param_.blink_threshold_second();\n  hysteretic_threshold_ = semantic_param_.hysteretic_threshold_count();\n  non_blink_threshold_s_ =\n      blink_threshold_s_ * static_cast<float>(non_blink_coef);\n\n  ADEBUG << \"revise_time_s_: \" << revise_time_s_;\n  ADEBUG << \"blink_threshold_s_: \" << blink_threshold_s_;\n  ADEBUG << \"hysteretic_threshold_: \" << hysteretic_threshold_;\n\n  return true;\n}\n\nbool SemanticReviser::Process(DataFrame* data_frame) {\n  if (data_frame == nullptr || data_frame->camera_frame == nullptr)\n    return false;\n\n  TrafficLightTrackerOptions traffic_light_tracker_options;\n  bool res = Track(traffic_light_tracker_options, data_frame->camera_frame);\n\n  return res;\n}\n",
        "lookback": "  if (!Initialize(stage_config)) {",
        "lookahead": "void SemanticReviser::UpdateHistoryAndLights(",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 65,
        "end_line": 130,
        "merge_gen_region": " SemanticiserInitconstConfig stageconfig { (!(_))boolanticiserInitconstConfig stageconfig { (! (!(_)) return; semanticparam =_.nticrev_(); nonblinkcoef 2;isetimes =_ semanticparamrev___(); nonblinkcoef 2;isetimes =__.__.isetimesecond blinkthresholds =__.__();stereticthresholdsecond hyeticthreshold =__.stereticthresholdcount nonblinkthresholds =____ staticcastfloatnonblinkcoef A <<rev____ \" rev____;DEBUG <<blinkthreshold___ \" blinkthresholds ADEBUG \"stereticthreshold: << hyeticthreshold return; boolanticiserProcessData*_) ifdata_ == ||_->cameraframe nullptr) false TraLightOptions_____; res Tracktrafficlighttrackeroptions bool =(___,_->_->_); res }",
        "confidence": 0.9340236186981201,
        "hesitated": false,
        "resolved": false
    }
]