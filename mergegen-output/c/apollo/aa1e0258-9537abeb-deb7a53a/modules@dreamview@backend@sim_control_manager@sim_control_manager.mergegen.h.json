[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <limits>\n#include <memory>\n#include <string>\n\n#include \"cyber/cyber.h\"\n#include \"modules/common/configs/config_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/dynamic_model_factory.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/sim_control_base.h\"\n\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class SimControlManager\n */\nclass SimControlManager {\n public:\n  SimControlManager() {}\n  bool IsEnabled() const { return enabled_; }\n  nlohmann::json LoadDynamicModels();\n  bool AddDynamicModel(const std::string &dynamic_model_name);\n  bool ChangeDynamicModel(const std::string &dynamic_model_name);\n  bool DeleteDynamicModel(const std::string &dynamic_model_name);\n  void ResetDynamicModel();\n  void Restart(double x, double y);\n  void Reset();\n\n  virtual ~SimControlManager() { Stop(); }\n\n  std::string Name() const;\n\n  void RunOnce();\n\n  /**\n   * @brief module initialization function\n   * @return initialization status\n   */\n  bool Init(bool set_start_point, double start_velocity = 0.0,\n            double start_acceleration = 0.0,\n            double start_heading = std::numeric_limits<double>::max());\n\n  /**\n   * @brief module start function\n   */\n  void Start();\n\n  /**\n   * @brief module stop function\n   */\n  void Stop();\n\n private:\n  SimControlBase *model_ptr_;\n  std::string current_dynamic_model_ = \"\";\n  bool enabled_ = false;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <memory>\n#include <string>\n\n#include \"cyber/cyber.h\"\n\n#include \"modules/common/configs/config_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/dynamic_model_factory.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/sim_control_base.h\"\n\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class SimControlManager\n */\nclass SimControlManager {\n public:\n  SimControlManager() {}\n  bool IsEnabled() const { return enabled_; }\n  nlohmann::json LoadDynamicModels();\n  bool AddDynamicModel(std::string &dynamic_model_name);\n  bool ChangeDynamicModel(std::string &dynamic_model_name);\n  bool DeleteDynamicModel(std::string &dynamic_model_name);\n  void ResetDynamicModel();\n  void Restart(double x, double y);\n  void Reset();\n\n  virtual ~SimControlManager() { Stop(); }\n\n  std::string Name() const;\n\n  void RunOnce();\n\n  /**\n   * @brief module initialization function\n   * @return initialization status\n   */\n  bool Init(bool set_start_point, double start_velocity = 0.0,\n            double start_acceleration = 0.0,\n            double start_heading = std::numeric_limits<double>::max());\n\n  /**\n   * @brief module start function\n   */\n  void Start();\n\n  /**\n   * @brief module stop function\n   */\n  void Stop();\n\n private:\n  SimControlBase* model_ptr_;\n  std::string current_dynamic_model_ = \"\";\n  bool enabled_ = false;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <limits>\n#include <memory>\n#include <string>\n\n#include \"cyber/cyber.h\"\n#include \"modules/common/configs/config_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/common/sim_control_gflags.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/dynamic_model_factory.h\"\n#include \"modules/dreamview/backend/sim_control_manager/core/sim_control_base.h\"\n\n/**\n * @namespace apollo::dreamview\n * @brief apollo::dreamview\n */\nnamespace apollo {\nnamespace dreamview {\n\n/**\n * @class SimControlManager\n */\nclass SimControlManager {\n public:\n  SimControlManager() {}\n  bool IsEnabled() const { return enabled_; }\n  nlohmann::json LoadDynamicModels();\n  bool AddDynamicModel(const std::string &dynamic_model_name);\n  bool ChangeDynamicModel(const std::string &dynamic_model_name);\n  bool DeleteDynamicModel(const std::string &dynamic_model_name);\n  void ResetDynamicModel();\n  void Restart(double x, double y);\n  void Reset();\n\n  virtual ~SimControlManager() { Stop(); }\n\n  std::string Name() const;\n\n  void RunOnce();\n\n  /**\n   * @brief module initialization function\n   * @return initialization status\n   */\n  bool Init(bool set_start_point, double start_velocity = 0.0,\n            double start_acceleration = 0.0,\n            double start_heading = std::numeric_limits<double>::max());\n\n  /**\n   * @brief module start function\n   */\n  void Start();\n\n  /**\n   * @brief module stop function\n   */\n  void Stop();\n\n private:\n  SimControlBase *model_ptr_;\n  std::string current_dynamic_model_ = \"\";\n  bool enabled_ = false;\n};\n\n}  // namespace dreamview\n}  // namespace apollo",
        "lookback": " * Copyright 2017 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 167,
        "merge_gen_region": " Copyright Thepol Authors All Reserved/****************************************************************************** Copyright Thepol Authors All Reserved * Licensed the License, 2 * httpwwwapacheorglicensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludelimits # <>includememory # <>includecy/bercy.\"includemodulescommonconfigsconfigg.\"includemodulesdrview//view//___/commonsimcontrolg.h # \"modulesdrviewbackendsimcontrolmanagercommonsim____flagsh # \"modulesdrviewbackendsim___managercoredynamicmodelfactoryh # \"/eam/eam/eamcontrolmanagercoresimcontrolbase.\" /** @ alodrview namespacepol { drview /** @ *classControl */ SimManager classControl public SimManager {} Is() const return_; nlomannjsonDynamic(); AddModelconst:: &__); ChangeModelconst:: &___); boolDynamic( stdstringdynamicmodelnamename boolDynamic( stdstringdynamicmodelname voidDynamic(); Restartdouble, y); Reset virtualSimManager {(); stdstring() const voidOnce /** @ module function @ initialization */ Init",
        "confidence": 0.9210823178291321,
        "hesitated": false,
        "resolved": false
    }
]