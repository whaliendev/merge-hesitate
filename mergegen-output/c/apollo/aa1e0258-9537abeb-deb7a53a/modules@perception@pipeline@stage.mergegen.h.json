[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <unordered_map>\n#include <vector>\n\n#include \"modules/perception/pipeline/proto/pipeline_config.pb.h\"\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace pipeline {\n\nclass Stage {\n public:\n  Stage() = default;\n  virtual ~Stage() = default;\n\n  virtual bool Init(const StageConfig& stage_config) = 0;\n\n  virtual bool Process(DataFrame* data_frame) = 0;\n\n  virtual bool IsEnabled() const = 0;\n\n  virtual std::string Name() const = 0;\n\n  StageConfig stage_config_;\n\n protected:\n  bool Initialize(const StageConfig& stage_config);\n\n private:\n  void Clear();\n\n protected:\n  bool enable_ = false;\n  std::string name_;\n\n  std::unordered_map<PluginType, PluginConfig, std::hash<int>>\n      plugin_config_map_;\n};\n\n}  // namespace pipeline\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n\n#pragma once\n\n#include <string>\n#include <unordered_map>\n#include <vector>\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\n#include \"modules/perception/pipeline/proto/pipeline_config.pb.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace pipeline {\n\nclass Stage {\n public:\n  Stage() = default;\n  virtual ~Stage() = default;\n\n  virtual bool Init(const StageConfig& stage_config) = 0;\n\n  virtual bool Process(DataFrame* data_frame) = 0;\n\n  virtual bool IsEnabled() const = 0;;\n\n  virtual std::string Name() const = 0;\n\n  StageConfig stage_config_;\n\n protected:\n  bool Initialize(const StageConfig& stage_config);\n\n private:\n  void Clear();\n\n protected:\n  bool enable_ = false;\n  std::string name_;\n\n  std::unordered_map<PluginType, PluginConfig, std::hash<int>>\n      plugin_config_map_;\n};\n\n} // namespace pipeline\n} // namespace perception\n} // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#pragma once\n\n#include <string>\n#include <unordered_map>\n#include <vector>\n\n#include \"modules/perception/pipeline/proto/pipeline_config.pb.h\"\n\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace pipeline {\n\nclass Stage {\n public:\n  Stage() = default;\n  virtual ~Stage() = default;\n\n  virtual bool Init(const StageConfig& stage_config) = 0;\n\n  virtual bool Process(DataFrame* data_frame) = 0;\n\n  virtual bool IsEnabled() const = 0;\n\n  virtual std::string Name() const = 0;\n\n  StageConfig stage_config_;\n\n protected:\n  bool Initialize(const StageConfig& stage_config);\n\n private:\n  void Clear();\n\n protected:\n  bool enable_ = false;\n  std::string name_;\n\n  std::unordered_map<PluginType, PluginConfig, std::hash<int>>\n      plugin_config_map_;\n};\n\n}  // namespace pipeline\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 130,
        "merge_gen_region": " Copyright022 Alo. Rights. * Licensed the Apache, 20theLicense * may use file in with License * may obtain copy the License * *://wwwapacheorglicensesLICENSE20 * Unless by law agreed in writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License *****************************************************************************/pragma # onceincludestring # <_>includeunorderedmap # <>includevector # \"modulesper/////////////////////////////////.\"includemodulesper//.\" per { pipeline class { public Stage() default virtualStage =; bool InitconstConfig stageconfig =; bool ProcessData*_) 0; bool Is() const 0; stdstring() const 0 virtual:: Name const 0 Stage stageconfig_;: InitializeconstConfig stageconfig private void();: enable =;:: name stdunorderedmapPlugin,Config stdhashint pluginconfigmap }; // pipeline // per } namespacepol",
        "confidence": 0.9603626132011414,
        "hesitated": false,
        "resolved": false
    }
]