[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/preprocessor/camera_detection_preprocessor.h\"\n\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nbool CameraDetectionPreprocessor::Init(const StageConfig& stage_config) {\n  ACHECK(stage_config.has_camera_detection_preprocessor_config());\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  get_image_data_ =\n      pipeline::dynamic_unique_cast<GetImageData>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::GET_IMAGE_DATA]));\n  CHECK_NOTNULL(get_image_data_);\n\n  resize_and_normalize_ =\n      pipeline::dynamic_unique_cast<ReSizeAndNormalize>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::RESIZIE_AND_NORMALIZE]));\n  CHECK_NOTNULL(resize_and_normalize_);\n\n  return true;\n}\n\nbool CameraDetectionPreprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool CameraDetectionPreprocessor::Process(DataFrame* data_frame, float* k_inv,\n                                          float* image_data_array) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  if (nullptr == k_inv) {\n    AERROR << \"Input null k_inv ptr.\";\n    return false;\n  }\n  if (nullptr == image_data_array) {\n    AERROR << \"Input null image_data_array ptr.\";\n    return false;\n  }\n\n  cv::Mat image_cv;\n  if (!get_image_data_->Process(data_frame, k_inv, &image_cv)) {\n    return false;\n  }\n\n  if (!resize_and_normalize_->Process(image_cv, image_data_array)) {\n    return false;\n  }\n\n  return true;\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/preprocessor/camera_detection_preprocessor.h\"\n\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nbool CameraDetectionPreprocessor::Init(const StageConfig& stage_config) {\n  ACHECK(stage_config.has_camera_detection_preprocessor_config());\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  get_image_data_ =\n      pipeline::dynamic_unique_cast<GetImageData>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::GET_IMAGE_DATA])\n      );\n  CHECK_NOTNULL(get_image_data_);\n\n  resize_and_normalize_ =\n      pipeline::dynamic_unique_cast<ReSizeAndNormalize>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::RESIZIE_AND_NORMALIZE])\n      );\n  CHECK_NOTNULL(resize_and_normalize_);\n\n  return true;\n}\n\nbool CameraDetectionPreprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool CameraDetectionPreprocessor::Process(DataFrame* data_frame, float* k_inv,\n                                          float* image_data_array) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  if (nullptr == k_inv) {\n    AERROR << \"Input null k_inv ptr.\";\n    return false;\n  }\n  if (nullptr == image_data_array) {\n    AERROR << \"Input null image_data_array ptr.\";\n    return false;\n  }\n\n  cv::Mat image_cv;\n  if (!get_image_data_->Process(data_frame, k_inv, &image_cv)) {\n    return false;\n  }\n\n  if (!resize_and_normalize_->Process(image_cv, image_data_array)) {\n    return false;\n  }\n\n  return true;\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/preprocessor/camera_detection_preprocessor.h\"\n\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nbool CameraDetectionPreprocessor::Init(const StageConfig& stage_config) {\n  ACHECK(stage_config.has_camera_detection_preprocessor_config());\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  get_image_data_ =\n      pipeline::dynamic_unique_cast<GetImageData>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::GET_IMAGE_DATA]));\n  CHECK_NOTNULL(get_image_data_);\n\n  resize_and_normalize_ =\n      pipeline::dynamic_unique_cast<ReSizeAndNormalize>(\n          pipeline::PluginFactory::CreatePlugin(\n              plugin_config_map_[PluginType::RESIZIE_AND_NORMALIZE]));\n  CHECK_NOTNULL(resize_and_normalize_);\n\n  return true;\n}\n\nbool CameraDetectionPreprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool CameraDetectionPreprocessor::Process(DataFrame* data_frame, float* k_inv,\n                                          float* image_data_array) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  if (nullptr == k_inv) {\n    AERROR << \"Input null k_inv ptr.\";\n    return false;\n  }\n  if (nullptr == image_data_array) {\n    AERROR << \"Input null image_data_array ptr.\";\n    return false;\n  }\n\n  cv::Mat image_cv;\n  if (!get_image_data_->Process(data_frame, k_inv, &image_cv)) {\n    return false;\n  }\n\n  if (!resize_and_normalize_->Process(image_cv, image_data_array)) {\n    return false;\n  }\n\n  return true;\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 0,
        "end_line": 163,
        "merge_gen_region": " Copyright022 Alo. Rights. Rights. * Licensed the Apache, 20theLicense *\"); you not this except in with the. * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License *****************************************************************************/includemodulesper///staclepre/____.\"includemodulesper////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
        "confidence": 0.931840717792511,
        "hesitated": false,
        "resolved": false
    }
]