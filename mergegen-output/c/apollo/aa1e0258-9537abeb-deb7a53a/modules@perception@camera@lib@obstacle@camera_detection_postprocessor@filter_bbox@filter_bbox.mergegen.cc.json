[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/filter_bbox/filter_bbox.h\"\n\n#include \"cyber/common/file.h\"\n#include \"cyber/common/log.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nFilterBbox::FilterBbox(const PluginConfig& plugin_config) {\n  Init(plugin_config);\n}\n\nbool FilterBbox::Init(const PluginConfig &plugin_config) {\n  ACHECK(plugin_config.has_filter_bbox_config());\n  min_dims_.min_2d_height = plugin_config.filter_bbox_config().min_2d_height();\n  min_dims_.min_3d_height = plugin_config.filter_bbox_config().min_3d_height();\n  min_dims_.min_3d_width = plugin_config.filter_bbox_config().min_3d_width();\n  min_dims_.min_3d_length = plugin_config.filter_bbox_config().min_3d_length();\n  return true;\n}\n\nbool FilterBbox::Process(DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null dataframe ptr.\";\n    return false;\n  }\n\n  auto frame = data_frame->camera_frame;\n  filter_bbox(min_dims_, &(frame->detected_objects));\n\n  return true;\n}\n\nvoid FilterBbox::filter_bbox(const MinDims &min_dims,\n                             std::vector<base::ObjectPtr> *objects) {\n  int valid_obj_idx = 0;\n  int total_obj_idx = 0;\n  while (total_obj_idx < static_cast<int>(objects->size())) {\n    const auto &obj = (*objects)[total_obj_idx];\n    if ((obj->camera_supplement.box.ymax - obj->camera_supplement.box.ymin) >=\n            min_dims.min_2d_height &&\n        (min_dims.min_3d_height <= 0 ||\n         obj->size[2] >= min_dims.min_3d_height) &&\n        (min_dims.min_3d_width <= 0 || obj->size[1] >= min_dims.min_3d_width) &&\n        (min_dims.min_3d_length <= 0 ||\n         obj->size[0] >= min_dims.min_3d_length)) {\n      (*objects)[valid_obj_idx] = (*objects)[total_obj_idx];\n      ++valid_obj_idx;\n    }\n    ++total_obj_idx;\n  }\n  AINFO << valid_obj_idx << \" of \" << total_obj_idx << \" obstacles kept\";\n  objects->resize(valid_obj_idx);\n  AINFO << \"Number of detected obstacles: \" << objects->size();\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/filter_bbox/filter_bbox.h\"\n\n#include \"cyber/common/file.h\"\n#include \"cyber/common/log.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nFilterBbox::FilterBbox(const PluginConfig& plugin_config) {\n  Init(plugin_config);\n}\n\n// wxt todo: delete min_dims from model_param\nbool FilterBbox::Init(const PluginConfig &plugin_config) {\n  ACHECK(plugin_config.has_filter_bbox_config());\n  min_dims_.min_2d_height = plugin_config.filter_bbox_config().min_2d_height();\n  min_dims_.min_3d_height = plugin_config.filter_bbox_config().min_3d_height();\n  min_dims_.min_3d_width = plugin_config.filter_bbox_config().min_3d_width();\n  min_dims_.min_3d_length = plugin_config.filter_bbox_config().min_3d_length();\n  return true;\n}\n\nbool FilterBbox::Process(DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null dataframe ptr.\";\n    return false;\n  }\n\n  auto frame = data_frame->camera_frame;\n  filter_bbox(min_dims_, &(frame->detected_objects));\n\n  return true;\n}\n\nvoid FilterBbox::filter_bbox(const MinDims &min_dims,\n                             std::vector<base::ObjectPtr> *objects) {\n  int valid_obj_idx = 0;\n  int total_obj_idx = 0;\n  while (total_obj_idx < static_cast<int>(objects->size())) {\n    const auto &obj = (*objects)[total_obj_idx];\n    if ((obj->camera_supplement.box.ymax - obj->camera_supplement.box.ymin) >=\n            min_dims.min_2d_height &&\n        (min_dims.min_3d_height <= 0 ||\n         obj->size[2] >= min_dims.min_3d_height) &&\n        (min_dims.min_3d_width <= 0 || obj->size[1] >= min_dims.min_3d_width) &&\n        (min_dims.min_3d_length <= 0 ||\n         obj->size[0] >= min_dims.min_3d_length)) {\n      (*objects)[valid_obj_idx] = (*objects)[total_obj_idx];\n      ++valid_obj_idx;\n    }\n    ++total_obj_idx;\n  }\n  AINFO << valid_obj_idx << \" of \" << total_obj_idx << \" obstacles kept\";\n  objects->resize(valid_obj_idx);\n  AINFO << \"Number of detected obstacles: \" << objects->size();\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/filter_bbox/filter_bbox.h\"\n\n#include \"cyber/common/file.h\"\n#include \"cyber/common/log.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nFilterBbox::FilterBbox(const PluginConfig& plugin_config) {\n  Init(plugin_config);\n}\n\nbool FilterBbox::Init(const PluginConfig &plugin_config) {\n  ACHECK(plugin_config.has_filter_bbox_config());\n  min_dims_.min_2d_height = plugin_config.filter_bbox_config().min_2d_height();\n  min_dims_.min_3d_height = plugin_config.filter_bbox_config().min_3d_height();\n  min_dims_.min_3d_width = plugin_config.filter_bbox_config().min_3d_width();\n  min_dims_.min_3d_length = plugin_config.filter_bbox_config().min_3d_length();\n  return true;\n}\n\nbool FilterBbox::Process(DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null dataframe ptr.\";\n    return false;\n  }\n\n  auto frame = data_frame->camera_frame;\n  filter_bbox(min_dims_, &(frame->detected_objects));\n\n  return true;\n}\n\nvoid FilterBbox::filter_bbox(const MinDims &min_dims,\n                             std::vector<base::ObjectPtr> *objects) {\n  int valid_obj_idx = 0;\n  int total_obj_idx = 0;\n  while (total_obj_idx < static_cast<int>(objects->size())) {\n    const auto &obj = (*objects)[total_obj_idx];\n    if ((obj->camera_supplement.box.ymax - obj->camera_supplement.box.ymin) >=\n            min_dims.min_2d_height &&\n        (min_dims.min_3d_height <= 0 ||\n         obj->size[2] >= min_dims.min_3d_height) &&\n        (min_dims.min_3d_width <= 0 || obj->size[1] >= min_dims.min_3d_width) &&\n        (min_dims.min_3d_length <= 0 ||\n         obj->size[0] >= min_dims.min_3d_length)) {\n      (*objects)[valid_obj_idx] = (*objects)[total_obj_idx];\n      ++valid_obj_idx;\n    }\n    ++total_obj_idx;\n  }\n  AINFO << valid_obj_idx << \" of \" << total_obj_idx << \" obstacles kept\";\n  objects->resize(valid_obj_idx);\n  AINFO << \"Number of detected obstacles: \" << objects->size();\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 156,
        "merge_gen_region": " Copyright022 Alo. Rights. Rights. * Licensed the Apache, 20theLicense * may use file in with License * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the License License the language permissions * under License *****************************************************************************/includemodulesper///staclecameralibob/_processorfilterbboxfilterbboxfilterbboxh # \"bercommonfileh # \"bercommonlogh namespacepol { namespaceception namespace { FilterboxFilterboxconst Plugin&_) Initpluginconfig } FilterboxInitconstConfigpluginconfig { A(_.___());__.min2_ =_.______ =_._______ =_.______ =_._____ =_._____ =_.___()._dheight pluginconfigfilterbboxconfig().__dheight mindimsminmin3_ =_.___()._dheight mindimsminmin3_ =_.___()._dheight mindimsminmin3_ =_._",
        "confidence": 0.9297544360160828,
        "hesitated": false,
        "resolved": false
    }
]