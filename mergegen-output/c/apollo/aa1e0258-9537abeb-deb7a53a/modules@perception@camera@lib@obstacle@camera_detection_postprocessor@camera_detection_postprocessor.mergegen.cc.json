[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/camera_detection_postprocessor.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nbool CameraDetectionPostprocessor::Init(const StageConfig &stage_config) {\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  ACHECK(stage_config.has_camera_detection_postprocessor_config());\n  camera_detection_postprocessor_config_ =\n      stage_config.camera_detection_postprocessor_config();\n\n  // camera_get_object_ =\n  //     pipeline::dynamic_unique_cast<GetObject>(\n  //         pipeline::PluginFactory::CreatePlugin(\n  //             plugin_config_map_[PluginType::POINTCLOUD_GET_OBJECTS])\n  //     );\n\n  // if (!camera_get_object_->Init(stage_config.get_object())) {\n  //   return false;\n  // }\n\n  return true;\n}\n\nbool CameraDetectionPostprocessor::Process(DataFrame *data_frame) {\n  return true;\n}\n\nbool CameraDetectionPostprocessor::Process(\n    const std::vector<float> &detect_result,\n    const std::vector<base::ObjectSubType> &types, DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  // todo(zero): need fix\n  // if (nullptr == image) {\n  //   AERROR << \"Input null image ptr.\";\n  //   return false;\n  // }\n  // if (nullptr == k_inv) {\n  //   AERROR << \"Input null k_inv ptr.\";\n  //   return false;\n  // }\n\n  // if (!camera_get_object_->Process(detect_result, types, data_frame)){\n  //   return false;\n  // }\n\n  return true;\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/camera_detection_postprocessor.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nbool CameraDetectionPostprocessor::Init(const StageConfig& stage_config) {\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  ACHECK(stage_config.has_camera_detection_postprocessor_config());\n  camera_detection_postprocessor_config_ =\n      stage_config.camera_detection_postprocessor_config();\n\n  // camera_get_object_ =\n  //     pipeline::dynamic_unique_cast<GetObject>(\n  //         pipeline::PluginFactory::CreatePlugin(\n  //             plugin_config_map_[PluginType::POINTCLOUD_GET_OBJECTS])\n  //     );\n\n  // if (!camera_get_object_->Init(stage_config.get_object())) {\n  //   return false;\n  // }\n\n  return true;\n}\n\nbool CameraDetectionPostprocessor::Process(DataFrame* data_frame) {\n  return true;\n}\n\nbool CameraDetectionPostprocessor::Process(const std::vector<float> &detect_result,\n               const std::vector<base::ObjectSubType> &types,\n               DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  // todo(zero): need fix\n  // if (nullptr == image) {\n  //   AERROR << \"Input null image ptr.\";\n  //   return false;\n  // }\n  // if (nullptr == k_inv) {\n  //   AERROR << \"Input null k_inv ptr.\";\n  //   return false;\n  // }\n\n  // if (!camera_get_object_->Process(detect_result, types, data_frame)){\n  //   return false;\n  // }\n\n  return true;\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/camera_detection_postprocessor.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nbool CameraDetectionPostprocessor::Init(const StageConfig &stage_config) {\n  if (!Initialize(stage_config)) {\n    return false;\n  }\n\n  ACHECK(stage_config.has_camera_detection_postprocessor_config());\n  camera_detection_postprocessor_config_ =\n      stage_config.camera_detection_postprocessor_config();\n\n  // camera_get_object_ =\n  //     pipeline::dynamic_unique_cast<GetObject>(\n  //         pipeline::PluginFactory::CreatePlugin(\n  //             plugin_config_map_[PluginType::POINTCLOUD_GET_OBJECTS])\n  //     );\n\n  // if (!camera_get_object_->Init(stage_config.get_object())) {\n  //   return false;\n  // }\n\n  return true;\n}\n\nbool CameraDetectionPostprocessor::Process(DataFrame *data_frame) {\n  return true;\n}\n\nbool CameraDetectionPostprocessor::Process(\n    const std::vector<float> &detect_result,\n    const std::vector<base::ObjectSubType> &types, DataFrame *data_frame) {\n  if (nullptr == data_frame) {\n    AERROR << \"Input null data_frame ptr.\";\n    return false;\n  }\n  // todo(zero): need fix\n  // if (nullptr == image) {\n  //   AERROR << \"Input null image ptr.\";\n  //   return false;\n  // }\n  // if (nullptr == k_inv) {\n  //   AERROR << \"Input null k_inv ptr.\";\n  //   return false;\n  // }\n\n  // if (!camera_get_object_->Process(detect_result, types, data_frame)){\n  //   return false;\n  // }\n\n  return true;\n}\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "base_underutilized"
        ],
        "start_line": 0,
        "end_line": 153,
        "merge_gen_region": " Copyright022 Alo. Rights. Rights. * Licensed the Apache, 20theLicense * may use file in with License * may obtain copy the License * *://.///LICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the See License the for specific governing and limitations the License *****************************************************************************/includemodulesper///staclecameradetectionpost/__processorcameradetectionpost.\" alo namespaceception boolDetectionprocessorInitconstConfigstageconfig { (!(_) ifInitializestageconfig { false }CHECKstageconfighascameradetectionpost_());____ cameradetectionpost__ =_.___processorconfig //__ stageconfigcameradetectionpost_(); cameragetobject = pipelinedynamicuniquecastGetObject //::FactoryCreate( pluginconfigmapPlugin::CLO___S // // // ( ( ==_) //ERROR \" null_ ptr // false } todozero need fix ifnullptr image { A <<Input <<Input dataframe.\"; return; // // ( ( ==_) //ERROR \" null ptr.\"; return; // // ifnullptr k_) //ERROR \" null_ ptr // false // false // ifcameragetobjectProcess((_",
        "confidence": 0.9172531962394714,
        "hesitated": false,
        "resolved": false
    }
]