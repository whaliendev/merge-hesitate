[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <memory>\n#include <algorithm>\n#include <deque>\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/point_cloud.h\"\n#include \"modules/perception/base/point.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointCloudDownSample : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  PointCloudDownSample() = default;\n  explicit PointCloudDownSample(const PluginConfig& plugin_config);\n  virtual ~PointCloudDownSample() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n  bool Process(DataFrame* data_frame, std::vector<float>* points_array,\n               int* num_points_result);\n\n  bool IsEnabled() const override { return enable_; }\n  std::string Name() const override { return name_; }\n\n private:\n  bool DownSample(LidarFrame* lidar_frame, std::vector<float>* points_array,\n                  int* num_points_result);\n  void FuseCloud(const base::PointFCloudPtr& out_cloud_ptr,\n                 const std::deque<base::PointDCloudPtr>& fuse_clouds);\n\n\n\nvoid CloudToArray(const base::PointFCloudPtr& pc_ptr,\n                                         float* out_points_array,\n                                         const float normalizing_factor);\n\n  std::vector<int> GenerateIndices(int start_index, int size, bool shuffle);\n  // to store lidar_frame\n  LidarFrame* lidar_frame_ref_ = nullptr;\n  std::shared_ptr<base::AttributePointCloud<base::PointF>> original_cloud_;\n  std::shared_ptr<base::AttributePointCloud<base::PointD>>\n      original_world_cloud_;\n\n  base::PointFCloudPtr cur_cloud_ptr_;\n\n  // time statistics\n  double cloud_to_array_time_ = 0.0;\n  double downsample_time_ = 0.0;\n  double fuse_time_ = 0.0;\n  double shuffle_time_ = 0.0;\n\n  float x_min_range_;\n  float x_max_range_;\n  float y_min_range_;\n  float y_max_range_;\n  float z_min_range_;\n  float z_max_range_;\n\n  bool enable_downsample_pointcloud_;\n  bool enable_downsample_beams_;\n\n  std::deque<base::PointDCloudPtr> prev_world_clouds_;\n};\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/base/point_cloud.h\"\n#include \"modules/perception/base/point.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointCloudDownSample : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  PointCloudDownSample() = default;\n  explicit PointCloudDownSample(const PluginConfig& plugin_config);\n  virtual ~PointCloudDownSample() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n  bool Process(DataFrame* data_frame, std::vector<float>* points_array,\n               int* num_points_result);\n\n  bool IsEnabled() const override { return enable_; }\n  std::string Name() const override { return name_; }\n\n private:\n  bool DownSample(LidarFrame* lidar_frame, std::vector<float>* points_array,\n                  int* num_points_result);\n  void FuseCloud(const base::PointFCloudPtr& out_cloud_ptr,\n                 const std::deque<base::PointDCloudPtr>& fuse_clouds);\n\n\n\nvoid CloudToArray(const base::PointFCloudPtr& pc_ptr,\n                                         float* out_points_array,\n                                         const float normalizing_factor);\n\n  std::vector<int> GenerateIndices(int start_index, int size, bool shuffle);\n  // to store lidar_frame\n  LidarFrame* lidar_frame_ref_ = nullptr;\n  std::shared_ptr<base::AttributePointCloud<base::PointF>> original_cloud_;\n  std::shared_ptr<base::AttributePointCloud<base::PointD>>\n      original_world_cloud_;\n\n  base::PointFCloudPtr cur_cloud_ptr_;\n\n  // time statistics\n  double cloud_to_array_time_ = 0.0;\n  double downsample_time_ = 0.0;\n  double fuse_time_ = 0.0;\n  double shuffle_time_ = 0.0;\n\n  float x_min_range_;\n  float x_max_range_;\n  float y_min_range_;\n  float y_max_range_;\n  float z_min_range_;\n  float z_max_range_;\n\n  bool enable_downsample_pointcloud_;\n  bool enable_downsample_beams_;\n\n  std::deque<base::PointDCloudPtr> prev_world_clouds_;\n};\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <memory>\n#include <algorithm>\n#include <deque>\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/point_cloud.h\"\n#include \"modules/perception/base/point.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace lidar {\n\nclass PointCloudDownSample : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  PointCloudDownSample() = default;\n  explicit PointCloudDownSample(const PluginConfig& plugin_config);\n  virtual ~PointCloudDownSample() = default;\n\n  bool Init(const PluginConfig& plugin_config) override;\n  bool Process(DataFrame* data_frame, std::vector<float>* points_array,\n               int* num_points_result);\n\n  bool IsEnabled() const override { return enable_; }\n  std::string Name() const override { return name_; }\n\n private:\n  bool DownSample(LidarFrame* lidar_frame, std::vector<float>* points_array,\n                  int* num_points_result);\n  void FuseCloud(const base::PointFCloudPtr& out_cloud_ptr,\n                 const std::deque<base::PointDCloudPtr>& fuse_clouds);\n\n\n\nvoid CloudToArray(const base::PointFCloudPtr& pc_ptr,\n                                         float* out_points_array,\n                                         const float normalizing_factor);\n\n  std::vector<int> GenerateIndices(int start_index, int size, bool shuffle);\n  // to store lidar_frame\n  LidarFrame* lidar_frame_ref_ = nullptr;\n  std::shared_ptr<base::AttributePointCloud<base::PointF>> original_cloud_;\n  std::shared_ptr<base::AttributePointCloud<base::PointD>>\n      original_world_cloud_;\n\n  base::PointFCloudPtr cur_cloud_ptr_;\n\n  // time statistics\n  double cloud_to_array_time_ = 0.0;\n  double downsample_time_ = 0.0;\n  double fuse_time_ = 0.0;\n  double shuffle_time_ = 0.0;\n\n  float x_min_range_;\n  float x_max_range_;\n  float y_min_range_;\n  float y_max_range_;\n  float z_min_range_;\n  float z_max_range_;\n\n  bool enable_downsample_pointcloud_;\n  bool enable_downsample_beams_;\n\n  std::deque<base::PointDCloudPtr> prev_world_clouds_;\n};\n\n}  // namespace lidar\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 181,
        "merge_gen_region": " Copyright022 Alo. Rights. Rights. * Licensed the Apache, 20theLicense *\"); you not this except compliance the License * may obtain copy the License * *://.///LICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the License License the language permissions * under License *****************************************************************************/pragma # onceincludememory # <>includealgorithm # <>includedeque # <>includevector # <>includemodulesper///_.pointcloudh # \"/per//////////////////////////////////////////////////////.\" alo namespaceception namespaceidar classCloudSample public:::: {: Plugin =::Config usingFrame pipelineData;: PointDown() default explicitCloudSampleconstConfig pluginconfig virtualPointCloudSample = default bool( Plugin&_); ~DownSample =; InitconstConfig pluginconfig override bool( Plugin&_); ProcessData*_,::::<>*_,**__,::<>*_",
        "confidence": 0.9345278739929199,
        "hesitated": false,
        "resolved": false
    }
]