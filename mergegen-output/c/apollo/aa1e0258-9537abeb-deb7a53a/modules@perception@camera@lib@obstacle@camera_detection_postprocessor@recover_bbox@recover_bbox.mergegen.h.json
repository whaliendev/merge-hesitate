[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass RecoverBbox : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  RecoverBbox() = default;\n\n  explicit RecoverBbox(const PluginConfig& plugin_config);\n\n  virtual ~RecoverBbox() = default;\n\n  bool Init(const PluginConfig &plugin_config) override;\n\n  bool Process(DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void recover_bbox(int roi_w, int roi_h, int offset_y,\n                  std::vector<base::ObjectPtr> *objects);\n  int roi_w_;\n  int roi_h_;\n  int offset_y_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass RecoverBbox : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  RecoverBbox() = default;\n\n  explicit RecoverBbox(const PluginConfig& plugin_config);\n\n  virtual ~RecoverBbox() = default;\n\n  bool Init(const PluginConfig &plugin_config) override;\n\n  bool Process(DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n\nvoid recover_bbox(int roi_w, int roi_h, int offset_y,\n                  std::vector<base::ObjectPtr> *objects);\n  int roi_w_;\n  int roi_h_;\n  int offset_y_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n\n#include \"modules/perception/base/box.h\"\n#include \"modules/perception/base/object.h\"\n#include \"modules/perception/pipeline/data_frame.h\"\n#include \"modules/perception/pipeline/plugin.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass RecoverBbox : public pipeline::Plugin {\n public:\n  using PluginConfig = pipeline::PluginConfig;\n  using DataFrame = pipeline::DataFrame;\n\n public:\n  RecoverBbox() = default;\n\n  explicit RecoverBbox(const PluginConfig& plugin_config);\n\n  virtual ~RecoverBbox() = default;\n\n  bool Init(const PluginConfig &plugin_config) override;\n\n  bool Process(DataFrame *data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  void recover_bbox(int roi_w, int roi_h, int offset_y,\n                  std::vector<base::ObjectPtr> *objects);\n  int roi_w_;\n  int roi_h_;\n  int offset_y_;\n};\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 121,
        "merge_gen_region": " Copyright022 Alo. Rights. * Licensed the Apache, 20theLicense * may use file in with License * may obtain copy the License * *://..//LICENSE20 * Unless by law agreed in writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License for specific governing and limitations the License *****************************************************************************/pragma # onceincludevector # <>includemodulesper///.\"includemodulesper///////////////////.\"includemodulesper//..\"includemodulesper//.\" per { camera classcoverbox : pipelinePlugin public using Plugin =::Config usingFrame pipelineData;: ReBbox =; ReB() default explicitcoverboxconst Plugin&_); ~ReBbox =;: =;() default bool( Plugin&_); bool( Plugin&_); override bool( Plugin &_); bool(Framedataframe boolEnabled const { enable } stdstring() override bool( Plugin &_); bool(Framedataframe boolEnabled const { enable } stdstring() override bool( Plugin &_); bool(Framedataframe boolEnabled const { enable }:: Name const",
        "confidence": 0.9480461478233337,
        "hesitated": false,
        "resolved": false
    }
]