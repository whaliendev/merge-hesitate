[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n#include <memory>\n\n#include \"modules/perception/pipeline/proto/stage/camera_detection_postprocessor_config.pb.h\"\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/camera_get_object/camera_get_object.h\"\n#include \"modules/perception/pipeline/plugin_factory.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraDetectionPostprocessor : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using Plugin = pipeline::Plugin;\n\n public:\n  CameraDetectionPostprocessor() = default;\n  virtual ~CameraDetectionPostprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(const std::vector<float>& detect_result,\n               const std::vector<base::ObjectSubType>& types,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  CameraDetectionPostprocessorConfig camera_detection_postprocessor_config_;\n\n  std::unique_ptr<CameraGetObject> camera_get_object_;\n};  // class CameraDetectionPostprocessor\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "b_contents": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/camera_get_object/camera_get_object.h\"\n#include \"modules/perception/pipeline/proto/stage/camera_detection_postprocessor_config.pb.h\"\n#include \"modules/perception/pipeline/stage.h\"\n#include \"modules/perception/pipeline/plugin_factory.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraDetectionPostprocessor : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using Plugin = pipeline::Plugin;\n\n public:\n  CameraDetectionPostprocessor() = default;\n  virtual ~CameraDetectionPostprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(const std::vector<float>& detect_result,\n               const std::vector<base::ObjectSubType>& types,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  CameraDetectionPostprocessorConfig camera_detection_postprocessor_config_;\n\n  std::unique_ptr<CameraGetObject> camera_get_object_;\n\n};  // class CameraDetectionPostprocessor\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2022 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n#pragma once\n\n#include <vector>\n#include <string>\n#include <memory>\n\n#include \"modules/perception/pipeline/proto/stage/camera_detection_postprocessor_config.pb.h\"\n\n#include \"modules/perception/camera/lib/obstacle/camera_detection_postprocessor/camera_get_object/camera_get_object.h\"\n#include \"modules/perception/pipeline/plugin_factory.h\"\n#include \"modules/perception/pipeline/stage.h\"\n\nnamespace apollo {\nnamespace perception {\nnamespace camera {\n\nclass CameraDetectionPostprocessor : public pipeline::Stage {\n public:\n  using StageConfig = pipeline::StageConfig;\n  using DataFrame = pipeline::DataFrame;\n  using Plugin = pipeline::Plugin;\n\n public:\n  CameraDetectionPostprocessor() = default;\n  virtual ~CameraDetectionPostprocessor() = default;\n\n  bool Init(const StageConfig& stage_config) override;\n\n  bool Process(DataFrame* data_frame) override;\n\n  bool Process(const std::vector<float>& detect_result,\n               const std::vector<base::ObjectSubType>& types,\n               DataFrame* data_frame);\n\n  bool IsEnabled() const override { return enable_; }\n\n  std::string Name() const override { return name_; }\n\n private:\n  CameraDetectionPostprocessorConfig camera_detection_postprocessor_config_;\n\n  std::unique_ptr<CameraGetObject> camera_get_object_;\n};  // class CameraDetectionPostprocessor\n\n}  // namespace camera\n}  // namespace perception\n}  // namespace apollo",
        "lookback": " * Copyright 2022 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 121,
        "merge_gen_region": " Copyright022 Alo. Rights Copyright022 Apol Authors All Reserved * Licensed the Apache, 20theLicense *\"); you not this except compliance the License * may obtain copy the License * *://../licensesLICENSE20 * Unless by applicable or to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License *****************************************************************************/pragma # onceincludevector # <>includestring # <>includememory # \"//ceptionpipelineprotostagecameradetectionpost_.....\"includemodulesper/////staclecameradetectionpost/_____/cameragetobjectcameragetobjecth # \"//ceptionpipelinepluginfactoryh # \"/per//.\" alo namespaceception namespace { CameraPost : pipelineStage public using Stage =::Config pipelineStage; Data =::Frame pipelineData; Plugin pipelinePlugin public CameraDetectionprocessor =; ~Detectionprocessor =; InitconstConfig stageconfig override bool(Frame dataframe override bool( stdvectorfloat detectresult const::<::<::SubType types Data*_); Is() override { enable }:: Name const { name }:Detectionprocessor cameradetectionpost__;::_<GetObject cameraget",
        "confidence": 0.9475548267364502,
        "hesitated": false,
        "resolved": false
    }
]