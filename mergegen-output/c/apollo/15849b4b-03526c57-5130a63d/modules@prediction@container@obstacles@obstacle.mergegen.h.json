[
    {
        "a_contents": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n/**\n * @file\n * @brief Obstacle\n */\n\n#ifndef MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_\n#define MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_\n\n#include <deque>\n#include <unordered_map>\n#include <vector>\n#include <string>\n#include <mutex>\n\n#include \"modules/perception/proto/perception_obstacle.pb.h\"\n#include \"modules/prediction/proto/feature.pb.h\"\n#include \"modules/common/proto/error_code.pb.h\"\n\n#include \"modules/common/math/kalman_filter.h\"\n\nnamespace apollo {\nnamespace prediction {\n\nclass Obstacle {\n public:\n  explicit Obstacle();\n\n  virtual ~Obstacle();\n\n  void Insert(\n    const apollo::perception::PerceptionObstacle& perception_obstacle,\n    const double timestamp);\n\n  int id() const;\n\n  double timestamp() const;\n\n  const Feature& feature(size_t i);\n\n  Feature* mutable_feature(size_t i);\n\n  const Feature& latest_feature();\n\n  Feature* mutable_latest_feature();\n\n  size_t history_size() const;\n\n  const apollo::common::math::KalmanFilter<double, 4, 2, 0>& kf_lane_tracker(\n      const std::string& lane_id);\n\n  // TODO(author) void SetLaneGraphFeature(ObstacleClusters* p_cluster);\n\n private:\n  apollo::common::ErrorCode SetId(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  apollo::common::ErrorCode SetType(\n      const apollo::perception::PerceptionObstacle& perception_obstacle);\n\n  void SetTimestamp(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      const double timestamp,\n      Feature* feature);\n\n  void SetPosition(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  void SetVelocity(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n private:\n  int id_;\n  apollo::perception::PerceptionObstacle::Type type_;\n  std::deque<Feature> feature_history_;\n  apollo::common::math::KalmanFilter<double, 6, 2, 0> kf_motion_tracker_;\n  bool is_motion_tracker_enabled_;\n  std::unordered_map<std::string,\n      apollo::common::math::KalmanFilter<double, 4, 2, 0>> kf_lane_tracker_map_;\n  // TODO(author) std::vector<const adu::hdmap::LaneInfo*> _current_lanes;\n  static std::mutex mutex_;\n};\n\n}  // namespace prediction\n}  // namespace apollo\n\n #endif  // MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_",
        "b_contents": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n/**\n * @file\n * @brief Obstacle\n */\n\n#ifndef MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_\n#define MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_\n\n#include <deque>\n#include <unordered_map>\n#include <vector>\n#include <string>\n#include <mutex>\n\n#include \"modules/perception/proto/perception_obstacle.pb.h\"\n#include \"modules/prediction/proto/feature.pb.h\"\n#include \"modules/common/proto/error_code.pb.h\"\n\n#include \"modules/common/math/kalman_filter.h\"\n\nnamespace apollo {\nnamespace prediction {\n\nclass Obstacle {\n public:\n  explicit Obstacle();\n\n  virtual ~Obstacle();\n\n  void Insert(\n    const apollo::perception::PerceptionObstacle& perception_obstacle,\n    const double timestamp);\n\n  int id() const;\n\n  double timestamp() const;\n\n  const Feature& feature(size_t i);\n\n  Feature* mutable_feature(size_t i);\n\n  const Feature& latest_feature();\n\n  Feature* mutable_latest_feature();\n\n  size_t history_size() const;\n\n  const apollo::common::math::KalmanFilter<double, 4, 2, 0>& kf_lane_tracker(\n      const std::string& lane_id);\n\n  // TODO(author) void SetLaneGraphFeature(ObstacleClusters* p_cluster);\n\n private:\n  apollo::common::ErrorCode SetId(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  apollo::common::ErrorCode SetType(\n      const apollo::perception::PerceptionObstacle& perception_obstacle);\n\n  void SetTimestamp(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      const double timestamp,\n      Feature* feature);\n\n  void SetPosition(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  void SetVelocity(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  void SetAcceleration(Feature* feature);\n\n  void SetTheta(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n private:\n  int id_;\n  apollo::perception::PerceptionObstacle::Type type_;\n  std::deque<Feature> feature_history_;\n  apollo::common::math::KalmanFilter<double, 6, 2, 0> kf_motion_tracker_;\n  bool is_motion_tracker_enabled_;\n  std::unordered_map<std::string,\n      apollo::common::math::KalmanFilter<double, 4, 2, 0>> kf_lane_tracker_map_;\n  // TODO(author) std::vector<const adu::hdmap::LaneInfo*> _current_lanes;\n  static std::mutex mutex_;\n};\n\n}  // namespace prediction\n}  // namespace apollo\n\n #endif  // MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_",
        "base_contents": "",
        "res_region": "/******************************************************************************\n * Copyright 2017 The Apollo Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *****************************************************************************/\n\n/**\n * @file\n * @brief Obstacle\n */\n\n#ifndef MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_\n#define MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_\n\n#include <deque>\n#include <unordered_map>\n#include <vector>\n#include <string>\n#include <mutex>\n\n#include \"modules/perception/proto/perception_obstacle.pb.h\"\n#include \"modules/prediction/proto/feature.pb.h\"\n#include \"modules/common/proto/error_code.pb.h\"\n\n#include \"modules/common/math/kalman_filter.h\"\n\nnamespace apollo {\nnamespace prediction {\n\nclass Obstacle {\n public:\n  explicit Obstacle();\n\n  virtual ~Obstacle();\n\n  void Insert(\n    const apollo::perception::PerceptionObstacle& perception_obstacle,\n    const double timestamp);\n\n  int id() const;\n\n  double timestamp() const;\n\n  const Feature& feature(size_t i);\n\n  Feature* mutable_feature(size_t i);\n\n  const Feature& latest_feature();\n\n  Feature* mutable_latest_feature();\n\n  size_t history_size() const;\n\n  const apollo::common::math::KalmanFilter<double, 4, 2, 0>& kf_lane_tracker(\n      const std::string& lane_id);\n\n  // TODO(author) void SetLaneGraphFeature(ObstacleClusters* p_cluster);\n\n private:\n  apollo::common::ErrorCode SetId(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  apollo::common::ErrorCode SetType(\n      const apollo::perception::PerceptionObstacle& perception_obstacle);\n\n  void SetTimestamp(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      const double timestamp,\n      Feature* feature);\n\n  void SetPosition(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  void SetVelocity(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n  void SetAcceleration(Feature* feature);\n\n  void SetTheta(\n      const apollo::perception::PerceptionObstacle& perception_obstacle,\n      Feature* feature);\n\n private:\n  int id_;\n  apollo::perception::PerceptionObstacle::Type type_;\n  std::deque<Feature> feature_history_;\n  apollo::common::math::KalmanFilter<double, 6, 2, 0> kf_motion_tracker_;\n  bool is_motion_tracker_enabled_;\n  std::unordered_map<std::string,\n      apollo::common::math::KalmanFilter<double, 4, 2, 0>> kf_lane_tracker_map_;\n  // TODO(author) std::vector<const adu::hdmap::LaneInfo*> _current_lanes;\n  static std::mutex mutex_;\n};\n\n}  // namespace prediction\n}  // namespace apollo\n\n #endif  // MODULES_PREDICTION_CONTAINER_OBSTACLES_OBSTACLE_H_",
        "lookback": " * Copyright 2017 The Apollo Authors. All Rights Reserved.",
        "lookahead": "",
        "label": [
            "base",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 219,
        "merge_gen_region": " Copyright Thepol Authors All Reserved * * under Apache, 20theLicense *\"); you not this except in with the. * may a of License * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License *****************************************************************************/ *file @ Ob */ifndefSPRECTIONCONTAINEROBLESOBLEH # MODULE_DI___STAC___includedeque # <__>includeunorderedmap # <>includevector # <>includestring # <>includemodulesper//ceptionprotoper_staclepbh # \"modulespredictionprotofeaturepbh # \"////////_errorcodepbh # \"/commonmathkal_.\" alo namespace { classstacle {: explicitstacle(); ~stacle void( aloper::ceptionPerOb&ceptionob, double); id const double(); const&(_t);*__(_ i); Feature mutablefeaturesizet); Feature latestfeature Feature mutablelatestfeature sizet_ historysize const; alocommonmathKman<,,,::&_); TODOauthor",
        "confidence": 0.9051991105079651,
        "hesitated": false,
        "resolved": false
    }
]