[
    {
        "a_contents": "  auto localization_adapter = AdapterManager::GetLocalization();\n  if (localization_adapter->Empty()) {\n    AINFO << \"No localization message.\";\n  } else {\n    const LocalizationEstimate& localization =\n        localization_adapter->GetLatestObserved();\n    ADEBUG << \"Received localization message [\"\n           << localization.ShortDebugString()\n           << \"].\";\n    ContainerManager::instance()\n        ->mutable_container(\"Pose\")->Insert(localization);\n  }\n  ContainerManager::instance()\n      ->mutable_container(\"Obstacles\")->Insert(perception_obstacles);\n  PredictorManager::instance()->Run(perception_obstacles);\n  // GeneratorManager::instance()->Run(perception_obstacles);\n  // AdapterManager::PublishPrediction(GeneratorManager::instance()->GetPredictions());",
        "b_contents": "  auto localization_adapter = AdapterManager::GetLocalization();\n  if (localization_adapter->Empty()) {\n    AINFO << \"No localization message.\";\n  } else {\n    const ::apollo::localization::LocalizationEstimate& localization =\n        localization_adapter->GetLatestObserved();\n    ADEBUG << \"Received localization message [\"\n           << localization.ShortDebugString()\n           << \"].\";\n    ContainerManager::instance()->mutable_container(\"Pose\")->Insert(localization);\n  }\n  ContainerManager::instance()->mutable_container(\"Obstacles\")->Insert(perception_obstacles);\n  PredictorManager::instance()->Run(perception_obstacles);\n  // GeneratorManager::instance()->Run(perception_obstacles);\n  // AdapterManager::PublishPrediction(GeneratorManager::instance()->GetPredictions());",
        "base_contents": "  PredictionObstacles prediction_obstacles;\n  AdapterManager::FillPredictionHeader(Name(),\n                                       prediction_obstacles.mutable_header());\n  AdapterManager::PublishPrediction(prediction_obstacles);\n\n  ADEBUG << prediction_obstacles.ShortDebugString();",
        "res_region": "  auto localization_adapter = AdapterManager::GetLocalization();\n  if (localization_adapter->Empty()) {\n    AINFO << \"No localization message.\";\n  } else {\n    const LocalizationEstimate& localization =\n        localization_adapter->GetLatestObserved();\n    ADEBUG << \"Received localization message [\"\n           << localization.ShortDebugString()\n           << \"].\";\n    ContainerManager::instance()\n        ->mutable_container(\"Pose\")->Insert(localization);\n  }\n  ContainerManager::instance()\n      ->mutable_container(\"Obstacles\")->Insert(perception_obstacles);\n  ContainerManager::instance()->mutable_container(\"Obstacles\")->Insert(perception_obstacles);\n  PredictorManager::instance()->Run(perception_obstacles);\n  // GeneratorManager::instance()->Run(perception_obstacles);\n  // AdapterManager::PublishPrediction(GeneratorManager::instance()->GetPredictions());",
        "lookback": "  if (localization_adapter->Empty()) {",
        "lookahead": "}",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 55,
        "end_line": 96,
        "merge_gen_region": " local_ =ManagerGetLocal(); (izationadapterEmpty {INFO \"Noization.\"; else constization&ization local_->GetstObserv();DEBUG \" local message <<].BManagerinstancemutablecontainerPoseInsertlocal); Container::()mutable \"\";Managerinstancemutablecontainermutablecontainer already79local); Container::()mutable \"\";ManagerinstancemutablecontainermutablecontainermutablecontainermutablecontainerObssInsertperString No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No No",
        "confidence": 0.9397417902946472,
        "hesitated": false,
        "resolved": false
    }
]