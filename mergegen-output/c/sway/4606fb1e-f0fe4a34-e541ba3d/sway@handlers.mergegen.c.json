[
    {
        "a_contents": "\tif (config->focus_follows_mouse && prev_view != view) {\n\t\tset_focused_container(container_under_pointer());",
        "b_contents": "\tbool changed_floating = false;\n\tint i = 0;\n\t// Do checks to determine if proper keys are being held\n\tswayc_t *view = active_workspace->focused;\n\tif (m1_held) {\n\t\tif (view->is_floating) {\n\t\t\twhile (keys_pressed[i++]) {\n\t\t\t\tif (keys_pressed[i] == config->floating_mod) {\n\t\t\t\t\tint dx = mouse_origin.x - prev_pos.x;\n\t\t\t\t\tint dy = mouse_origin.y - prev_pos.y;\n\t\t\t\t\tsway_log(L_DEBUG, \"Moving from px: %d to cx: %d and from py: %d to cy: %d\", prev_pos.x, mouse_origin.x, prev_pos.y, mouse_origin.y);\n\t\t\t\t\tsway_log(L_DEBUG, \"Moving: dx: %d, dy: %d\", dx, dy);\n\n\t\t\t\t\tview->x += dx;\n\t\t\t\t\tview->y += dy;\n\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (m2_held) {\n\t\tif (view->is_floating) {\n\t\t\twhile (keys_pressed[i++]) {\n\t\t\t\tif (keys_pressed[i] == config->floating_mod) {\n\t\t\t\t\tint dx = mouse_origin.x - prev_pos.x;\n\t\t\t\t\tint dy = mouse_origin.y - prev_pos.y;\n\t\t\t\t\tsway_log(L_DEBUG, \"Moving from px: %d to cx: %d and from py: %d to cy: %d\", prev_pos.x, mouse_origin.x, prev_pos.y, mouse_origin.y);\n\t\t\t\t\tsway_log(L_INFO, \"Moving: dx: %d, dy: %d\", dx, dy);\n\n\t\t\t\t\t// Move and resize the view based on the dx/dy and mouse position\n\t\t\t\t\tint midway_x = view->x + view->width/2;\n\t\t\t\t\tint midway_y = view->y + view->height/2;\n\n\t\t\t\t\tif (dx < 0) {\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.x > midway_x) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing view to the left\");\n\t\t\t\t\t\t\tview->width += dx;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing view to the left\");\n\t\t\t\t\t\t\tview->x += dx;\n\t\t\t\t\t\t\tview->width -= dx;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dx > 0){\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.x > midway_x) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing to the right\");\n\t\t\t\t\t\t\tview->width += dx;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing to the right\");\n\t\t\t\t\t\t\tview->x += dx;\n\t\t\t\t\t\t\tview->width -= dx;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dy < 0) {\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.y > midway_y) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing view to the top\");\n\t\t\t\t\t\t\tview->height += dy;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing the view to the top\");\n\t\t\t\t\t\t\tview->y += dy;\n\t\t\t\t\t\t\tview->height -= dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dy > 0) {\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.y > midway_y) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing to the bottom\");\n\t\t\t\t\t\t\tview->height += dy;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing to the bottom\");\n\t\t\t\t\t\t\tview->y += dy;\n\t\t\t\t\t\t\tview->height -= dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (config->focus_follows_mouse && prev_handle != handle) {\n\t\tfocus_pointer();",
        "base_contents": "\tif (config->focus_follows_mouse && prev_view != view) {\n\t\tfocus_pointer();",
        "res_region": "\tbool changed_floating = false;\n\tint i = 0;\n\t// Do checks to determine if proper keys are being held\n\tswayc_t *view = active_workspace->focused;\n\tif (m1_held) {\n\t\tif (view->is_floating) {\n\t\t\twhile (keys_pressed[i++]) {\n\t\t\t\tif (keys_pressed[i] == config->floating_mod) {\n\t\t\t\t\tint dx = mouse_origin.x - prev_pos.x;\n\t\t\t\t\tint dy = mouse_origin.y - prev_pos.y;\n\t\t\t\t\tsway_log(L_DEBUG, \"Moving from px: %d to cx: %d and from py: %d to cy: %d\", prev_pos.x, mouse_origin.x, prev_pos.y, mouse_origin.y);\n\t\t\t\t\tsway_log(L_DEBUG, \"Moving: dx: %d, dy: %d\", dx, dy);\n\n\t\t\t\t\tview->x += dx;\n\t\t\t\t\tview->y += dy;\n\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (m2_held) {\n\t\tif (view->is_floating) {\n\t\t\twhile (keys_pressed[i++]) {\n\t\t\t\tif (keys_pressed[i] == config->floating_mod) {\n\t\t\t\t\tint dx = mouse_origin.x - prev_pos.x;\n\t\t\t\t\tint dy = mouse_origin.y - prev_pos.y;\n\t\t\t\t\tsway_log(L_DEBUG, \"Moving from px: %d to cx: %d and from py: %d to cy: %d\", prev_pos.x, mouse_origin.x, prev_pos.y, mouse_origin.y);\n\t\t\t\t\tsway_log(L_INFO, \"Moving: dx: %d, dy: %d\", dx, dy);\n\n\t\t\t\t\t// Move and resize the view based on the dx/dy and mouse position\n\t\t\t\t\tint midway_x = view->x + view->width/2;\n\t\t\t\t\tint midway_y = view->y + view->height/2;\n\n\t\t\t\t\tif (dx < 0) {\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.x > midway_x) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing view to the left\");\n\t\t\t\t\t\t\tview->width += dx;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing view to the left\");\n\t\t\t\t\t\t\tview->x += dx;\n\t\t\t\t\t\t\tview->width -= dx;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dx > 0){\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.x > midway_x) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing to the right\");\n\t\t\t\t\t\t\tview->width += dx;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing to the right\");\n\t\t\t\t\t\t\tview->x += dx;\n\t\t\t\t\t\t\tview->width -= dx;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dy < 0) {\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.y > midway_y) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing view to the top\");\n\t\t\t\t\t\t\tview->height += dy;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing the view to the top\");\n\t\t\t\t\t\t\tview->y += dy;\n\t\t\t\t\t\t\tview->height -= dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dy > 0) {\n\t\t\t\t\t\tchanged_floating = true;\n\t\t\t\t\t\tif (mouse_origin.y > midway_y) {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Upsizing to the bottom\");\n\t\t\t\t\t\t\tview->height += dy;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsway_log(L_INFO, \"Downsizing to the bottom\");\n\t\t\t\t\t\t\tview->y += dy;\n\t\t\t\t\t\t\tview->height -= dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (config->focus_follows_mouse && prev_handle != handle) {\n\t\tset_focused_container(container_under_pointer());",
        "lookback": "\tint i = 0;",
        "lookahead": "\t}",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 321,
        "end_line": 411,
        "merge_gen_region": " changedfloating false int = 0 // checks determine proper are heldway__ * =_->focused ifm_) ifviewisfloating { (_[++ { ifkeyspressedi ==->_) ifviewisfloating { whilekeyspressedi]) ifkeyspressedi ==->_) int =__.; dy mouseoriginy prevpos.; dy mouseoriginy prevpos.;waylogLDEBUG \" from: % to:d from py % to:d prev\",_.,__.,__.,__.,__.,__.,__.);waylogLDEBUG \"Moving dx %,: %,: %\", dx dy viewx +=;-> +=; changedfloating true break } } } else (2held { ifviewisfloating { whilekeyspressedi]) ifkeyspressedi ==->_) int =_. -_.; dy mouseoriginy prev prevposyposyy prevposyy s_(_,Moving dx %,: %\", dx dy viewlogLINFO \"Moving dx %, dy %\",,); Move resize resize view on dxdy mouse intway_ =-> +->width2 intway_ =->",
        "confidence": 0.9547682404518127,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "\t\tswayc_t *pointer = container_under_pointer();\n\t\tset_focused_container(pointer);",
        "b_contents": "\t\tsway_log(L_DEBUG, \"Mouse button %u pressed\", button);\n\t\tif (button == 272) {\n\t\t\tm1_held = true;\n\t\t}\n\t\tif (button == 273) {\n\t\t\tm2_held = true;\n\t\t}\n\t\tswayc_t *pointer = focus_pointer();",
        "base_contents": "\t\tswayc_t *pointer = focus_pointer();",
        "res_region": "\t\tsway_log(L_DEBUG, \"Mouse button %u pressed\", button);\n\t\tif (button == 272) {\n\t\t\tm1_held = true;\n\t\t}\n\t\tif (button == 273) {\n\t\t\tm2_held = true;\n\t\t}\n\t\tswayc_t *pointer = container_under_pointer();\n\t\tset_focused_container(pointer);",
        "lookback": "\t\tif (button == 272) {",
        "lookahead": "\t\treturn (pointer && pointer != focused);",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 426,
        "end_line": 440,
        "merge_gen_region": null,
        "confidence": 0.8105225563049316,
        "hesitated": true
    }
]