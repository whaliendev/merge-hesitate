[
    {
        "a_contents": "static bool cmd_move(struct sway_config *config, int argc, char **argv) {\n\tif (!checkarg(argc, \"workspace\", EXPECTED_EQUAL_TO, 1)) {\n\t\treturn false;\n\t}\n\n\tswayc_t *view = get_focused_container(&root_container);\n\n\tif (strcasecmp(argv[0], \"left\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_LEFT);\n\t} else if (strcasecmp(argv[0], \"right\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_RIGHT);\n\t} else if (strcasecmp(argv[0], \"up\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_UP);\n\t} else if (strcasecmp(argv[0], \"down\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_DOWN);\n\t} else\n\t{\n\t\treturn false;\n\t}\n\n\treturn true;\n\nstatic bool cmd_gaps(struct sway_config *config, int argc, char **argv) {\n\tif (!checkarg(argc, \"gaps\", EXPECTED_AT_LEAST, 1)) {\n\t\treturn false;\n\t}\n\n\tif (argc == 1) {\n\t\tchar *end;\n\t\tint amount = (int)strtol(argv[0], &end, 10);\n\t\tif (errno == ERANGE || amount == 0) {\n\t\t\terrno = 0;\n\t\t\treturn false;\n\t\t}\n\t\tif (config->gaps_inner == 0) {\n\t\t\tconfig->gaps_inner = amount;\n\t\t}\n\t\tif (config->gaps_outer == 0) {\n\t\t\tconfig->gaps_outer = amount;\n\t\t}\n\t} else if (argc == 2) {\n\t\tchar *end;\n\t\tint amount = (int)strtol(argv[1], &end, 10);\n\t\tif (errno == ERANGE || amount == 0) {\n\t\t\terrno = 0;\n\t\t\treturn false;\n\t\t}\n\t\tif (strcasecmp(argv[0], \"inner\") == 0) {\n\t\t\tconfig->gaps_inner = amount;\n\t\t} else if (strcasecmp(argv[0], \"outer\") == 0) {\n\t\t\tconfig->gaps_outer = amount;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}\n",
        "b_contents": "static bool cmd_move(struct sway_config *config, int argc, char **argv) {\n\tsway_log(L_DEBUG, \"move cmd stub called\");//Stubbed method until I get back.\n\treturn true;\n}\n",
        "base_contents": "",
        "res_region": "static bool cmd_move(struct sway_config *config, int argc, char **argv) {\n\tif (!checkarg(argc, \"workspace\", EXPECTED_EQUAL_TO, 1)) {\n\t\treturn false;\n\t}\n\n\tswayc_t *view = get_focused_container(&root_container);\n\n\tif (strcasecmp(argv[0], \"left\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_LEFT);\n\t} else if (strcasecmp(argv[0], \"right\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_RIGHT);\n\t} else if (strcasecmp(argv[0], \"up\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_UP);\n\t} else if (strcasecmp(argv[0], \"down\") == 0) {\n\t\tmove_container(view,&root_container,MOVE_DOWN);\n\t} else\n\t{\n\t\treturn false;\n\t}\n\n\treturn true;\n\nstatic bool cmd_gaps(struct sway_config *config, int argc, char **argv) {\n\tif (!checkarg(argc, \"gaps\", EXPECTED_AT_LEAST, 1)) {\n\t\treturn false;\n\t}\n\n\tif (argc == 1) {\n\t\tchar *end;\n\t\tint amount = (int)strtol(argv[0], &end, 10);\n\t\tif (errno == ERANGE || amount == 0) {\n\t\t\terrno = 0;\n\t\t\treturn false;\n\t\t}\n\t\tif (config->gaps_inner == 0) {\n\t\t\tconfig->gaps_inner = amount;\n\t\t}\n\t\tif (config->gaps_outer == 0) {\n\t\t\tconfig->gaps_outer = amount;\n\t\t}\n\t} else if (argc == 2) {\n\t\tchar *end;\n\t\tint amount = (int)strtol(argv[1], &end, 10);\n\t\tif (errno == ERANGE || amount == 0) {\n\t\t\terrno = 0;\n\t\t\treturn false;\n\t\t}\n\t\tif (strcasecmp(argv[0], \"inner\") == 0) {\n\t\t\tconfig->gaps_inner = amount;\n\t\t} else if (strcasecmp(argv[0], \"outer\") == 0) {\n\t\t\tconfig->gaps_outer = amount;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}\n",
        "lookback": "\tif (!checkarg(argc, \"workspace\", EXPECTED_EQUAL_TO, 1)) {",
        "lookahead": "static bool cmd_kill(struct sway_config *config, int argc, char **argv) {",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 343,
        "end_line": 411,
        "merge_gen_region": " bool_( s_ *, argc char **) ifcheckargargc \"workspace EXPECT___,))static cmdmovestructwayconfigconfigconfig int, argc charargv { (!argargc \"workspace EXPECT___TO 1 { false }way__ *, argc charargv { ifcheck(,workspace EXPECT___,)) return false }way__ * =___(&_); (([],left ==) movecontainerviewrootcontainerMOVELEFT } ifstrcasecmpargv0 \"\") 0) movecontainerviewDispatch0 \"\") 0) movecontainerviewrootcontainerMOVERIGHT } else (([],up ==) movecontainerviewroot_,_UP } else (([],down ==) movecontainerviewrootcontainerMOVEDOWN } { false } true static cmdg(structwayconfigconfig, argc charargv { (!argargc \"g\", ph____,,)) return; ifargc 1 { charend; amount (intstrtolargv0 &,); iferrno ER || ==) errno 0; false } (->g_ ==) configg_inner amount } ifconfigg_ ==) configg_ =; ifconfig->apsouter 0) configg_ =; } if",
        "confidence": 0.950821578502655,
        "hesitated": false,
        "resolved": false
    }
]