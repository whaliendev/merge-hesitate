[
    {
        "a_contents": "/*\n * Copyright (C) 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef WIFI_PAL_IMPL_TEST_H_\n#define WIFI_PAL_IMPL_TEST_H_\n\n#include \"chre/pal/wifi.h\"\n#include \"chre/platform/condition_variable.h\"\n#include \"chre/platform/mutex.h\"\n#include \"chre/util/dynamic_vector.h\"\n#include \"chre/util/optional.h\"\n#include \"chre/util/time.h\"\n#include \"gtest/gtest.h\"\n\nnamespace wifi_pal_impl_test {\n\nclass PalWifiTest : public ::testing::Test {\n public:\n  /**\n   * Implements CHRE PAL API callbacks\n   */\n  void scanMonitorStatusChangeCallback(bool enabled, uint8_t errorCode);\n  void scanResponseCallback(bool pending, uint8_t errorCode);\n  void scanEventCallback(struct chreWifiScanEvent *event);\n  void rangingEventCallback(uint8_t errorCode,\n                            struct chreWifiRangingEvent *event);\n\n protected:\n  void SetUp() override;\n\n  void TearDown() override;\n\n  /**\n   * Validates an incoming WiFi scan event.\n   *\n   * @param event The WiFi scan event.\n   */\n  void validateWifiScanEvent(const chreWifiScanEvent &event);\n\n  /**\n   * Prepares for a subsequent PAL API call that expects an async response.\n   */\n  void prepareForAsyncResponse() {\n    errorCode_ = CHRE_ERROR_LAST;\n  }\n\n  /**\n   * Waits for an async response by the PAL implementation (e.g. via scan\n   * response/monitor status change callback), and asserts that a success\n   * error code was received.\n   */\n  void waitForAsyncResponseAssertSuccess(chre::Nanoseconds timeoutNs);\n\n  //! The pointer to the CHRE PAL implementation API\n  const struct chrePalWifiApi *api_;\n\n  //! The error code of the most recent callback\n  uint8_t errorCode_ = CHRE_ERROR_LAST;\n\n  //! The number of scan events currently stored\n  uint32_t numScanResultCount_ = 0;\n\n  //! True if the last scan event has been received\n  bool lastScanEventReceived_ = false;\n\n  //! A list to store the scan results\n  chre::DynamicVector<chreWifiScanEvent *> scanEventList_;\n\n  //! Stores active scan params\n  chre::Optional<chreWifiScanParams> scanParams_;\n\n  //! The last scan event index received, UINT8_MAX if invalid\n  uint8_t lastEventIndex_;\n\n  //! True if scan monitoring is currently enabled\n  bool scanMonitorEnabled_ = false;\n\n  //! Mutex to protect class variables\n  chre::Mutex mutex_;\n  chre::ConditionVariable condVar_;\n};\n\n}  // namespace wifi_pal_impl_test\n\n#endif  // WIFI_PAL_IMPL_TEST_H_",
        "b_contents": "/*\n * Copyright (C) 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef WIFI_PAL_IMPL_TEST_H_\n#define WIFI_PAL_IMPL_TEST_H_\n\n#include \"chre/pal/wifi.h\"\n#include \"chre/platform/condition_variable.h\"\n#include \"chre/platform/mutex.h\"\n#include \"chre/util/dynamic_vector.h\"\n#include \"gtest/gtest.h\"\n\nnamespace wifi_pal_impl_test {\n\nclass PalWifiTest : public ::testing::Test {\n public:\n  /**\n   * Implements CHRE PAL API callbacks\n   */\n  void scanMonitorStatusChangeCallback(bool enabled, uint8_t errorCode);\n  void scanResponseCallback(bool pending, uint8_t errorCode);\n  void scanEventCallback(struct chreWifiScanEvent *event);\n  void rangingEventCallback(uint8_t errorCode,\n                            struct chreWifiRangingEvent *event);\n\n protected:\n  void SetUp() override;\n\n  void TearDown() override;\n\n  //! The pointer to the CHRE PAL implementation API\n  const struct chrePalWifiApi *api_;\n\n  //! The error code of the most recent callback\n  uint8_t errorCode_ = CHRE_ERROR_LAST;\n\n  //! The number of scan events currently stored\n  uint32_t numScanResultCount_ = 0;\n\n  //! True if the last scan event has been received\n  bool lastScanEventReceived_ = false;\n\n  //! A list to store the scan results\n  chre::DynamicVector<chreWifiScanEvent *> scanEventList_;\n\n  //! Mutex to protect class variables\n  chre::Mutex mutex_;\n  chre::ConditionVariable condVar_;\n};\n\n}  // namespace wifi_pal_impl_test\n\n#endif  // WIFI_PAL_IMPL_TEST_H_",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef WIFI_PAL_IMPL_TEST_H_\n#define WIFI_PAL_IMPL_TEST_H_\n\n#include \"chre/pal/wifi.h\"\n#include \"chre/platform/condition_variable.h\"\n#include \"chre/platform/mutex.h\"\n#include \"chre/util/dynamic_vector.h\"\n#include \"chre/util/optional.h\"\n#include \"chre/util/time.h\"\n#include \"gtest/gtest.h\"\n\nnamespace wifi_pal_impl_test {\n\nclass PalWifiTest : public ::testing::Test {\n public:\n  /**\n   * Implements CHRE PAL API callbacks\n   */\n  void scanMonitorStatusChangeCallback(bool enabled, uint8_t errorCode);\n  void scanResponseCallback(bool pending, uint8_t errorCode);\n  void scanEventCallback(struct chreWifiScanEvent *event);\n  void rangingEventCallback(uint8_t errorCode,\n                            struct chreWifiRangingEvent *event);\n\n protected:\n  void SetUp() override;\n\n  void TearDown() override;\n\n  /**\n   * Validates an incoming WiFi scan event.\n   *\n   * @param event The WiFi scan event.\n   */\n  void validateWifiScanEvent(const chreWifiScanEvent &event);\n\n  /**\n   * Prepares for a subsequent PAL API call that expects an async response.\n   */\n  void prepareForAsyncResponse() {\n    errorCode_ = CHRE_ERROR_LAST;\n  }\n\n  /**\n   * Waits for an async response by the PAL implementation (e.g. via scan\n   * response/monitor status change callback), and asserts that a success\n   * error code was received.\n   */\n  void waitForAsyncResponseAssertSuccess(chre::Nanoseconds timeoutNs);\n\n  //! The pointer to the CHRE PAL implementation API\n  const struct chrePalWifiApi *api_;\n\n  //! The error code of the most recent callback\n  uint8_t errorCode_ = CHRE_ERROR_LAST;\n\n  //! The number of scan events currently stored\n  uint32_t numScanResultCount_ = 0;\n\n  //! True if the last scan event has been received\n  bool lastScanEventReceived_ = false;\n\n  //! A list to store the scan results\n  chre::DynamicVector<chreWifiScanEvent *> scanEventList_;\n\n  //! Stores active scan params\n  chre::Optional<chreWifiScanParams> scanParams_;\n\n  //! The last scan event index received, UINT8_MAX if invalid\n  uint8_t lastEventIndex_;\n\n  //! True if scan monitoring is currently enabled\n  bool scanMonitorEnabled_ = false;\n\n  //! Mutex to protect class variables\n  chre::Mutex mutex_;\n  chre::ConditionVariable condVar_;\n};\n\n}  // namespace wifi_pal_impl_test\n\n#endif  // WIFI_PAL_IMPL_TEST_H_",
        "lookback": " * Copyright (C) 2020 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 167,
        "merge_gen_region": " CopyrightC 2020 Android Source/* CopyrightC 2020 Android Source * Licensed the Apache, 2. ( \" \"\"); you not this except in with License * may a of License * may a of License * *://..///LICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, express implied * the License the for specific governing and limitations the License */ifndef_________define_______includechr///.\"includechr////___includechr///___includechr///___includechr///__.\"includechr///__.\"includechr///_.\"includechr///_.\"includechr///_.\"includechr///_.\"includechr///.\"includegtestgtesth namespace____ { classalTest public ::::Test public /** * CH PAL callbacks voidMonitorChange( enabled uint_ errorCode void voidCallbackCallbackbool,8t,8t); voidEvent( chrWifiEventevent voidangingCallbackuint_ errorCode structeREventevent protected void()",
        "confidence": 0.916122317314148,
        "hesitated": false,
        "resolved": false
    }
]