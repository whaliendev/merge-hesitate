[
    {
        "a_contents": "void Manager::handleStepCounterData(\n    const chreSensorUint64Data *stepCounterDataFromChre) {\n  if (processSensorData(stepCounterDataFromChre->header,\n                        CHRE_SENSOR_TYPE_STEP_COUNTER)) {\n    chre_cross_validation_sensor_Data newData =\n        makeSensorStepCounterData(stepCounterDataFromChre);\n    sendDataToHost(newData);\n  }\n}\n\nvoid Manager::sendDataToHost(const chre_cross_validation_sensor_Data &data) {\n  sendMessageToHost(\n      mCrossValidatorState->hostEndpoint,\n      chre_cross_validation_sensor_MessageType_CHRE_CROSS_VALIDATION_DATA,\n      chre_cross_validation_sensor_Data_fields, &data);\n}\n\nvoid Manager::sendInfoResponse(\n    uint16_t hostEndpoint,\n    const chre_cross_validation_sensor_SensorInfoResponse &infoResponse) {\n  sendMessageToHost(\n      hostEndpoint,\n      chre_cross_validation_sensor_MessageType_CHRE_CROSS_VALIDATION_INFO_RESPONSE,\n      chre_cross_validation_sensor_SensorInfoResponse_fields, &infoResponse);\n}\n\nvoid Manager::sendMessageToHost(uint16_t hostEndpoint, uint16_t messageType,\n                                const pb_field_t fields[],\n                                const void *srcStruct) {",
        "b_contents": "void Manager::sendDataToHost(const chre_cross_validation_sensor_Data &data) {\n  sendMessageToHost(\n      mCrossValidatorState->hostEndpoint,\n      chre_cross_validation_sensor_MessageType_CHRE_CROSS_VALIDATION_DATA,\n      chre_cross_validation_sensor_Data_fields, &data);\n}\n\nvoid Manager::sendInfoResponse(\n    uint16_t hostEndpoint,\n    const chre_cross_validation_sensor_SensorInfoResponse &infoResponse) {\n  sendMessageToHost(\n      hostEndpoint,\n      chre_cross_validation_sensor_MessageType_CHRE_CROSS_VALIDATION_INFO_RESPONSE,\n      chre_cross_validation_sensor_SensorInfoResponse_fields, &infoResponse);\n}\n\nvoid Manager::sendMessageToHost(uint16_t hostEndpoint, uint16_t messageType,\n                                const pb_field_t fields[],\n                                const void *srcStruct) {",
        "base_contents": "void Manager::encodeAndSendDataToHost(\n    const chre_cross_validation_sensor_Data &data) {",
        "res_region": "void Manager::handleStepCounterData(\n    const chreSensorUint64Data *stepCounterDataFromChre) {\n  if (processSensorData(stepCounterDataFromChre->header,\n                        CHRE_SENSOR_TYPE_STEP_COUNTER)) {\n    chre_cross_validation_sensor_Data newData =\n        makeSensorStepCounterData(stepCounterDataFromChre);\n    sendDataToHost(newData);\n  }\n}\n\nvoid Manager::sendDataToHost(const chre_cross_validation_sensor_Data &data) {\n  sendMessageToHost(\n      mCrossValidatorState->hostEndpoint,\n      chre_cross_validation_sensor_MessageType_CHRE_CROSS_VALIDATION_DATA,\n      chre_cross_validation_sensor_Data_fields, &data);\n}\n\nvoid Manager::sendInfoResponse(\n    uint16_t hostEndpoint,\n    const chre_cross_validation_sensor_SensorInfoResponse &infoResponse) {\n  sendMessageToHost(\n      hostEndpoint,\n      chre_cross_validation_sensor_MessageType_CHRE_CROSS_VALIDATION_INFO_RESPONSE,\n      chre_cross_validation_sensor_SensorInfoResponse_fields, &infoResponse);\n}\n\nvoid Manager::sendMessageToHost(uint16_t hostEndpoint, uint16_t messageType,\n                                const pb_field_t fields[],\n                                const void *srcStruct) {",
        "lookback": "    const chreSensorUint64Data *stepCounterDataFromChre) {",
        "lookahead": "  size_t encodedSize;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 543,
        "end_line": 596,
        "merge_gen_region": " ManagerhandleCounterData consteUintDatastepDataFrome { ManagerhandleCounterData consteUintDatastepDataFrome { (Sensor(CounterDataChr->,RESENSORTYPESTEPCOUNTER { chr_crossvalidationsensorDataDataDataDataDataDataDataData &) sendTo(Data chr_crossvalidationsensorData &) sendTo(Endpoint chr_crossvalidationsensorDatafields &); void::InfoResponse uint_tEndpoint constecrossvalidationsensorData &) sendTo(Endpoint chr___RECROSSVALID_, chr_____Info____,data } void::InfoResponse uint_tEndpoint constecrossvalidationsensorSensorInfo & test) sendMessageHost(Endpoint chr_crossvalidationsensorMessageTypeCH___VALID_, chr____,info); void::MessageHost(16tEndpoint,16tType const__ fields const *src) sendTo(CrossStatehost,ecrossvalidationsensorMessageTypeCH___VALID_DATA chr_crossvalidationsensorDatafields &data } ManagersendInfo(16tEndpoint, chr_crossvalidationsensorSensorResponseinfo) sendMessageHost host, chr______Info_____Info___",
        "confidence": 0.9444656372070312,
        "hesitated": false,
        "resolved": false
    }
]