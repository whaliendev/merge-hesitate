[
    {
        "a_contents": "\n  /**\n   * Callback used to inform CHRE of a completed flush event.\n   *\n   * @param errorCode An error code from enum chreError, with CHRE_ERROR_NONE\n   *        indicating a successful response.\n   *\n   * @see chrePalBleApi.flush\n   *\n   * @since v1.9\n   */\n  void (*flushCallback)(uint8_t errorCode);\n\n  /**\n   * Sends a BT snoop log to the CHRE daemon.\n   *\n   * @param isTxToBtController True if the direction of the BT snoop log is Tx\n   * to BT controller. False then RX from BT controller is assumed.\n   * @param buffer a byte buffer containing the encoded log message.\n   * @param size size of the bt log message buffer.\n   */\n  void (*handleBtSnoopLog)(bool isTxToBtController, const uint8_t *buffer,\n                           size_t size);",
        "b_contents": "\n  /**\n   * Sends a BT snoop log to the CHRE daemon.\n   *\n   * @param isTxToBtController True if the direction of the BT snoop log is Tx\n   * to BT controller. False then RX from BT controller is assumed.\n   * @param buffer a byte buffer containing the encoded log message.\n   * @param size size of the bt log message buffer.\n   */\n  void (*handleBtSnoopLog)(bool isTxToBtController, const uint8_t *buffer,\n                           size_t size);",
        "base_contents": "",
        "res_region": "\n  /**\n   * Callback used to inform CHRE of a completed flush event.\n   *\n   * @param errorCode An error code from enum chreError, with CHRE_ERROR_NONE\n   *        indicating a successful response.\n   *\n   * @see chrePalBleApi.flush\n   *\n   * @since v1.9\n   */\n  void (*flushCallback)(uint8_t errorCode);\n\n  /**\n   * Sends a BT snoop log to the CHRE daemon.\n   *\n   * @param isTxToBtController True if the direction of the BT snoop log is Tx\n   * to BT controller. False then RX from BT controller is assumed.\n   * @param buffer a byte buffer containing the encoded log message.\n   * @param size size of the bt log message buffer.\n   */\n  void (*handleBtSnoopLog)(bool isTxToBtController, const uint8_t *buffer,\n                           size_t size);",
        "lookback": "  /**",
        "lookahead": "};",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 128,
        "end_line": 165,
        "merge_gen_region": " /** Callback to CH of completed event * @ errorCode error from chrError withRE__ * @ chrPalle. * @ PCIPalle. * @ PCIPalle. * *s *s * js *param An ); * * * *s *CD *s *CD *s *CD * void void__ to CH:: *CD *outputoutputoutputle void void void void__ onstruct void void void * *outputle void void void void void *",
        "confidence": 0.889909029006958,
        "hesitated": false,
        "resolved": false
    }
]