[
    {
        "a_contents": "void sendSettingChangedNotification(Setting setting, bool enabled) {",
        "b_contents": "void sendSettingChangedNotification(Setting setting, SettingState state) {",
        "base_contents": "void setSettingState(Setting setting, SettingState state) {\n  size_t index;\n  if (!getIndexForSetting(setting, &index)) {\n    LOGE(\"Unknown setting %\" PRId8, static_cast<int8_t>(setting));\n  } else {\n    gSettingStateList[index] = state;\n  }\n}\n\nconst char *getSettingStateString(Setting setting) {\n  switch (getSettingState(setting)) {\n    case SettingState::ENABLED:\n      return \"enabled\";\n      break;\n    case SettingState::DISABLED:\n      return \"disabled\";\n      break;\n    default:\n      break;\n  }\n\n  return \"unknown\";\n}\n\nvoid sendSettingChangedNotification(Setting setting, SettingState state) {",
        "res_region": "void sendSettingChangedNotification(Setting setting, bool enabled) {",
        "lookback": "  auto *eventData = memoryAlloc<struct chreUserSettingChangedEvent>();",
        "lookahead": "  auto *eventData = memoryAlloc<struct chreUserSettingChangedEvent>();",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 46,
        "end_line": 76,
        "merge_gen_region": "autoauto&&autoauto&auto&auto&auto&&auto&&auto&&auto&&auto&&auto&&auto&&auto&&auto&&&auto&&&auto&&&auto&&&auto&&&auto&auto&&auto&auto&auto&auto&auto&auto&&auto&auto&auto&&auto&&auto&&auto&&auto&&auto&auto&&auto&auto&&auto&auto&&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto&auto",
        "confidence": 0.8833380341529846,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "SettingManager::SettingManager() {\n  // Default most settings to true until the host tells us otherwise so\n  // nanoapps can begin work during boot which will get canceled if the user has\n  // disabled the feature.\n  for (size_t i = 0; i < ARRAY_SIZE(mSettingStateList); ++i) {\n    mSettingStateList[i] = true;\n  }",
        "b_contents": "SettingManager::SettingManager() {\n  // Default most settings to true until the host tells us otherwise so\n  // nanoapps can begin work during boot which will get canceled if the user has\n  // disabled the feature.\n  for (size_t i = 0; i < ARRAY_SIZE(mSettingStateList); ++i) {\n    mSettingStateList[i] = SettingState::ENABLED;\n  }",
        "base_contents": "#ifdef CHRE_AUDIO_SUPPORT_ENABLED\n  EventLoopManagerSingleton::get()->getAudioRequestManager().onSettingChanged(\n      setting, settingState);\n#endif  // CHRE_AUDIO_SUPPORT_ENABLED",
        "res_region": "SettingManager::SettingManager() {\n  // Default most settings to true until the host tells us otherwise so\n  // nanoapps can begin work during boot which will get canceled if the user has\n  // disabled the feature.\n  for (size_t i = 0; i < ARRAY_SIZE(mSettingStateList); ++i) {\n    mSettingStateList[i] = true;\n  }",
        "lookback": "  // Default most settings to true until the host tells us otherwise so",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 95,
        "end_line": 116,
        "merge_gen_region": null,
        "confidence": 0.8656333088874817,
        "hesitated": true
    },
    {
        "a_contents": "  // Airplane mode should be disabled since it being enabled causes API usage\n  // restrictions.\n  auto airplaneIndex = static_cast<uint8_t>(Setting::AIRPLANE_MODE);\n  mSettingStateList[airplaneIndex] = false;",
        "b_contents": "  // Airplane mode should be disabled since it being enabled causes API usage\n  // restrictions.\n  auto airplaneIndex = static_cast<uint8_t>(Setting::AIRPLANE_MODE);\n  mSettingStateList[airplaneIndex] = SettingState::DISABLED;",
        "base_contents": "  sendSettingChangedNotification(setting, settingState);",
        "res_region": "  // Airplane mode should be disabled since it being enabled causes API usage\n  // restrictions.\n  auto airplaneIndex = static_cast<uint8_t>(Setting::AIRPLANE_MODE);\n  mSettingStateList[airplaneIndex] = false;",
        "lookback": "  // restrictions.",
        "lookahead": "}",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 118,
        "end_line": 130,
        "merge_gen_region": " Air\"//String&//////////String&//String&//String&//String&//String&//String&&//String&&//String&&//String&&//String&&//String&&//String&&//String&&////String&////String&&//String&&&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&//String&&//String&&//String&&//String&&//String",
        "confidence": 0.9002295136451721,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "void SettingManager::postSettingChange(Setting setting, bool enabled) {\n  LOGD(\"Posting setting change: setting type %\" PRIu8 \" enabled %d\",\n       static_cast<uint8_t>(setting), enabled);",
        "b_contents": "void SettingManager::postSettingChange(Setting setting, SettingState state) {\n  LOGD(\"Posting setting change: setting type %\" PRIu8 \" state %\" PRIu8,\n       static_cast<uint8_t>(setting), static_cast<uint8_t>(state));",
        "base_contents": "}  // anonymous namespace\n\nvoid postSettingChange(Setting setting, SettingState state) {\n  LOGD(\"Posting setting change: setting type %\" PRIu8 \" state %\" PRIu8,\n       static_cast<uint8_t>(setting), static_cast<uint8_t>(state));",
        "res_region": "void SettingManager::postSettingChange(Setting setting, bool enabled) {\n  LOGD(\"Posting setting change: setting type %\" PRIu8 \" enabled %d\",\n       static_cast<uint8_t>(setting), enabled);",
        "lookback": "  LOGD(\"Posting setting change: setting type %\" PRIu8 \" enabled %d\",",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 133,
        "end_line": 147,
        "merge_gen_region": null,
        "confidence": 0.750747561454773,
        "hesitated": true
    },
    {
        "a_contents": "bool SettingManager::getSettingEnabled(Setting setting) {",
        "b_contents": "SettingState SettingManager::getSettingState(Setting setting) {",
        "base_contents": "SettingState getSettingState(Setting setting) {",
        "res_region": "bool SettingManager::getSettingEnabled(Setting setting) {",
        "lookback": "  size_t index;",
        "lookahead": "  size_t index;",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 154,
        "end_line": 160,
        "merge_gen_region": null,
        "confidence": 0.7653780579566956,
        "hesitated": true
    }
]