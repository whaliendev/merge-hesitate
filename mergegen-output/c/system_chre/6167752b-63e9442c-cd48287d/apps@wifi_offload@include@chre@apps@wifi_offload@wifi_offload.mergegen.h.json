[
    {
        "a_contents": "/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_\n#define CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_\n\n#include <cinttypes>\n#include <chre/wifi.h>\n\n#ifdef BUILD_FOR_CHRE_WIFI_OFFLOAD\n#include <chre/event.h>\n#include <chre/re.h>\n#include <chre/version.h>\n\n#ifndef FLATBUFFERS_CHRE\n#define FLATBUFFERS_CHRE\n#endif  // FLATBUFFERS_CHRE\n\n#include \"chre/util/dynamic_vector.h\"\n#include \"chre/util/unique_ptr.h\"\n// TODO: (b/62868460) eventually should use \"chre/util/nanoapp/log.h\" instead\n#include \"chre/platform/log.h\"\n\n#define LOG_TAG \"[WifiOffload]\"\n\n#undef LOGE\n#undef LOGW\n#undef LOGI\n#undef LOGD\n// Define custom logging macros to support prefixing a LOG_TAG\n#define LOGE(fmt, ...) chreLog(CHRE_LOG_ERROR, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGW(fmt, ...) chreLog(CHRE_LOG_WARN, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGI(fmt, ...) chreLog(CHRE_LOG_INFO, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGD(fmt, ...) chreLog(CHRE_LOG_DEBUG, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n\nnamespace wifi_offload {\ntemplate <typename T>\nusing Vector = chre::DynamicVector<T>;\n}  // namespace wifi_offload\n\n#else  // BUILD_FOR_CHRE_WIFI_OFFLOAD\n#include <android/log.h>\n#include <vector>\n\n#ifndef LOG_TAG\n#define LOG_TAG \"[Offload HAL]\"\n#endif\n\n// Define these to logging functions that are available for offload HAL\n#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)\n#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)\n#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)\n#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)\n\nnamespace wifi_offload {\ntemplate <typename T>\nusing Vector = std::vector<T>;\n}  // namespace wifi_offload\n\n#endif  // BUILD_FOR_CHRE_WIFI_OFFLOAD\n\n#endif  // CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_",
        "b_contents": "/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_\n#define CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_\n\n#include <cinttypes>\n\n#ifdef BUILD_FOR_CHRE_WIFI_OFFLOAD\n#include <chre.h>\n\n#ifndef FLATBUFFERS_CHRE\n#define FLATBUFFERS_CHRE\n#endif  // FLATBUFFERS_CHRE\n\n#include \"chre/util/dynamic_vector.h\"\n#include \"chre/util/unique_ptr.h\"\n// TODO: (b/62868460) eventually should use \"chre/util/nanoapp/log.h\" instead\n#include \"chre/platform/log.h\"\n\n#define LOG_TAG \"[WifiOffload]\"\n\n#undef LOGE\n#undef LOGW\n#undef LOGI\n#undef LOGD\n// Define custom logging macros to support prefixing a LOG_TAG\n#define LOGE(fmt, ...) chreLog(CHRE_LOG_ERROR, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGW(fmt, ...) chreLog(CHRE_LOG_WARN, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGI(fmt, ...) chreLog(CHRE_LOG_INFO, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGD(fmt, ...) chreLog(CHRE_LOG_DEBUG, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n\nnamespace wifi_offload {\ntemplate <typename T>\nusing Vector = chre::DynamicVector<T>;\n}  // namespace wifi_offload\n\n#else  // BUILD_FOR_CHRE_WIFI_OFFLOAD\n#include <android/log.h>\n#include <vector>\n\n#ifndef LOG_TAG\n#define LOG_TAG \"[Offload HAL]\"\n#endif\n\n// Define these to logging functions that are available for offload HAL\n#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)\n#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)\n#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)\n#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)\n\n#include \"chre/apps/wifi_offload/chre_types.h\"\n\nnamespace wifi_offload {\ntemplate <typename T>\nusing Vector = std::vector<T>;\n}  // namespace wifi_offload\n\n#endif  // BUILD_FOR_CHRE_WIFI_OFFLOAD\n\n#endif  // CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_\n#define CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_\n\n#include <cinttypes>\n#include <chre/wifi.h>\n\n#ifdef BUILD_FOR_CHRE_WIFI_OFFLOAD\n#include <chre/event.h>\n#include <chre/re.h>\n#include <chre/version.h>\n\n#ifndef FLATBUFFERS_CHRE\n#define FLATBUFFERS_CHRE\n#endif  // FLATBUFFERS_CHRE\n\n#include \"chre/util/dynamic_vector.h\"\n#include \"chre/util/unique_ptr.h\"\n// TODO: (b/62868460) eventually should use \"chre/util/nanoapp/log.h\" instead\n#include \"chre/platform/log.h\"\n\n#define LOG_TAG \"[WifiOffload]\"\n\n#undef LOGE\n#undef LOGW\n#undef LOGI\n#undef LOGD\n// Define custom logging macros to support prefixing a LOG_TAG\n#define LOGE(fmt, ...) chreLog(CHRE_LOG_ERROR, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGW(fmt, ...) chreLog(CHRE_LOG_WARN, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGI(fmt, ...) chreLog(CHRE_LOG_INFO, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n#define LOGD(fmt, ...) chreLog(CHRE_LOG_DEBUG, LOG_TAG \" \" fmt, ##__VA_ARGS__)\n\nnamespace wifi_offload {\ntemplate <typename T>\nusing Vector = chre::DynamicVector<T>;\n}  // namespace wifi_offload\n\n#else  // BUILD_FOR_CHRE_WIFI_OFFLOAD\n#include <android/log.h>\n#include <vector>\n\n#ifndef LOG_TAG\n#define LOG_TAG \"[Offload HAL]\"\n#endif\n\n// Define these to logging functions that are available for offload HAL\n#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)\n#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)\n#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)\n#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)\n\nnamespace wifi_offload {\ntemplate <typename T>\nusing Vector = std::vector<T>;\n}  // namespace wifi_offload\n\n#endif  // BUILD_FOR_CHRE_WIFI_OFFLOAD\n\n#endif  // CHRE_WIFI_OFFLOAD_WIFI_OFFLOAD_H_",
        "lookback": " * Copyright (C) 2017 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 152,
        "merge_gen_region": " CopyrightC 2017 Android Source/* CopyrightC 2017 Android Source * Licensed the Apache, 2. ( \"License * may use file in with License * may a of License * may a of License * *://.///LICENSE20 * Unless by law agreed in, * under License distributed anAS\" BASIS * WARRANTIES CONDITIONS ANY, either or. See License the for specific governing and limitations the License */ifndefREWIFIOFFLOADWIFIOFFLOADH # CH__________include <inttypes # <ewifih # BUILD___REWIFIOFFLOADincludechr/.>ifdef___REWIFIOFFLOADincludechr/.>ifndefLAT_REdefineLAT_REendif FBUFFERS_REendif FBUFFERS_REincludechr///_.\"ifndefLAT_REdefineLAT_REendif FBUFFERS_REincludechr///_.\" TODO (/68460 eventually usechr///o//.oapplogh insteadincludechr////ologh # LOGTAGWifi]\"undef # LOGEundefWundefI # LOG # LOG // custom macros support prefix a_ # LOGEfmt ...)e(RELOGERROR LOGTAG \" fmt ##_____) # LOG(, chr",
        "confidence": 0.9016158580780029,
        "hesitated": false,
        "resolved": false
    }
]