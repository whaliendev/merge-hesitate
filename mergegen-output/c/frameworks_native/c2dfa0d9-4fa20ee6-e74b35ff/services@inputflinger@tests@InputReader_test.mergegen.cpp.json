[
    {
        "a_contents": "TEST_F(SingleTouchInputMapperTest,\n       Process_WhenViewportDisplayIdChanged_TouchIsCanceledAndDeviceIsReset) {\n    addConfigurationProperty(\"touch.deviceType\", \"touchScreen\");\n    prepareDisplay(DISPLAY_ORIENTATION_0);\n    prepareButtons();\n    prepareAxes(POSITION);\n    SingleTouchInputMapper& mapper = addMapperAndConfigure<SingleTouchInputMapper>();\n    NotifyMotionArgs motionArgs;\n\n    // Down.\n    int32_t x = 100;\n    int32_t y = 200;\n    processDown(mapper, x, y);\n    processSync(mapper);\n\n    // We should receive a down event\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyMotionWasCalled(&motionArgs));\n    ASSERT_EQ(AMOTION_EVENT_ACTION_DOWN, motionArgs.action);\n\n    // Change display id\n    clearViewports();\n    prepareSecondaryDisplay(ViewportType::INTERNAL);\n\n    // We should receive a cancel event\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyMotionWasCalled(&motionArgs));\n    ASSERT_EQ(AMOTION_EVENT_ACTION_CANCEL, motionArgs.action);\n    // Then receive reset called\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyDeviceResetWasCalled());\n}\n",
        "b_contents": "TEST_F(SingleTouchInputMapperTest,\n       Process_WhenViewportDisplayIdChanged_TouchIsCanceledAndDeviceIsReset) {\n    addConfigurationProperty(\"touch.deviceType\", \"touchScreen\");\n    prepareDisplay(DISPLAY_ORIENTATION_0);\n    prepareButtons();\n    prepareAxes(POSITION);\n    SingleTouchInputMapper& mapper = addMapperAndConfigure<SingleTouchInputMapper>();\n    NotifyMotionArgs motionArgs;\n\n    // Down.\n    processDown(mapper, 100, 200);\n    processSync(mapper);\n\n    // We should receive a down event\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyMotionWasCalled(&motionArgs));\n    ASSERT_EQ(AMOTION_EVENT_ACTION_DOWN, motionArgs.action);\n\n    // Change display id\n    clearViewports();\n    prepareSecondaryDisplay(ViewportType::INTERNAL);\n\n    // We should receive a cancel event\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyMotionWasCalled(&motionArgs));\n    ASSERT_EQ(AMOTION_EVENT_ACTION_CANCEL, motionArgs.action);\n    // Then receive reset called\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyDeviceResetWasCalled());\n}\n",
        "base_contents": "",
        "res_region": "TEST_F(SingleTouchInputMapperTest,\n       Process_WhenViewportDisplayIdChanged_TouchIsCanceledAndDeviceIsReset) {\n    addConfigurationProperty(\"touch.deviceType\", \"touchScreen\");\n    prepareDisplay(DISPLAY_ORIENTATION_0);\n    prepareButtons();\n    prepareAxes(POSITION);\n    SingleTouchInputMapper& mapper = addMapperAndConfigure<SingleTouchInputMapper>();\n    NotifyMotionArgs motionArgs;\n\n    // Down.\n    int32_t x = 100;\n    int32_t y = 200;\n    processDown(mapper, x, y);\n    processSync(mapper);\n\n    // We should receive a down event\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyMotionWasCalled(&motionArgs));\n    ASSERT_EQ(AMOTION_EVENT_ACTION_DOWN, motionArgs.action);\n\n    // Change display id\n    clearViewports();\n    prepareSecondaryDisplay(ViewportType::INTERNAL);\n\n    // We should receive a cancel event\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyMotionWasCalled(&motionArgs));\n    ASSERT_EQ(AMOTION_EVENT_ACTION_CANCEL, motionArgs.action);\n    // Then receive reset called\n    ASSERT_NO_FATAL_FAILURE(mFakeListener->assertNotifyDeviceResetWasCalled());\n}\n",
        "lookback": "       Process_WhenViewportDisplayIdChanged_TouchIsCanceledAndDeviceIsReset) {",
        "lookahead": "// --- TouchDisplayProjectionTest ---",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 6692,
        "end_line": 6753,
        "merge_gen_region": "_((TouchMapper,_ViewportChangedTouchCAndIs)TESTFSingleInputTest ProcessWhenDisplayId_IsanceledAndIs) addPropertytouchdevice\",touch\");DisplayDISPLAYORIENTATIONORIENTATION0 prepare();AxesPOSITION SingleInput& =MapperConfigureSingleInputMapper NotifyArgsArgsArgs //; Down int_ x 100 int_ y 200 process(,,,);Syncmapper // should a event_____(Fake->NotifyWasCalledmotion));_((MOTIONEVENTACTIONDOWN motion.); Change id clearports prepareDisplayViewportTypeINTERNAL // should a event_____(Fake->NotifyWasCalledmotion));_(MOTIONEVENTACTIONCANCEL motion.); Then reset ASSERTNOFATALFAILUREmListenerassertDeviceWas());",
        "confidence": 0.9494361281394958,
        "hesitated": false,
        "resolved": false
    }
]