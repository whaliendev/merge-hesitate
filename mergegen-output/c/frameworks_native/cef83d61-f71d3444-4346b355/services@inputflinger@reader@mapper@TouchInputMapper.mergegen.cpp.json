[
    {
        "a_contents": "std::list<NotifyArgs> TouchInputMapper::dispatchPointerSimple(nsecs_t when, nsecs_t readTime,\n                                                              uint32_t policyFlags, bool down,\n                                                              bool hovering) {\n    LOG_ALWAYS_FATAL_IF(mDeviceMode != DeviceMode::POINTER,\n                        \"%s cannot be used when the device is not in POINTER mode.\", __func__);\n    std::list<NotifyArgs> out;",
        "b_contents": "void TouchInputMapper::dispatchPointerSimple(nsecs_t when, nsecs_t readTime, uint32_t policyFlags,\n                                             bool down, bool hovering) {\n    LOG_ALWAYS_FATAL_IF(mDeviceMode != DeviceMode::POINTER,\n                        \"%s cannot be used when the device is not in POINTER mode.\", __func__);",
        "base_contents": "void TouchInputMapper::dispatchPointerSimple(nsecs_t when, nsecs_t readTime, uint32_t policyFlags,\n                                             bool down, bool hovering) {",
        "res_region": "std::list<NotifyArgs> TouchInputMapper::dispatchPointerSimple(nsecs_t when, nsecs_t readTime,\n                                                              uint32_t policyFlags, bool down,\n                                                              bool hovering) {\n    LOG_ALWAYS_FATAL_IF(mDeviceMode != DeviceMode::POINTER,\n                        \"%s cannot be used when the device is not in POINTER mode.\", __func__);\n    std::list<NotifyArgs> out;",
        "lookback": "                                                              uint32_t policyFlags, bool down,",
        "lookahead": "    int32_t metaState = getContext()->getGlobalMetaState();",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 3563,
        "end_line": 3578,
        "merge_gen_region": "::<outputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutput",
        "confidence": 0.9207776784896851,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "std::list<NotifyArgs> TouchInputMapper::abortPointerSimple(nsecs_t when, nsecs_t readTime,\n                                                           uint32_t policyFlags) {\n    std::list<NotifyArgs> out;\n    if (mPointerSimple.down || mPointerSimple.hovering) {\n        int32_t metaState = getContext()->getGlobalMetaState();\n        out.push_back(NotifyMotionArgs(getContext()->getNextId(), when, readTime, getDeviceId(),\n                                       mPointerSimple.source, mPointerSimple.displayId, policyFlags,\n                                       AMOTION_EVENT_ACTION_CANCEL, 0, AMOTION_EVENT_FLAG_CANCELED,\n                                       metaState, mLastRawState.buttonState,\n                                       MotionClassification::NONE, AMOTION_EVENT_EDGE_FLAG_NONE, 1,\n                                       &mPointerSimple.lastProperties, &mPointerSimple.lastCoords,\n                                       mOrientedXPrecision, mOrientedYPrecision,\n                                       mPointerSimple.lastCursorX, mPointerSimple.lastCursorY,\n                                       mPointerSimple.downTime,\n                                       /* videoFrames */ {}));\n        if (mPointerController != nullptr) {\n            mPointerController->fade(PointerControllerInterface::Transition::GRADUAL);\n        }\n    }\n    mPointerSimple.reset();\n    return out;",
        "b_contents": "void TouchInputMapper::abortPointerSimple(nsecs_t when, nsecs_t readTime, uint32_t policyFlags) {\n    mPointerSimple.currentCoords.clear();\n    mPointerSimple.currentProperties.clear();\n\n    if (mPointerSimple.down || mPointerSimple.hovering) {\n        int32_t metaState = getContext()->getGlobalMetaState();\n        NotifyMotionArgs args(getContext()->getNextId(), when, readTime, getDeviceId(),\n                              mPointerSimple.source, mPointerSimple.displayId, policyFlags,\n                              AMOTION_EVENT_ACTION_CANCEL, 0, AMOTION_EVENT_FLAG_CANCELED,\n                              metaState, mLastRawState.buttonState, MotionClassification::NONE,\n                              AMOTION_EVENT_EDGE_FLAG_NONE, 1, &mPointerSimple.lastProperties,\n                              &mPointerSimple.lastCoords, mOrientedXPrecision, mOrientedYPrecision,\n                              mPointerSimple.lastCursorX, mPointerSimple.lastCursorY,\n                              mPointerSimple.downTime,\n                              /* videoFrames */ {});\n        getListener().notifyMotion(&args);\n        if (mPointerController != nullptr) {\n            mPointerController->fade(PointerControllerInterface::Transition::GRADUAL);\n        }\n    }\n    mPointerSimple.reset();",
        "base_contents": "void TouchInputMapper::abortPointerSimple(nsecs_t when, nsecs_t readTime, uint32_t policyFlags) {\n    mPointerSimple.currentCoords.clear();\n    mPointerSimple.currentProperties.clear();\n\n    dispatchPointerSimple(when, readTime, policyFlags, false, false);",
        "res_region": "std::list<NotifyArgs> TouchInputMapper::abortPointerSimple(nsecs_t when, nsecs_t readTime,\n                                                           uint32_t policyFlags) {\n    std::list<NotifyArgs> out;\n    if (mPointerSimple.down || mPointerSimple.hovering) {\n        int32_t metaState = getContext()->getGlobalMetaState();\n        out.push_back(NotifyMotionArgs(getContext()->getNextId(), when, readTime, getDeviceId(),\n                                       mPointerSimple.source, mPointerSimple.displayId, policyFlags,\n                                       AMOTION_EVENT_ACTION_CANCEL, 0, AMOTION_EVENT_FLAG_CANCELED,\n                                       metaState, mLastRawState.buttonState,\n                                       MotionClassification::NONE, AMOTION_EVENT_EDGE_FLAG_NONE, 1,\n                                       &mPointerSimple.lastProperties, &mPointerSimple.lastCoords,\n                                       mOrientedXPrecision, mOrientedYPrecision,\n                                       mPointerSimple.lastCursorX, mPointerSimple.lastCursorY,\n                                       mPointerSimple.downTime,\n                                       /* videoFrames */ {}));\n        if (mPointerController != nullptr) {\n            mPointerController->fade(PointerControllerInterface::Transition::GRADUAL);\n        }\n    }\n    mPointerSimple.reset();\n    return out;",
        "lookback": "                                                           uint32_t policyFlags) {",
        "lookahead": "}",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 3714,
        "end_line": 3764,
        "merge_gen_region": "::<Args>Input::PointerSimplense_ when n_ read,32tFlags {::<<Args>Input::PointerSimplense_t,secstTime uint_tFlags { stdlistNotify>; (Pointer.ing {32tState get()->GlobalState out ifmSimpledown mSimplehover) int_ meta =ContextgetMeta();._(stringArgs(()->Id when read,Device(), mSimplesource mSimpledisplay,Flags A_____,,__,_,,__,,__,,__,,,_,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,",
        "confidence": 0.9009307622909546,
        "hesitated": false,
        "resolved": false
    }
]