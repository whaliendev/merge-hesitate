[
    {
        "a_contents": "    cachedSet.render(mRenderEngine, mTexturePool, mOutputState, false);",
        "b_contents": "    cachedSet.render(mRenderEngine, mTexturePool, mOutputState, true);\n    expectReadyBuffer(cachedSet);\n\n    EXPECT_EQ(mOutputState.framebufferSpace, cachedSet.getOutputSpace());\n    EXPECT_EQ(Rect(kOutputSize.width, kOutputSize.height), cachedSet.getTextureBounds());\n\n    // Now check that appending a new cached set properly cleans up RenderEngine resources.\n    CachedSet::Layer& layer3 = *mTestLayers[2]->cachedSetLayer.get();\n    cachedSet.append(CachedSet(layer3));\n}\n\nTEST_F(CachedSetTest, renderWhitePointNoColorTransform) {\n    // Skip the 0th layer to ensure that the bounding box of the layers is offset from (0, 0)\n    // This is a duplicate of the \"renderWhitePoint\" test, but setting \"deviceHandlesColorTransform\"\n    // to false, in the render call.\n\n    CachedSet::Layer& layer1 = *mTestLayers[1]->cachedSetLayer.get();\n    sp<mock::LayerFE> layerFE1 = mTestLayers[1]->layerFE;\n    CachedSet::Layer& layer2 = *mTestLayers[2]->cachedSetLayer.get();\n    sp<mock::LayerFE> layerFE2 = mTestLayers[2]->layerFE;\n\n    CachedSet cachedSet(layer1);\n    cachedSet.append(CachedSet(layer2));\n\n    std::vector<compositionengine::LayerFE::LayerSettings> clientCompList1;\n    clientCompList1.push_back({});\n\n    std::vector<compositionengine::LayerFE::LayerSettings> clientCompList2;\n    clientCompList2.push_back({});\n\n    mOutputState.displayBrightnessNits = 400.f;\n\n    const auto drawLayers =\n            [&](const renderengine::DisplaySettings& displaySettings,\n                const std::vector<renderengine::LayerSettings>&,\n                const std::shared_ptr<renderengine::ExternalTexture>&, const bool,\n                base::unique_fd&&) -> std::future<renderengine::RenderEngineResult> {\n        EXPECT_EQ(mOutputState.displayBrightnessNits, displaySettings.targetLuminanceNits);\n        return futureOf<renderengine::RenderEngineResult>({NO_ERROR, base::unique_fd()});\n    };\n\n    EXPECT_CALL(*layerFE1,\n                prepareClientCompositionList(ClientCompositionTargetSettingsWhitePointEq(\n                        mOutputState.displayBrightnessNits)))\n            .WillOnce(Return(clientCompList1));\n    EXPECT_CALL(*layerFE2,\n                prepareClientCompositionList(ClientCompositionTargetSettingsWhitePointEq(\n                        mOutputState.displayBrightnessNits)))\n            .WillOnce(Return(clientCompList2));\n    EXPECT_CALL(mRenderEngine, drawLayers(_, _, _, _, _)).WillOnce(Invoke(drawLayers));\n    mOutputState.isSecure = true;\n    cachedSet.render(mRenderEngine, mTexturePool, mOutputState, false);",
        "base_contents": "    cachedSet.render(mRenderEngine, mTexturePool, mOutputState);",
        "res_region": "    cachedSet.render(mRenderEngine, mTexturePool, mOutputState, false);",
        "lookback": "    expectReadyBuffer(cachedSet);",
        "lookahead": "    expectReadyBuffer(cachedSet);",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 526,
        "end_line": 583,
        "merge_gen_region": "Ready.(Render,Texture,Output,,);Ready(Set EXPECTEQmStateframebuffer,Set.Output()); EXPECTEQRectkSizewidth kSizeheight cached.TextureBounds // check app a cached properlyans Render resources Cached::&3 *mLayers[]->Set.();SetappendCached(3 } TESTFCachedTest renderPointColor) // theth to that bounding of layers offset from0 0 // is duplicate therenderWhite\", settingdeviceColor\" to, the call Cached::&1 *mLayers[]->Set.();<::FE layer1 mTest[]->Set..(Set cached.(Setlayer)); TESTFCachedTest renderPointColor) // theth to ensure the bounding of layers offset from0 0 // is duplicate therenderWhite\", settingdeviceColor\" to, the call Cached::&1 *mLayers1cachedLayer.();<::FE layer1 mTest[]->FE Cached::&2 *mLayers[]->Set.();<::FE layer1 mTest[]->Set.();<::FE layer2 *mLayers2cachedLayer.();<::FE layer2 mLayers2layer;SetSetSetSetlayer);SetappendCached(2 stdvector<engineLayer::",
        "confidence": 0.9216852784156799,
        "hesitated": false,
        "resolved": false
    }
]