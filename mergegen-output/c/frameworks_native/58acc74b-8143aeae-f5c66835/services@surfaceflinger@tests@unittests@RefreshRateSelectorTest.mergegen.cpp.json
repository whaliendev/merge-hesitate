[
    {
        "a_contents": "TEST_P(RefreshRateSelectorTest, frameRateIsLowerThanMinSupported) {\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        return;\n    }\n\n    auto selector = createSelector(kModes_60_90, kModeId60);\n\n    constexpr Fps kMin = RefreshRateSelector::kMinSupportedFrameRate;\n    constexpr FpsRanges kLowerThanMin = {{60_Hz, 90_Hz}, {kMin / 2, kMin / 2}};\n\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {DisplayModeId(kModeId60), kLowerThanMin, kLowerThanMin}));\n}\n\n// b/296079213\nTEST_P(RefreshRateSelectorTest, frameRateOverrideInBlockingZone60_120) {\n    auto selector = createSelector(kModes_60_120, kModeId120);\n\n    const FpsRange only120 = {120_Hz, 120_Hz};\n    const FpsRange allRange = {0_Hz, 120_Hz};\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {kModeId120, {only120, allRange}, {allRange, allRange}}));\n\n    std::vector<LayerRequirement> layers = {{.weight = 1.f}};\n    layers[0].name = \"30Hz ExplicitExactOrMultiple\";\n    layers[0].desiredRefreshRate = 30_Hz;\n    layers[0].vote = LayerVoteType::ExplicitExactOrMultiple;\n\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        EXPECT_FRAME_RATE_MODE(kMode120, 120_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    } else {\n        EXPECT_FRAME_RATE_MODE(kMode120, 30_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    }\n}\n\nTEST_P(RefreshRateSelectorTest, frameRateOverrideInBlockingZone60_90) {\n    auto selector = createSelector(kModes_60_90, kModeId90);\n\n    const FpsRange only90 = {90_Hz, 90_Hz};\n    const FpsRange allRange = {0_Hz, 90_Hz};\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {kModeId90, {only90, allRange}, {allRange, allRange}}));\n\n    std::vector<LayerRequirement> layers = {{.weight = 1.f}};\n    layers[0].name = \"30Hz ExplicitExactOrMultiple\";\n    layers[0].desiredRefreshRate = 30_Hz;\n    layers[0].vote = LayerVoteType::ExplicitExactOrMultiple;\n\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        EXPECT_FRAME_RATE_MODE(kMode90, 90_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    } else {\n        EXPECT_FRAME_RATE_MODE(kMode90, 30_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    }\n}\n\nTEST_P(RefreshRateSelectorTest, frameRateOverrideInBlockingZone60_90_NonDivisor) {\n    auto selector = createSelector(kModes_60_90, kModeId90);\n\n    const FpsRange only90 = {90_Hz, 90_Hz};\n    const FpsRange allRange = {0_Hz, 90_Hz};\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {kModeId90, {only90, allRange}, {allRange, allRange}}));\n\n    std::vector<LayerRequirement> layers = {{.weight = 1.f}};\n    layers[0].name = \"60Hz ExplicitExactOrMultiple\";\n    layers[0].desiredRefreshRate = 60_Hz;\n    layers[0].vote = LayerVoteType::ExplicitExactOrMultiple;\n\n    EXPECT_FRAME_RATE_MODE(kMode90, 90_Hz, selector.getBestScoredFrameRate(layers).frameRateMode);\n}\n",
        "b_contents": "TEST_P(RefreshRateSelectorTest, frameRateIsLowerThanMinSupported) {\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        return;\n    }\n\n    auto selector = createSelector(kModes_60_90, kModeId60);\n\n    constexpr Fps kMin = RefreshRateSelector::kMinSupportedFrameRate;\n    constexpr FpsRanges kLowerThanMin = {{60_Hz, 90_Hz}, {kMin / 2, kMin / 2}};\n\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {DisplayModeId(kModeId60), kLowerThanMin, kLowerThanMin}));\n}\n",
        "base_contents": "",
        "res_region": "TEST_P(RefreshRateSelectorTest, frameRateIsLowerThanMinSupported) {\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        return;\n    }\n\n    auto selector = createSelector(kModes_60_90, kModeId60);\n\n    constexpr Fps kMin = RefreshRateSelector::kMinSupportedFrameRate;\n    constexpr FpsRanges kLowerThanMin = {{60_Hz, 90_Hz}, {kMin / 2, kMin / 2}};\n\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {DisplayModeId(kModeId60), kLowerThanMin, kLowerThanMin}));\n}\n\n// b/296079213\nTEST_P(RefreshRateSelectorTest, frameRateOverrideInBlockingZone60_120) {\n    auto selector = createSelector(kModes_60_120, kModeId120);\n\n    const FpsRange only120 = {120_Hz, 120_Hz};\n    const FpsRange allRange = {0_Hz, 120_Hz};\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {kModeId120, {only120, allRange}, {allRange, allRange}}));\n\n    std::vector<LayerRequirement> layers = {{.weight = 1.f}};\n    layers[0].name = \"30Hz ExplicitExactOrMultiple\";\n    layers[0].desiredRefreshRate = 30_Hz;\n    layers[0].vote = LayerVoteType::ExplicitExactOrMultiple;\n\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        EXPECT_FRAME_RATE_MODE(kMode120, 120_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    } else {\n        EXPECT_FRAME_RATE_MODE(kMode120, 30_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    }\n}\n\nTEST_P(RefreshRateSelectorTest, frameRateOverrideInBlockingZone60_90) {\n    auto selector = createSelector(kModes_60_90, kModeId90);\n\n    const FpsRange only90 = {90_Hz, 90_Hz};\n    const FpsRange allRange = {0_Hz, 90_Hz};\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {kModeId90, {only90, allRange}, {allRange, allRange}}));\n\n    std::vector<LayerRequirement> layers = {{.weight = 1.f}};\n    layers[0].name = \"30Hz ExplicitExactOrMultiple\";\n    layers[0].desiredRefreshRate = 30_Hz;\n    layers[0].vote = LayerVoteType::ExplicitExactOrMultiple;\n\n    if (GetParam() != Config::FrameRateOverride::Enabled) {\n        EXPECT_FRAME_RATE_MODE(kMode90, 90_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    } else {\n        EXPECT_FRAME_RATE_MODE(kMode90, 30_Hz,\n                               selector.getBestScoredFrameRate(layers).frameRateMode);\n    }\n}\n\nTEST_P(RefreshRateSelectorTest, frameRateOverrideInBlockingZone60_90_NonDivisor) {\n    auto selector = createSelector(kModes_60_90, kModeId90);\n\n    const FpsRange only90 = {90_Hz, 90_Hz};\n    const FpsRange allRange = {0_Hz, 90_Hz};\n    EXPECT_EQ(SetPolicyResult::Changed,\n              selector.setDisplayManagerPolicy(\n                      {kModeId90, {only90, allRange}, {allRange, allRange}}));\n\n    std::vector<LayerRequirement> layers = {{.weight = 1.f}};\n    layers[0].name = \"60Hz ExplicitExactOrMultiple\";\n    layers[0].desiredRefreshRate = 60_Hz;\n    layers[0].vote = LayerVoteType::ExplicitExactOrMultiple;\n\n    EXPECT_FRAME_RATE_MODE(kMode90, 90_Hz, selector.getBestScoredFrameRate(layers).frameRateMode);\n}\n",
        "lookback": "    if (GetParam() != Config::FrameRateOverride::Enabled) {",
        "lookahead": "} // namespace",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 3112,
        "end_line": 3209,
        "merge_gen_region": "TESTPRefreshSelector,RateLowerMin)TESTPRefreshSelector,RateIsThanSupported { (() ConfigFrameRate::) return } auto =Selectork___,Mode60 constexprpsMin RefreshSelectorkkSupported; FRangesLowerMin {{_,,_Hz {k /,Min 2 EXPECTEQSetResultChanged selectorsetManager(DisplayMode(Mode60 kThan,LowerMin kThan})); ///2992 TESTPRefreshSelector,RateInZone_) auto =Selectork__,Mode120 kId constsiRange120 {_,_,_}; FRangeRange {0Hz 120Hz EXPECTEQSetResultChanged selectorsetManager(kMode120 {only,Range all},all,Range}} stdvectorLayer> =. = layers[].name \"Hz ExExactMultiple layers0desiredRate 30Hz layers layers0vote LayerTypeExplicitOr; (() ConfigFrameRate::OverrideEnabled {____Mode,_,_Bestored().Rate); else EXPECTFRAMERATEMODEk120 30Hz selectorgetScFrameRatelayersframeMode } } {_(RateTest frameOverrideBlocking6090 { selector create(Modes6090 kId); F constps only =90_,_,__}; F",
        "confidence": 0.9061858057975769,
        "hesitated": false,
        "resolved": false
    }
]