[
    {
        "a_contents": "class MockInputDevice : public InputDevice {\npublic:\n    MockInputDevice(InputReaderContext* context, int32_t id, int32_t generation,\n                    const InputDeviceIdentifier& identifier)\n          : InputDevice(context, id, generation, identifier) {}\n\n    MOCK_METHOD(uint32_t, getSources, (), (const, override));\n    MOCK_METHOD(std::optional<DisplayViewport>, getAssociatedViewport, (), (const));\n    MOCK_METHOD(bool, isEnabled, (), ());\n\n    MOCK_METHOD(void, dump, (std::string& dump, const std::string& eventHubDevStr), ());\n    MOCK_METHOD(void, addEmptyEventHubDevice, (int32_t eventHubId), ());\n    MOCK_METHOD(std::list<NotifyArgs>, addEventHubDevice,\n                (nsecs_t when, int32_t eventHubId, const InputReaderConfiguration& readerConfig),\n                ());\n    MOCK_METHOD(void, removeEventHubDevice, (int32_t eventHubId), ());\n    MOCK_METHOD(std::list<NotifyArgs>, configure,\n                (nsecs_t when, const InputReaderConfiguration& readerConfig,\n                 ConfigurationChanges changes),\n                ());\n    MOCK_METHOD(std::list<NotifyArgs>, reset, (nsecs_t when), ());\n    MOCK_METHOD(std::list<NotifyArgs>, process, (const RawEvent* rawEvents, size_t count), ());\n    MOCK_METHOD(std::list<NotifyArgs>, timeoutExpired, (nsecs_t when), ());\n    MOCK_METHOD(std::list<NotifyArgs>, updateExternalStylusState, (const StylusState& state), ());\n\n    MOCK_METHOD(InputDeviceInfo, getDeviceInfo, (), ());\n    MOCK_METHOD(int32_t, getKeyCodeState, (uint32_t sourceMask, int32_t keyCode), ());\n    MOCK_METHOD(int32_t, getScanCodeState, (uint32_t sourceMask, int32_t scanCode), ());\n    MOCK_METHOD(int32_t, getSwitchState, (uint32_t sourceMask, int32_t switchCode), ());\n    MOCK_METHOD(int32_t, getKeyCodeForKeyLocation, (int32_t locationKeyCode), (const));\n    MOCK_METHOD(bool, markSupportedKeyCodes,\n                (uint32_t sourceMask, const std::vector<int32_t>& keyCodes, uint8_t* outFlags), ());\n    MOCK_METHOD(std::list<NotifyArgs>, vibrate,\n                (const VibrationSequence& sequence, ssize_t repeat, int32_t token), ());\n    MOCK_METHOD(std::list<NotifyArgs>, cancelVibrate, (int32_t token), ());\n    MOCK_METHOD(bool, isVibrating, (), ());\n    MOCK_METHOD(std::vector<int32_t>, getVibratorIds, (), ());\n    MOCK_METHOD(std::list<NotifyArgs>, cancelTouch, (nsecs_t when, nsecs_t readTime), ());\n    MOCK_METHOD(bool, enableSensor,\n                (InputDeviceSensorType sensorType, std::chrono::microseconds samplingPeriod,\n                 std::chrono::microseconds maxBatchReportLatency),\n                ());\n\n    MOCK_METHOD(void, disableSensor, (InputDeviceSensorType sensorType), ());\n    MOCK_METHOD(void, flushSensor, (InputDeviceSensorType sensorType), ());\n\n    MOCK_METHOD(std::optional<int32_t>, getBatteryEventHubId, (), (const));\n\n    MOCK_METHOD(bool, setLightColor, (int32_t lightId, int32_t color), ());\n    MOCK_METHOD(bool, setLightPlayerId, (int32_t lightId, int32_t playerId), ());\n    MOCK_METHOD(std::optional<int32_t>, getLightColor, (int32_t lightId), ());\n    MOCK_METHOD(std::optional<int32_t>, getLightPlayerId, (int32_t lightId), ());\n\n    MOCK_METHOD(int32_t, getMetaState, (), ());\n    MOCK_METHOD(void, updateMetaState, (int32_t keyCode), ());\n\n    MOCK_METHOD(void, addKeyRemapping, (int32_t fromKeyCode, int32_t toKeyCode), ());\n\n    MOCK_METHOD(void, setKeyboardType, (KeyboardType keyboardType), ());\n\n    MOCK_METHOD(void, bumpGeneration, (), ());\n\n    MOCK_METHOD(const PropertyMap&, getConfiguration, (), (const, override));\n\n    MOCK_METHOD(NotifyDeviceResetArgs, notifyReset, (nsecs_t when), ());\n\n    MOCK_METHOD(std::optional<ui::LogicalDisplayId>, getAssociatedDisplayId, (), ());\n\n    MOCK_METHOD(void, updateLedState, (bool reset), ());\n\n    MOCK_METHOD(size_t, getMapperCount, (), ());\n};",
        "b_contents": "class MockInputDevice : public InputDevice {\npublic:\n    MockInputDevice(InputReaderContext* context, int32_t id, int32_t generation,\n                    const InputDeviceIdentifier& identifier)\n          : InputDevice(context, id, generation, identifier) {}\n\n    MOCK_METHOD(uint32_t, getSources, (), (const, override));\n    MOCK_METHOD(bool, isEnabled, (), ());\n\n    MOCK_METHOD(void, dump, (std::string& dump, const std::string& eventHubDevStr), ());\n    MOCK_METHOD(void, addEmptyEventHubDevice, (int32_t eventHubId), ());\n    MOCK_METHOD(std::list<NotifyArgs>, addEventHubDevice,\n                (nsecs_t when, int32_t eventHubId, const InputReaderConfiguration& readerConfig),\n                ());\n    MOCK_METHOD(void, removeEventHubDevice, (int32_t eventHubId), ());\n    MOCK_METHOD(std::list<NotifyArgs>, configure,\n                (nsecs_t when, const InputReaderConfiguration& readerConfig,\n                 ConfigurationChanges changes),\n                ());\n    MOCK_METHOD(std::list<NotifyArgs>, reset, (nsecs_t when), ());\n    MOCK_METHOD(std::list<NotifyArgs>, process, (const RawEvent* rawEvents, size_t count), ());\n    MOCK_METHOD(std::list<NotifyArgs>, timeoutExpired, (nsecs_t when), ());\n    MOCK_METHOD(std::list<NotifyArgs>, updateExternalStylusState, (const StylusState& state), ());\n\n    MOCK_METHOD(InputDeviceInfo, getDeviceInfo, (), ());\n    MOCK_METHOD(int32_t, getKeyCodeState, (uint32_t sourceMask, int32_t keyCode), ());\n    MOCK_METHOD(int32_t, getScanCodeState, (uint32_t sourceMask, int32_t scanCode), ());\n    MOCK_METHOD(int32_t, getSwitchState, (uint32_t sourceMask, int32_t switchCode), ());\n    MOCK_METHOD(int32_t, getKeyCodeForKeyLocation, (int32_t locationKeyCode), (const));\n    MOCK_METHOD(bool, markSupportedKeyCodes,\n                (uint32_t sourceMask, const std::vector<int32_t>& keyCodes, uint8_t* outFlags), ());\n    MOCK_METHOD(std::list<NotifyArgs>, vibrate,\n                (const VibrationSequence& sequence, ssize_t repeat, int32_t token), ());\n    MOCK_METHOD(std::list<NotifyArgs>, cancelVibrate, (int32_t token), ());\n    MOCK_METHOD(bool, isVibrating, (), ());\n    MOCK_METHOD(std::vector<int32_t>, getVibratorIds, (), ());\n    MOCK_METHOD(std::list<NotifyArgs>, cancelTouch, (nsecs_t when, nsecs_t readTime), ());\n    MOCK_METHOD(bool, enableSensor,\n                (InputDeviceSensorType sensorType, std::chrono::microseconds samplingPeriod,\n                 std::chrono::microseconds maxBatchReportLatency),\n                ());\n\n    MOCK_METHOD(void, disableSensor, (InputDeviceSensorType sensorType), ());\n    MOCK_METHOD(void, flushSensor, (InputDeviceSensorType sensorType), ());\n\n    MOCK_METHOD(std::optional<int32_t>, getBatteryEventHubId, (), (const));\n\n    MOCK_METHOD(bool, setLightColor, (int32_t lightId, int32_t color), ());\n    MOCK_METHOD(bool, setLightPlayerId, (int32_t lightId, int32_t playerId), ());\n    MOCK_METHOD(std::optional<int32_t>, getLightColor, (int32_t lightId), ());\n    MOCK_METHOD(std::optional<int32_t>, getLightPlayerId, (int32_t lightId), ());\n\n    MOCK_METHOD(int32_t, getMetaState, (), ());\n    MOCK_METHOD(void, updateMetaState, (int32_t keyCode), ());\n\n    MOCK_METHOD(void, addKeyRemapping, (int32_t fromKeyCode, int32_t toKeyCode), ());\n\n    MOCK_METHOD(void, setKeyboardType, (KeyboardType keyboardType), ());\n\n    MOCK_METHOD(void, bumpGeneration, (), ());\n\n    MOCK_METHOD(const PropertyMap&, getConfiguration, (), (const, override));\n\n    MOCK_METHOD(NotifyDeviceResetArgs, notifyReset, (nsecs_t when), ());\n\n    MOCK_METHOD(std::optional<ui::LogicalDisplayId>, getAssociatedDisplayId, (), ());\n\n    MOCK_METHOD(void, updateLedState, (bool reset), ());\n\n    MOCK_METHOD(size_t, getMapperCount, (), ());\n};",
        "base_contents": "",
        "res_region": "class MockInputDevice : public InputDevice {\npublic:\n    MockInputDevice(InputReaderContext* context, int32_t id, int32_t generation,\n                    const InputDeviceIdentifier& identifier)\n          : InputDevice(context, id, generation, identifier) {}\n\n    MOCK_METHOD(uint32_t, getSources, (), (const, override));\n    MOCK_METHOD(std::optional<DisplayViewport>, getAssociatedViewport, (), (const));\n    MOCK_METHOD(bool, isEnabled, (), ());\n\n    MOCK_METHOD(void, dump, (std::string& dump, const std::string& eventHubDevStr), ());\n    MOCK_METHOD(void, addEmptyEventHubDevice, (int32_t eventHubId), ());\n    MOCK_METHOD(std::list<NotifyArgs>, addEventHubDevice,\n                (nsecs_t when, int32_t eventHubId, const InputReaderConfiguration& readerConfig),\n                ());\n    MOCK_METHOD(void, removeEventHubDevice, (int32_t eventHubId), ());\n    MOCK_METHOD(std::list<NotifyArgs>, configure,\n                (nsecs_t when, const InputReaderConfiguration& readerConfig,\n                 ConfigurationChanges changes),\n                ());\n    MOCK_METHOD(std::list<NotifyArgs>, reset, (nsecs_t when), ());\n    MOCK_METHOD(std::list<NotifyArgs>, process, (const RawEvent* rawEvents, size_t count), ());\n    MOCK_METHOD(std::list<NotifyArgs>, timeoutExpired, (nsecs_t when), ());\n    MOCK_METHOD(std::list<NotifyArgs>, updateExternalStylusState, (const StylusState& state), ());\n\n    MOCK_METHOD(InputDeviceInfo, getDeviceInfo, (), ());\n    MOCK_METHOD(int32_t, getKeyCodeState, (uint32_t sourceMask, int32_t keyCode), ());\n    MOCK_METHOD(int32_t, getScanCodeState, (uint32_t sourceMask, int32_t scanCode), ());\n    MOCK_METHOD(int32_t, getSwitchState, (uint32_t sourceMask, int32_t switchCode), ());\n    MOCK_METHOD(int32_t, getKeyCodeForKeyLocation, (int32_t locationKeyCode), (const));\n    MOCK_METHOD(bool, markSupportedKeyCodes,\n                (uint32_t sourceMask, const std::vector<int32_t>& keyCodes, uint8_t* outFlags), ());\n    MOCK_METHOD(std::list<NotifyArgs>, vibrate,\n                (const VibrationSequence& sequence, ssize_t repeat, int32_t token), ());\n    MOCK_METHOD(std::list<NotifyArgs>, cancelVibrate, (int32_t token), ());\n    MOCK_METHOD(bool, isVibrating, (), ());\n    MOCK_METHOD(std::vector<int32_t>, getVibratorIds, (), ());\n    MOCK_METHOD(std::list<NotifyArgs>, cancelTouch, (nsecs_t when, nsecs_t readTime), ());\n    MOCK_METHOD(bool, enableSensor,\n                (InputDeviceSensorType sensorType, std::chrono::microseconds samplingPeriod,\n                 std::chrono::microseconds maxBatchReportLatency),\n                ());\n\n    MOCK_METHOD(void, disableSensor, (InputDeviceSensorType sensorType), ());\n    MOCK_METHOD(void, flushSensor, (InputDeviceSensorType sensorType), ());\n\n    MOCK_METHOD(std::optional<int32_t>, getBatteryEventHubId, (), (const));\n\n    MOCK_METHOD(bool, setLightColor, (int32_t lightId, int32_t color), ());\n    MOCK_METHOD(bool, setLightPlayerId, (int32_t lightId, int32_t playerId), ());\n    MOCK_METHOD(std::optional<int32_t>, getLightColor, (int32_t lightId), ());\n    MOCK_METHOD(std::optional<int32_t>, getLightPlayerId, (int32_t lightId), ());\n\n    MOCK_METHOD(int32_t, getMetaState, (), ());\n    MOCK_METHOD(void, updateMetaState, (int32_t keyCode), ());\n\n    MOCK_METHOD(void, addKeyRemapping, (int32_t fromKeyCode, int32_t toKeyCode), ());\n\n    MOCK_METHOD(void, setKeyboardType, (KeyboardType keyboardType), ());\n\n    MOCK_METHOD(void, bumpGeneration, (), ());\n\n    MOCK_METHOD(const PropertyMap&, getConfiguration, (), (const, override));\n\n    MOCK_METHOD(NotifyDeviceResetArgs, notifyReset, (nsecs_t when), ());\n\n    MOCK_METHOD(std::optional<ui::LogicalDisplayId>, getAssociatedDisplayId, (), ());\n\n    MOCK_METHOD(void, updateLedState, (bool reset), ());\n\n    MOCK_METHOD(size_t, getMapperCount, (), ());\n};",
        "lookback": "public:",
        "lookahead": "} // namespace android",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 193,
        "end_line": 339,
        "merge_gen_region": " MockInputDevice publicDevice public Mock(Reader*,: Mock() Input {:InputDeviceInputContext context int_t,32t,32t, InputIdentifier identifier :Devicecontext id generation identifier {}_(32t get,Sources (),const,));_(::<Viewport getViewport (),const MOCKMETHODbool is,Enabled (), MOCKMETHODvoid dump (::&, stdstring eventDev), MOCK_((,EmptyHub,int_ eventId ()); MOCKMETHODstdlistNotify>,EventDevice,nse_ when int_ eventId const, Input ());_(::<Args>,EventDevice (cst,32tHub,32tHub, InputConfiguration reader), MOCKMETHODvoid removeHub,int_tHub),int_ eventId ()); MOCKMETHODstdlistNotify>, configure (cst, InputConfiguration reader,Changes), MOCKMETHODstdlistNotify>, reset (cst), MOCK_(::<Args>,Exp, (cst), MOCKMETHODstdlistNotify>,Externallus,constlus&), MOCKMETHODInput,DeviceInfo get, ());_(32t getCode,uint_ source,32tCode ());_(32tMask int_ key), MOCK_(32t getCodeState (32tMask), MOCKMETHOD",
        "confidence": 0.894183874130249,
        "hesitated": false,
        "resolved": false
    }
]