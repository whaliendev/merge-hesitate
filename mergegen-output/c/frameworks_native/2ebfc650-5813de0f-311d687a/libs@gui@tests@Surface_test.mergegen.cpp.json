[
    {
        "a_contents": "",
        "b_contents": "    status_t getSupportedFrameTimestamps(std::vector<FrameEvent>* outSupported)\n            const override {\n        *outSupported = {\n                FrameEvent::REQUESTED_PRESENT,\n                FrameEvent::ACQUIRE,\n                FrameEvent::LATCH,\n                FrameEvent::FIRST_REFRESH_START,\n                FrameEvent::LAST_REFRESH_START,\n                FrameEvent::GPU_COMPOSITION_DONE,\n                FrameEvent::DEQUEUE_READY,\n                FrameEvent::RELEASE\n        };\n        if (mSupportsPresent) {\n            outSupported->push_back(\n                        FrameEvent::DISPLAY_PRESENT);\n        }\n        return NO_ERROR;\n    }\n\n    status_t getStaticDisplayInfo(const sp<IBinder>& /*display*/, ui::StaticDisplayInfo*) override {\n        return NO_ERROR;\n    }\n    status_t getDynamicDisplayInfo(const sp<IBinder>& /*display*/,\n                                   ui::DynamicDisplayInfo*) override {\n        return NO_ERROR;\n    }\n    status_t getDisplayState(const sp<IBinder>& /*display*/, ui::DisplayState*) override {\n        return NO_ERROR;\n    }\n    status_t getDisplayStats(const sp<IBinder>& /*display*/,\n            DisplayStatInfo* /*stats*/) override { return NO_ERROR; }\n    status_t getDisplayNativePrimaries(const sp<IBinder>& /*display*/,\n            ui::DisplayPrimaries& /*primaries*/) override {\n        return NO_ERROR;\n    }\n    status_t setActiveColorMode(const sp<IBinder>& /*display*/, ColorMode /*colorMode*/) override {\n        return NO_ERROR;\n    }\n    status_t setBootDisplayMode(const sp<IBinder>& /*display*/, ui::DisplayModeId /*id*/) override {\n        return NO_ERROR;\n    }\n\n    status_t clearAnimationFrameStats() override { return NO_ERROR; }\n    status_t getAnimationFrameStats(FrameStats* /*outStats*/) const override {\n        return NO_ERROR;\n    }\n    status_t overrideHdrTypes(const sp<IBinder>& /*display*/,\n                              const std::vector<ui::Hdr>& /*hdrTypes*/) override {\n        return NO_ERROR;\n    }\n    status_t onPullAtom(const int32_t /*atomId*/, std::string* /*outData*/,\n                        bool* /*success*/) override {\n        return NO_ERROR;\n    }\n    status_t enableVSyncInjections(bool /*enable*/) override {\n        return NO_ERROR;\n    }\n    status_t injectVSync(nsecs_t /*when*/) override { return NO_ERROR; }\n    status_t getLayerDebugInfo(std::vector<LayerDebugInfo>* /*layers*/) override {\n        return NO_ERROR;\n    }\n    status_t getCompositionPreference(\n            ui::Dataspace* /*outDefaultDataspace*/, ui::PixelFormat* /*outDefaultPixelFormat*/,\n            ui::Dataspace* /*outWideColorGamutDataspace*/,\n            ui::PixelFormat* /*outWideColorGamutPixelFormat*/) const override {\n        return NO_ERROR;\n    }\n    status_t getDisplayedContentSamplingAttributes(const sp<IBinder>& /*display*/,\n                                                   ui::PixelFormat* /*outFormat*/,\n                                                   ui::Dataspace* /*outDataspace*/,\n                                                   uint8_t* /*outComponentMask*/) const override {\n        return NO_ERROR;\n    }\n    status_t setDisplayContentSamplingEnabled(const sp<IBinder>& /*display*/, bool /*enable*/,\n                                              uint8_t /*componentMask*/,\n                                              uint64_t /*maxFrames*/) override {\n        return NO_ERROR;\n    }",
        "base_contents": "    status_t getSupportedFrameTimestamps(std::vector<FrameEvent>* outSupported)\n            const override {\n        *outSupported = {\n                FrameEvent::REQUESTED_PRESENT,\n                FrameEvent::ACQUIRE,\n                FrameEvent::LATCH,\n                FrameEvent::FIRST_REFRESH_START,\n                FrameEvent::LAST_REFRESH_START,\n                FrameEvent::GPU_COMPOSITION_DONE,\n                FrameEvent::DEQUEUE_READY,\n                FrameEvent::RELEASE\n        };\n        if (mSupportsPresent) {\n            outSupported->push_back(\n                        FrameEvent::DISPLAY_PRESENT);\n        }\n        return NO_ERROR;\n    }\n\n    void setPowerMode(const sp<IBinder>& /*display*/, int /*mode*/) override {}\n    status_t getStaticDisplayInfo(const sp<IBinder>& /*display*/, ui::StaticDisplayInfo*) override {\n        return NO_ERROR;\n    }\n    status_t getDynamicDisplayInfo(const sp<IBinder>& /*display*/,\n                                   ui::DynamicDisplayInfo*) override {\n        return NO_ERROR;\n    }\n    status_t getDisplayState(const sp<IBinder>& /*display*/, ui::DisplayState*) override {\n        return NO_ERROR;\n    }\n    status_t getDisplayStats(const sp<IBinder>& /*display*/,\n            DisplayStatInfo* /*stats*/) override { return NO_ERROR; }\n    status_t getDisplayNativePrimaries(const sp<IBinder>& /*display*/,\n            ui::DisplayPrimaries& /*primaries*/) override {\n        return NO_ERROR;\n    }\n    status_t setActiveColorMode(const sp<IBinder>& /*display*/,\n        ColorMode /*colorMode*/) override { return NO_ERROR; }\n    status_t getBootDisplayModeSupport(bool* /*outSupport*/) const override { return NO_ERROR; }\n    status_t setBootDisplayMode(const sp<IBinder>& /*display*/, ui::DisplayModeId /*id*/) override {\n        return NO_ERROR;\n    }\n    status_t clearBootDisplayMode(const sp<IBinder>& /*display*/) override { return NO_ERROR; }\n    void setAutoLowLatencyMode(const sp<IBinder>& /*display*/, bool /*on*/) override {}\n    void setGameContentType(const sp<IBinder>& /*display*/, bool /*on*/) override {}\n\n    status_t clearAnimationFrameStats() override { return NO_ERROR; }\n    status_t getAnimationFrameStats(FrameStats* /*outStats*/) const override {\n        return NO_ERROR;\n    }\n    status_t overrideHdrTypes(const sp<IBinder>& /*display*/,\n                              const std::vector<ui::Hdr>& /*hdrTypes*/) override {\n        return NO_ERROR;\n    }\n    status_t onPullAtom(const int32_t /*atomId*/, std::string* /*outData*/,\n                        bool* /*success*/) override {\n        return NO_ERROR;\n    }\n    status_t enableVSyncInjections(bool /*enable*/) override {\n        return NO_ERROR;\n    }\n    status_t injectVSync(nsecs_t /*when*/) override { return NO_ERROR; }\n    status_t getLayerDebugInfo(std::vector<LayerDebugInfo>* /*layers*/) override {\n        return NO_ERROR;\n    }\n    status_t getCompositionPreference(\n            ui::Dataspace* /*outDefaultDataspace*/, ui::PixelFormat* /*outDefaultPixelFormat*/,\n            ui::Dataspace* /*outWideColorGamutDataspace*/,\n            ui::PixelFormat* /*outWideColorGamutPixelFormat*/) const override {\n        return NO_ERROR;\n    }\n    status_t getDisplayedContentSamplingAttributes(const sp<IBinder>& /*display*/,\n                                                   ui::PixelFormat* /*outFormat*/,\n                                                   ui::Dataspace* /*outDataspace*/,\n                                                   uint8_t* /*outComponentMask*/) const override {\n        return NO_ERROR;\n    }\n    status_t setDisplayContentSamplingEnabled(const sp<IBinder>& /*display*/, bool /*enable*/,\n                                              uint8_t /*componentMask*/,\n                                              uint64_t /*maxFrames*/) override {\n        return NO_ERROR;\n    }",
        "res_region": "",
        "lookback": "                                       uint64_t /*timestamp*/,",
        "lookahead": "    status_t getDisplayedContentSample(const sp<IBinder>& /*display*/, uint64_t /*maxFrames*/,",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 716,
        "end_line": 879,
        "merge_gen_region": " statusttimestamp__ get_();",
        "confidence": 0.9238276481628418,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "",
        "b_contents": "    status_t getColorManagement(bool* /*outGetColorManagement*/) const override { return NO_ERROR; }\n    status_t getProtectedContentSupport(bool* /*outSupported*/) const override { return NO_ERROR; }\n",
        "base_contents": "    status_t getColorManagement(bool* /*outGetColorManagement*/) const override { return NO_ERROR; }\n    status_t getProtectedContentSupport(bool* /*outSupported*/) const override { return NO_ERROR; }\n\n    status_t isWideColorDisplay(const sp<IBinder>&, bool*) const override { return NO_ERROR; }\n    status_t getDisplayBrightnessSupport(const sp<IBinder>& /*displayToken*/,\n                                         bool* /*outSupport*/) const override {\n        return NO_ERROR;\n    }\n    status_t setDisplayBrightness(const sp<IBinder>& /*displayToken*/,\n                                  const gui::DisplayBrightness& /*brightness*/) override {\n        return NO_ERROR;\n    }\n\n    status_t addHdrLayerInfoListener(const sp<IBinder>&,\n                                     const sp<gui::IHdrLayerInfoListener>&) override {\n        return NO_ERROR;\n    }\n\n    status_t removeHdrLayerInfoListener(const sp<IBinder>&,\n                                        const sp<gui::IHdrLayerInfoListener>&) override {\n        return NO_ERROR;\n    }\n",
        "res_region": "",
        "lookback": "                                       const sp<IBinder>& /*stopLayerHandle*/,",
        "lookahead": "    status_t addRegionSamplingListener(const Rect& /*samplingArea*/,",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 886,
        "end_line": 915,
        "merge_gen_region": null,
        "confidence": 0.7514935731887817,
        "hesitated": true
    }
]