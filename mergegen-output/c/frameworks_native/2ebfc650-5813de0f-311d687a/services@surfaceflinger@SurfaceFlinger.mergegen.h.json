[
    {
        "a_contents": "            EXCLUDES(mStateLock);\n    status_t getDisplayNativePrimaries(const sp<IBinder>& displayToken, ui::DisplayPrimaries&);\n    status_t setActiveColorMode(const sp<IBinder>& displayToken, ui::ColorMode colorMode);\n    status_t getBootDisplayModeSupport(bool* outSupport) const;\n    status_t setBootDisplayMode(const sp<IBinder>& displayToken, ui::DisplayModeId id);\n    status_t clearBootDisplayMode(const sp<IBinder>& displayToken);\n    void setAutoLowLatencyMode(const sp<IBinder>& displayToken, bool on);\n    void setGameContentType(const sp<IBinder>& displayToken, bool on);\n    void setPowerMode(const sp<IBinder>& displayToken, int mode);\n    status_t clearAnimationFrameStats();\n    status_t getAnimationFrameStats(FrameStats* outStats) const;",
        "b_contents": "            EXCLUDES(mStateLock) override;\n    status_t getDisplayNativePrimaries(const sp<IBinder>& displayToken,\n                                       ui::DisplayPrimaries&) override;\n    status_t setActiveColorMode(const sp<IBinder>& displayToken, ui::ColorMode colorMode) override;\n    status_t getBootDisplayModeSupport(bool* outSupport) const;\n    status_t setBootDisplayMode(const sp<IBinder>& displayToken, ui::DisplayModeId id) override;\n    status_t clearBootDisplayMode(const sp<IBinder>& displayToken);\n    void setAutoLowLatencyMode(const sp<IBinder>& displayToken, bool on);\n    void setGameContentType(const sp<IBinder>& displayToken, bool on);\n    void setPowerMode(const sp<IBinder>& displayToken, int mode);\n    status_t clearAnimationFrameStats() override;\n    status_t getAnimationFrameStats(FrameStats* outStats) const override;",
        "base_contents": "            EXCLUDES(mStateLock) override;\n    status_t getDisplayNativePrimaries(const sp<IBinder>& displayToken,\n                                       ui::DisplayPrimaries&) override;\n    status_t setActiveColorMode(const sp<IBinder>& displayToken, ui::ColorMode colorMode) override;\n    status_t getBootDisplayModeSupport(bool* outSupport) const override;\n    status_t setBootDisplayMode(const sp<IBinder>& displayToken, ui::DisplayModeId id) override;\n    status_t clearBootDisplayMode(const sp<IBinder>& displayToken) override;\n    void setAutoLowLatencyMode(const sp<IBinder>& displayToken, bool on) override;\n    void setGameContentType(const sp<IBinder>& displayToken, bool on) override;\n    void setPowerMode(const sp<IBinder>& displayToken, int mode) override;\n    status_t clearAnimationFrameStats() override;\n    status_t getAnimationFrameStats(FrameStats* outStats) const override;",
        "res_region": "            EXCLUDES(mStateLock);\n    status_t getDisplayNativePrimaries(const sp<IBinder>& displayToken, ui::DisplayPrimaries&);\n    status_t setActiveColorMode(const sp<IBinder>& displayToken, ui::ColorMode colorMode);\n    status_t getBootDisplayModeSupport(bool* outSupport) const;\n    status_t setBootDisplayMode(const sp<IBinder>& displayToken, ui::DisplayModeId id);\n    status_t clearBootDisplayMode(const sp<IBinder>& displayToken);\n    void setAutoLowLatencyMode(const sp<IBinder>& displayToken, bool on);\n    void setGameContentType(const sp<IBinder>& displayToken, bool on);\n    void setPowerMode(const sp<IBinder>& displayToken, int mode);\n    status_t clearAnimationFrameStats();\n    status_t getAnimationFrameStats(FrameStats* outStats) const;",
        "lookback": "    status_t getDisplayNativePrimaries(const sp<IBinder>& displayToken, ui::DisplayPrimaries&);",
        "lookahead": "    status_t overrideHdrTypes(const sp<IBinder>& displayToken,",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 573,
        "end_line": 611,
        "merge_gen_region": "_ getNativeariesconst<inder display,::Prim&);CLU( spIB>&Token uiDisplayaries statustActiveModeconst<inder display,::ModeModeMode statustBootSupportbool out); statustBoot( spIB>&Token uiDisplayMode id statustBoot( spIB>&Token voidAutoLatency( spIB>&Token bool); setContentTypeconst<inder&Token bool); setMode( spIB>&&);",
        "confidence": 0.9414951801300049,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "                                       uint64_t timestamp, DisplayedFrameStats* outStats) const;\n    status_t getProtectedContentSupport(bool* outSupported) const;\n    status_t isWideColorDisplay(const sp<IBinder>& displayToken, bool* outIsWideColorDisplay) const;",
        "b_contents": "                                       uint64_t timestamp,\n                                       DisplayedFrameStats* outStats) const override;\n    status_t getProtectedContentSupport(bool* outSupported) const override;\n    status_t isWideColorDisplay(const sp<IBinder>& displayToken, bool* outIsWideColorDisplay) const;",
        "base_contents": "                                       uint64_t timestamp,\n                                       DisplayedFrameStats* outStats) const override;\n    status_t getProtectedContentSupport(bool* outSupported) const override;\n    status_t isWideColorDisplay(const sp<IBinder>& displayToken,\n                                bool* outIsWideColorDisplay) const override;",
        "res_region": "                                       uint64_t timestamp, DisplayedFrameStats* outStats) const;\n    status_t getProtectedContentSupport(bool* outSupported) const;\n    status_t isWideColorDisplay(const sp<IBinder>& displayToken, bool* outIsWideColorDisplay) const;",
        "lookback": "    status_t getProtectedContentSupport(bool* outSupported) const;",
        "lookahead": "    status_t addRegionSamplingListener(const Rect& samplingArea, const sp<IBinder>& stopLayerHandle,",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 629,
        "end_line": 644,
        "merge_gen_region": "64t,uint_uint>(uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_uint_",
        "confidence": 0.8972421288490295,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    binder::Status setPowerMode(const sp<IBinder>& display, int mode) override;\n    binder::Status getSupportedFrameTimestamps(std::vector<FrameEvent>* outSupported) override;\n    binder::Status getDisplayStats(const sp<IBinder>& display,\n                                   gui::DisplayStatInfo* outStatInfo) override;\n    binder::Status getDisplayState(const sp<IBinder>& display,\n                                   gui::DisplayState* outState) override;\n    binder::Status getStaticDisplayInfo(const sp<IBinder>& display,\n                                        gui::StaticDisplayInfo* outInfo) override;\n    binder::Status getDynamicDisplayInfo(const sp<IBinder>& display,\n                                         gui::DynamicDisplayInfo* outInfo) override;\n    binder::Status getDisplayNativePrimaries(const sp<IBinder>& display,\n                                             gui::DisplayPrimaries* outPrimaries) override;\n    binder::Status setActiveColorMode(const sp<IBinder>& display, int colorMode) override;\n    binder::Status setBootDisplayMode(const sp<IBinder>& display, int displayModeId) override;\n    binder::Status clearBootDisplayMode(const sp<IBinder>& display) override;\n    binder::Status getBootDisplayModeSupport(bool* outMode) override;\n    binder::Status setAutoLowLatencyMode(const sp<IBinder>& display, bool on) override;\n    binder::Status setGameContentType(const sp<IBinder>& display, bool on) override;",
        "b_contents": "    binder::Status setPowerMode(const sp<IBinder>& display, int mode) override;\n    binder::Status clearBootDisplayMode(const sp<IBinder>& display) override;\n    binder::Status getBootDisplayModeSupport(bool* outMode) override;\n    binder::Status setAutoLowLatencyMode(const sp<IBinder>& display, bool on) override;\n    binder::Status setGameContentType(const sp<IBinder>& display, bool on) override;",
        "base_contents": "",
        "res_region": "    binder::Status setPowerMode(const sp<IBinder>& display, int mode) override;\n    binder::Status getSupportedFrameTimestamps(std::vector<FrameEvent>* outSupported) override;\n    binder::Status getDisplayStats(const sp<IBinder>& display,\n                                   gui::DisplayStatInfo* outStatInfo) override;\n    binder::Status getDisplayState(const sp<IBinder>& display,\n                                   gui::DisplayState* outState) override;\n    binder::Status getStaticDisplayInfo(const sp<IBinder>& display,\n                                        gui::StaticDisplayInfo* outInfo) override;\n    binder::Status getDynamicDisplayInfo(const sp<IBinder>& display,\n                                         gui::DynamicDisplayInfo* outInfo) override;\n    binder::Status getDisplayNativePrimaries(const sp<IBinder>& display,\n                                             gui::DisplayPrimaries* outPrimaries) override;\n    binder::Status setActiveColorMode(const sp<IBinder>& display, int colorMode) override;\n    binder::Status setBootDisplayMode(const sp<IBinder>& display, int displayModeId) override;\n    binder::Status clearBootDisplayMode(const sp<IBinder>& display) override;\n    binder::Status getBootDisplayModeSupport(bool* outMode) override;\n    binder::Status setAutoLowLatencyMode(const sp<IBinder>& display, bool on) override;\n    binder::Status setGameContentType(const sp<IBinder>& display, bool on) override;",
        "lookback": "    binder::Status getSupportedFrameTimestamps(std::vector<FrameEvent>* outSupported) override;",
        "lookahead": "    binder::Status captureDisplay(const DisplayCaptureArgs&,",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 1498,
        "end_line": 1525,
        "merge_gen_region": ":: setModeconst<inder display int);:: getFrames( spIB>&, mode override binderStatus getFramesstdvectorFrame>*Supported);:: getStatsconst<inder display guiDisplayInfo outInfoInfo override binderStatusDisplay( spIB>&,::Display*Stat);:::: getState( spIB>&,::Display* out);::StatusStaticInfoconst<IB>&,::StaticInfo out);::StatusDynamicInfoconst<IB>&,::DynamicInfo outInfo override binderStatus getNativeariesconst<inder display,::Prim*Prim);:: setColor( spIB>&, color);::StatusBoot( spIB>&, display intMode);::StatusBoot( spIB>&, displayMode);:: clearDisplayMode( spIB>&);:: setLowModeconst<IB>& display bool);:: setContentTypeconst<inder display bool);:: capture( DisplayArgs",
        "confidence": 0.9107087254524231,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    binder::Status clearAnimationFrameStats() override;\n    binder::Status getAnimationFrameStats(gui::FrameStats* outStats) override;\n    binder::Status overrideHdrTypes(const sp<IBinder>& display,\n                                    const std::vector<int32_t>& hdrTypes) override;\n    binder::Status onPullAtom(int32_t atomId, gui::PullAtomData* outPullData) override;\n    binder::Status enableVSyncInjections(bool enable) override;\n    binder::Status injectVSync(int64_t when) override;\n    binder::Status getLayerDebugInfo(std::vector<gui::LayerDebugInfo>* outLayers) override;\n    binder::Status getColorManagement(bool* outGetColorManagement) override;\n    binder::Status getCompositionPreference(gui::CompositionPreference* outPref) override;\n    binder::Status getDisplayedContentSamplingAttributes(\n            const sp<IBinder>& display, gui::ContentSamplingAttributes* outAttrs) override;\n    binder::Status setDisplayContentSamplingEnabled(const sp<IBinder>& display, bool enable,\n                                                    int8_t componentMask,\n                                                    int64_t maxFrames) override;\n    binder::Status getProtectedContentSupport(bool* outSupporte) override;\n    binder::Status isWideColorDisplay(const sp<IBinder>& token,\n                                      bool* outIsWideColorDisplay) override;\n    binder::Status getDisplayBrightnessSupport(const sp<IBinder>& displayToken,\n                                               bool* outSupport) override;\n    binder::Status setDisplayBrightness(const sp<IBinder>& displayToken,\n                                        const gui::DisplayBrightness& brightness) override;\n    binder::Status addHdrLayerInfoListener(const sp<IBinder>& displayToken,\n                                           const sp<gui::IHdrLayerInfoListener>& listener) override;\n    binder::Status removeHdrLayerInfoListener(\n            const sp<IBinder>& displayToken,\n            const sp<gui::IHdrLayerInfoListener>& listener) override;\n    binder::Status notifyPowerBoost(int boostId) override;",
        "b_contents": "    binder::Status isWideColorDisplay(const sp<IBinder>& token,\n                                      bool* outIsWideColorDisplay) override;\n    binder::Status getDisplayBrightnessSupport(const sp<IBinder>& displayToken,\n                                               bool* outSupport) override;\n    binder::Status setDisplayBrightness(const sp<IBinder>& displayToken,\n                                        const gui::DisplayBrightness& brightness) override;\n    binder::Status addHdrLayerInfoListener(const sp<IBinder>& displayToken,\n                                           const sp<gui::IHdrLayerInfoListener>& listener) override;\n    binder::Status removeHdrLayerInfoListener(\n            const sp<IBinder>& displayToken,\n            const sp<gui::IHdrLayerInfoListener>& listener) override;\n    binder::Status notifyPowerBoost(int boostId) override;",
        "base_contents": "",
        "res_region": "    binder::Status clearAnimationFrameStats() override;\n    binder::Status getAnimationFrameStats(gui::FrameStats* outStats) override;\n    binder::Status overrideHdrTypes(const sp<IBinder>& display,\n                                    const std::vector<int32_t>& hdrTypes) override;\n    binder::Status onPullAtom(int32_t atomId, gui::PullAtomData* outPullData) override;\n    binder::Status enableVSyncInjections(bool enable) override;\n    binder::Status injectVSync(int64_t when) override;\n    binder::Status getLayerDebugInfo(std::vector<gui::LayerDebugInfo>* outLayers) override;\n    binder::Status getColorManagement(bool* outGetColorManagement) override;\n    binder::Status getCompositionPreference(gui::CompositionPreference* outPref) override;\n    binder::Status getDisplayedContentSamplingAttributes(\n            const sp<IBinder>& display, gui::ContentSamplingAttributes* outAttrs) override;\n    binder::Status setDisplayContentSamplingEnabled(const sp<IBinder>& display, bool enable,\n                                                    int8_t componentMask,\n                                                    int64_t maxFrames) override;\n    binder::Status getProtectedContentSupport(bool* outSupporte) override;\n    binder::Status isWideColorDisplay(const sp<IBinder>& token,\n                                      bool* outIsWideColorDisplay) override;\n    binder::Status getDisplayBrightnessSupport(const sp<IBinder>& displayToken,\n                                               bool* outSupport) override;\n    binder::Status setDisplayBrightness(const sp<IBinder>& displayToken,\n                                        const gui::DisplayBrightness& brightness) override;\n    binder::Status addHdrLayerInfoListener(const sp<IBinder>& displayToken,\n                                           const sp<gui::IHdrLayerInfoListener>& listener) override;\n    binder::Status removeHdrLayerInfoListener(\n            const sp<IBinder>& displayToken,\n            const sp<gui::IHdrLayerInfoListener>& listener) override;\n    binder::Status notifyPowerBoost(int boostId) override;",
        "lookback": "    binder::Status getAnimationFrameStats(gui::FrameStats* outStats) override;",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 1531,
        "end_line": 1574,
        "merge_gen_region": ":: clearFrame();:: getFrame(StatsguiFrameStats out);:: overrideTypesconst<inder display const::<<32t hdr);:: onAtomint_ atom,::PullData outData override binderStatusVInjectionsbool);:: inV(64t);::StatusjectSync(64t);:: getDebugInfostdvectorguiLayer>*Layers override binderStatusColorManagementbool outColor);:: getPreferenceguiComposition*Pref override binderStatusDisplayContentAttributes const<inder display,::Sampling*Attrs override binderStatusDisplayContentEnabledconst<IB>&, enable int_ component,64tFrames override binderStatusProtectedSupport(* oute);:: isColor( spIB>&,::Sampling*Attrs override binderStatusDisplayContentEnabledconst<IB>&, enable int_ component,64tFrames override binderStatusProtectedSupport(* oute);:: isColor( spIB>&,,* oute override binderStatus isColor( spIB>&,**IsColor);::;:: getBrightness(::Preference out);:: binderStatusDisplayWideDisplayconst spIB>&,**IsColor);:: getBrightness( spIB>&Token bool*Support override binderStatusDisplay(",
        "confidence": 0.8924301862716675,
        "hesitated": false,
        "resolved": false
    }
]