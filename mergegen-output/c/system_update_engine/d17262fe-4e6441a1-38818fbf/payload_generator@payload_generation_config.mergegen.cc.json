[
    {
        "a_contents": "PayloadVersion::PayloadVersion(uint64_t major_version, uint32_t minor_version) {\n  major = major_version;\n  minor = minor_version;\n}\n\nbool PayloadVersion::Validate() const {\n  TEST_AND_RETURN_FALSE(major == kChromeOSMajorPayloadVersion ||\n                        major == kBrilloMajorPayloadVersion);\n  TEST_AND_RETURN_FALSE(minor == kFullPayloadMinorVersion ||\n                        minor == kInPlaceMinorPayloadVersion ||\n                        minor == kSourceMinorPayloadVersion ||\n                        minor == kOpSrcHashMinorPayloadVersion ||\n                        minor == kImgdiffMinorPayloadVersion);\n  return true;\n}\n\nbool PayloadVersion::OperationAllowed(InstallOperation_Type operation) const {\n  switch (operation) {\n    // Full operations:\n    case InstallOperation::REPLACE:\n    case InstallOperation::REPLACE_BZ:\n      // These operations were included in the original payload format.\n      return true;\n\n    case InstallOperation::REPLACE_XZ:\n      // These operations are included in the major version used in Brillo, but\n      // can also be used with minor version 3 or newer.\n      return major == kBrilloMajorPayloadVersion ||\n             minor >= kOpSrcHashMinorPayloadVersion;\n\n    case InstallOperation::ZERO:\n    case InstallOperation::DISCARD:\n      // The implementation of these operations had a bug in earlier versions\n      // that prevents them from being used in any payload. We will enable\n      // them for delta payloads for now.\n      return minor >= kImgdiffMinorPayloadVersion;\n\n    // Delta operations:\n    case InstallOperation::MOVE:\n    case InstallOperation::BSDIFF:\n      // MOVE and BSDIFF were replaced by SOURCE_COPY and SOURCE_BSDIFF and\n      // should not be used in newer delta versions, since the idempotent checks\n      // were removed.\n      return minor == kInPlaceMinorPayloadVersion;\n\n    case InstallOperation::SOURCE_COPY:\n    case InstallOperation::SOURCE_BSDIFF:\n      return minor >= kSourceMinorPayloadVersion;\n\n    case InstallOperation::IMGDIFF:\n      return minor >= kImgdiffMinorPayloadVersion && imgdiff_allowed;\n  }\n  return false;\n}\n\nbool PayloadVersion::IsDelta() const {\n  return minor != kFullPayloadMinorVersion;\n}\n\nbool PayloadVersion::InplaceUpdate() const {\n  return minor == kInPlaceMinorPayloadVersion;\n}\n",
        "b_contents": "PayloadVersion::PayloadVersion(uint64_t major_version, uint32_t minor_version) {\n  major = major_version;\n  minor = minor_version;\n}\n\nbool PayloadVersion::Validate() const {\n  TEST_AND_RETURN_FALSE(major == kChromeOSMajorPayloadVersion ||\n                        major == kBrilloMajorPayloadVersion);\n  TEST_AND_RETURN_FALSE(minor == kFullPayloadMinorVersion ||\n                        minor == kInPlaceMinorPayloadVersion ||\n                        minor == kSourceMinorPayloadVersion ||\n                        minor == kOpSrcHashMinorPayloadVersion ||\n                        minor == kImgdiffMinorPayloadVersion);\n  return true;\n}\n\nbool PayloadVersion::OperationAllowed(InstallOperation_Type operation) const {\n  switch (operation) {\n    // Full operations:\n    case InstallOperation::REPLACE:\n    case InstallOperation::REPLACE_BZ:\n      // These operations were included in the original payload format.\n      return true;\n\n    case InstallOperation::ZERO:\n    case InstallOperation::DISCARD:\n    case InstallOperation::REPLACE_XZ:\n      // These operations are included in the major version used in Brillo, but\n      // can also be used with minor version 3 or newer.\n      return major == kBrilloMajorPayloadVersion ||\n             minor >= kOpSrcHashMinorPayloadVersion;\n\n    // Delta operations:\n    case InstallOperation::MOVE:\n    case InstallOperation::BSDIFF:\n      // MOVE and BSDIFF were replaced by SOURCE_COPY and SOURCE_BSDIFF and\n      // should not be used in newer delta versions, since the idempotent checks\n      // were removed.\n      return minor == kInPlaceMinorPayloadVersion;\n\n    case InstallOperation::SOURCE_COPY:\n    case InstallOperation::SOURCE_BSDIFF:\n      return minor >= kSourceMinorPayloadVersion;\n\n    case InstallOperation::IMGDIFF:\n      return minor >= kImgdiffMinorPayloadVersion && imgdiff_allowed;\n  }\n  return false;\n}\n\nbool PayloadVersion::IsDelta() const {\n  return minor != kFullPayloadMinorVersion;\n}\n\nbool PayloadVersion::InplaceUpdate() const {\n  return minor == kInPlaceMinorPayloadVersion;\n}\n",
        "base_contents": "",
        "res_region": "PayloadVersion::PayloadVersion(uint64_t major_version, uint32_t minor_version) {\n  major = major_version;\n  minor = minor_version;\n}\n\nbool PayloadVersion::Validate() const {\n  TEST_AND_RETURN_FALSE(major == kChromeOSMajorPayloadVersion ||\n                        major == kBrilloMajorPayloadVersion);\n  TEST_AND_RETURN_FALSE(minor == kFullPayloadMinorVersion ||\n                        minor == kInPlaceMinorPayloadVersion ||\n                        minor == kSourceMinorPayloadVersion ||\n                        minor == kOpSrcHashMinorPayloadVersion ||\n                        minor == kImgdiffMinorPayloadVersion);\n  return true;\n}\n\nbool PayloadVersion::OperationAllowed(InstallOperation_Type operation) const {\n  switch (operation) {\n    // Full operations:\n    case InstallOperation::REPLACE:\n    case InstallOperation::REPLACE_BZ:\n      // These operations were included in the original payload format.\n      return true;\n\n    case InstallOperation::REPLACE_XZ:\n      // These operations are included in the major version used in Brillo, but\n      // can also be used with minor version 3 or newer.\n      return major == kBrilloMajorPayloadVersion ||\n             minor >= kOpSrcHashMinorPayloadVersion;\n\n    case InstallOperation::ZERO:\n    case InstallOperation::DISCARD:\n      // The implementation of these operations had a bug in earlier versions\n      // that prevents them from being used in any payload. We will enable\n      // them for delta payloads for now.\n      return minor >= kImgdiffMinorPayloadVersion;\n\n    // Delta operations:\n    case InstallOperation::MOVE:\n    case InstallOperation::BSDIFF:\n      // MOVE and BSDIFF were replaced by SOURCE_COPY and SOURCE_BSDIFF and\n      // should not be used in newer delta versions, since the idempotent checks\n      // were removed.\n      return minor == kInPlaceMinorPayloadVersion;\n\n    case InstallOperation::SOURCE_COPY:\n    case InstallOperation::SOURCE_BSDIFF:\n      return minor >= kSourceMinorPayloadVersion;\n\n    case InstallOperation::IMGDIFF:\n      return minor >= kImgdiffMinorPayloadVersion && imgdiff_allowed;\n  }\n  return false;\n}\n\nbool PayloadVersion::IsDelta() const {\n  return minor != kFullPayloadMinorVersion;\n}\n\nbool PayloadVersion::InplaceUpdate() const {\n  return minor == kInPlaceMinorPayloadVersion;\n}\n",
        "lookback": "  major = major_version;",
        "lookahead": "bool PayloadGenerationConfig::Validate() const {",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 109,
        "end_line": 233,
        "merge_gen_region": null,
        "confidence": 0.7944427132606506,
        "hesitated": true
    }
]