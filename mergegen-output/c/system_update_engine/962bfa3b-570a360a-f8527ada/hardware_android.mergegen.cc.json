[
    {
        "a_contents": "namespace {\n\n// The powerwash arguments passed to recovery. Arguments are separated by \\n.\nconst char kAndroidRecoveryPowerwashCommand[] =\n    \"recovery\\n\"\n    \"--wipe_data\\n\"\n    \"--reason=wipe_data_from_ota\\n\";\n\nconst char kPropBuildDateUTC[] = \"ro.build.date.utc\";\n\n// Write a recovery command line |message| to the BCB. The arguments to recovery\n// must be separated by '\\n'. An empty string will erase the BCB.\nbool WriteBootloaderRecoveryMessage(const string& message) {\n  base::FilePath misc_device;\n  if (!utils::DeviceForMountPoint(\"/misc\", &misc_device))\n    return false;\n\n  // Setup a bootloader_message with just the command and recovery fields set.\n  bootloader_message boot = {};\n  if (!message.empty()) {\n    strncpy(boot.command, \"boot-recovery\", sizeof(boot.command) - 1);\n    memcpy(boot.recovery,\n           message.data(),\n           std::min(message.size(), sizeof(boot.recovery) - 1));\n  }\n\n  int fd =\n      HANDLE_EINTR(open(misc_device.value().c_str(), O_WRONLY | O_SYNC, 0600));\n  if (fd < 0) {\n    PLOG(ERROR) << \"Opening misc\";\n    return false;\n  }\n  ScopedFdCloser fd_closer(&fd);\n  // We only re-write the first part of the bootloader_message, up to and\n  // including the recovery message.\n  size_t boot_size =\n      offsetof(bootloader_message, recovery) + sizeof(boot.recovery);\n  if (!utils::WriteAll(fd, &boot, boot_size)) {\n    PLOG(ERROR) << \"Writing recovery command to misc\";\n    return false;\n  }\n  return true;\n}\n\n}  // namespace\n",
        "b_contents": "namespace {\n\nconst char kPropBuildDateUTC[] = \"ro.build.date.utc\";\n\n}  // namespace\n",
        "base_contents": "",
        "res_region": "namespace {\n\n// The powerwash arguments passed to recovery. Arguments are separated by \\n.\nconst char kAndroidRecoveryPowerwashCommand[] =\n    \"recovery\\n\"\n    \"--wipe_data\\n\"\n    \"--reason=wipe_data_from_ota\\n\";\n\nconst char kPropBuildDateUTC[] = \"ro.build.date.utc\";\n\n// Write a recovery command line |message| to the BCB. The arguments to recovery\n// must be separated by '\\n'. An empty string will erase the BCB.\nbool WriteBootloaderRecoveryMessage(const string& message) {\n  base::FilePath misc_device;\n  if (!utils::DeviceForMountPoint(\"/misc\", &misc_device))\n    return false;\n\n  // Setup a bootloader_message with just the command and recovery fields set.\n  bootloader_message boot = {};\n  if (!message.empty()) {\n    strncpy(boot.command, \"boot-recovery\", sizeof(boot.command) - 1);\n    memcpy(boot.recovery,\n           message.data(),\n           std::min(message.size(), sizeof(boot.recovery) - 1));\n  }\n\n  int fd =\n      HANDLE_EINTR(open(misc_device.value().c_str(), O_WRONLY | O_SYNC, 0600));\n  if (fd < 0) {\n    PLOG(ERROR) << \"Opening misc\";\n    return false;\n  }\n  ScopedFdCloser fd_closer(&fd);\n  // We only re-write the first part of the bootloader_message, up to and\n  // including the recovery message.\n  size_t boot_size =\n      offsetof(bootloader_message, recovery) + sizeof(boot.recovery);\n  if (!utils::WriteAll(fd, &boot, boot_size)) {\n    PLOG(ERROR) << \"Writing recovery command to misc\";\n    return false;\n  }\n  return true;\n}\n\n}  // namespace\n",
        "lookback": "",
        "lookahead": "namespace hardware {",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 39,
        "end_line": 94,
        "merge_gen_region": " { Thew arguments to. are byn. charAndroidPowerash[] \"\\n \"--_\\\"wipewipedatan \"--=____otan const kBuildUTC =robuilddateutc // a command || theCB The to // must separated '\\'. empty string erase BCB boolBootRecovery( string&) baseFilePath_;::loaderdevice ifutilsDeviceMount(\"/\",misc &_)) false // aloadermessage just command the fields.loadermessage = {}; (!.()) strncpybootcommand \"bootrecovery sizeofbootcommand -);(.,.(),::(.(), sizeofbootrecovery - 1 } fd HANDLEEINTRopenmiscdevicevaluecstr OWRONLY OSYNC 0600 iffd 0 {LOGERROR <<Open misc return; ScopedClo fdclo(&); We rewrite first of boot_, to // including recovery.____8__/_)) P() \" recovery to misc return; return; } true } // namespace",
        "confidence": 0.9203189611434937,
        "hesitated": false,
        "resolved": false
    }
]