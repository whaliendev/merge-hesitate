[
    {
        "a_contents": "//\n// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n#ifndef UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_\n#define UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_\n\n#include <chrono>  // NOLINT(build/c++11) -- for merge times\n#include <memory>\n#include <string>\n\n#include <brillo/message_loops/message_loop.h>\n#include <libsnapshot/snapshot.h>\n#include <libsnapshot/snapshot_stats.h>\n\n#include \"update_engine/common/action.h\"\n#include \"update_engine/common/boot_control_interface.h\"\n#include \"update_engine/common/cleanup_previous_update_action_delegate.h\"\n#include \"update_engine/common/error_code.h\"\n#include \"update_engine/common/prefs_interface.h\"\n\nnamespace chromeos_update_engine {\n\nclass CleanupPreviousUpdateAction;\n\ntemplate <>\nclass ActionTraits<CleanupPreviousUpdateAction> {\n public:\n  typedef NoneType InputObjectType;\n  typedef NoneType OutputObjectType;\n};\n\n// On Android Virtual A/B devices, clean up snapshots from previous update\n// attempt. See DynamicPartitionControlAndroid::CleanupSuccessfulUpdate.\nclass CleanupPreviousUpdateAction : public Action<CleanupPreviousUpdateAction> {\n public:\n  CleanupPreviousUpdateAction(\n      PrefsInterface* prefs,\n      BootControlInterface* boot_control,\n      android::snapshot::SnapshotManager* snapshot,\n      CleanupPreviousUpdateActionDelegateInterface* delegate);\n\n  void PerformAction() override;\n  void SuspendAction() override;\n  void ResumeAction() override;\n  void TerminateProcessing() override;\n  void ActionCompleted(ErrorCode error_code) override;\n  std::string Type() const override;\n  static std::string StaticType();\n  typedef ActionTraits<CleanupPreviousUpdateAction>::InputObjectType\n      InputObjectType;\n  typedef ActionTraits<CleanupPreviousUpdateAction>::OutputObjectType\n      OutputObjectType;\n\n private:\n  PrefsInterface* prefs_;\n  BootControlInterface* boot_control_;\n  android::snapshot::SnapshotManager* snapshot_;\n  CleanupPreviousUpdateActionDelegateInterface* delegate_;\n  bool running_{false};\n  bool cancel_failed_{false};\n  unsigned int last_percentage_{0};\n  android::snapshot::SnapshotMergeStats* merge_stats_;\n\n  void StartActionInternal();\n  void ScheduleWaitBootCompleted();\n  void WaitBootCompletedOrSchedule();\n  void ScheduleWaitMarkBootSuccessful();\n  void CheckSlotMarkedSuccessfulOrSchedule();\n  void ScheduleWaitForMerge();\n  void WaitForMergeOrSchedule();\n  void InitiateMergeAndWait();\n  void ReportMergeStats();\n\n  // Callbacks to ProcessUpdateState.\n  bool OnMergePercentageUpdate();\n  bool BeforeCancel();\n};\n\n}  // namespace chromeos_update_engine\n\n#endif  // UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_",
        "b_contents": "//\n// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n#ifndef UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_\n#define UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_\n\n#include <string>\n\n#include <brillo/message_loops/message_loop.h>\n#include <libsnapshot/snapshot.h>\n\n#include \"update_engine/common/action.h\"\n#include \"update_engine/common/boot_control_interface.h\"\n#include \"update_engine/common/cleanup_previous_update_action_delegate.h\"\n#include \"update_engine/common/error_code.h\"\n#include \"update_engine/common/prefs_interface.h\"\n\nnamespace chromeos_update_engine {\n\nclass CleanupPreviousUpdateAction;\n\ntemplate <>\nclass ActionTraits<CleanupPreviousUpdateAction> {\n public:\n  typedef NoneType InputObjectType;\n  typedef NoneType OutputObjectType;\n};\n\n// On Android Virtual A/B devices, clean up snapshots from previous update\n// attempt. See DynamicPartitionControlAndroid::CleanupSuccessfulUpdate.\nclass CleanupPreviousUpdateAction : public Action<CleanupPreviousUpdateAction> {\n public:\n  CleanupPreviousUpdateAction(\n      PrefsInterface* prefs,\n      BootControlInterface* boot_control,\n      android::snapshot::SnapshotManager* snapshot,\n      CleanupPreviousUpdateActionDelegateInterface* delegate);\n\n  void PerformAction() override;\n  void SuspendAction() override;\n  void ResumeAction() override;\n  void TerminateProcessing() override;\n  void ActionCompleted(ErrorCode error_code) override;\n  std::string Type() const override;\n  static std::string StaticType();\n  typedef ActionTraits<CleanupPreviousUpdateAction>::InputObjectType\n      InputObjectType;\n  typedef ActionTraits<CleanupPreviousUpdateAction>::OutputObjectType\n      OutputObjectType;\n\n private:\n  PrefsInterface* prefs_;\n  BootControlInterface* boot_control_;\n  android::snapshot::SnapshotManager* snapshot_;\n  CleanupPreviousUpdateActionDelegateInterface* delegate_;\n  bool running_{false};\n  bool cancel_failed_{false};\n  unsigned int last_percentage_{0};\n\n  void StartActionInternal();\n  void ScheduleWaitBootCompleted();\n  void WaitBootCompletedOrSchedule();\n  void ScheduleWaitMarkBootSuccessful();\n  void CheckSlotMarkedSuccessfulOrSchedule();\n  void ScheduleWaitForMerge();\n  void WaitForMergeOrSchedule();\n  void InitiateMergeAndWait();\n\n  // Callbacks to ProcessUpdateState.\n  bool OnMergePercentageUpdate();\n  bool BeforeCancel();\n};\n\n}  // namespace chromeos_update_engine\n\n#endif  // UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_",
        "base_contents": "",
        "res_region": "//\n// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\n#ifndef UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_\n#define UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_\n\n#include <chrono>  // NOLINT(build/c++11) -- for merge times\n#include <memory>\n#include <string>\n\n#include <brillo/message_loops/message_loop.h>\n#include <libsnapshot/snapshot.h>\n#include <libsnapshot/snapshot_stats.h>\n\n#include \"update_engine/common/action.h\"\n#include \"update_engine/common/boot_control_interface.h\"\n#include \"update_engine/common/cleanup_previous_update_action_delegate.h\"\n#include \"update_engine/common/error_code.h\"\n#include \"update_engine/common/prefs_interface.h\"\n\nnamespace chromeos_update_engine {\n\nclass CleanupPreviousUpdateAction;\n\ntemplate <>\nclass ActionTraits<CleanupPreviousUpdateAction> {\n public:\n  typedef NoneType InputObjectType;\n  typedef NoneType OutputObjectType;\n};\n\n// On Android Virtual A/B devices, clean up snapshots from previous update\n// attempt. See DynamicPartitionControlAndroid::CleanupSuccessfulUpdate.\nclass CleanupPreviousUpdateAction : public Action<CleanupPreviousUpdateAction> {\n public:\n  CleanupPreviousUpdateAction(\n      PrefsInterface* prefs,\n      BootControlInterface* boot_control,\n      android::snapshot::SnapshotManager* snapshot,\n      CleanupPreviousUpdateActionDelegateInterface* delegate);\n\n  void PerformAction() override;\n  void SuspendAction() override;\n  void ResumeAction() override;\n  void TerminateProcessing() override;\n  void ActionCompleted(ErrorCode error_code) override;\n  std::string Type() const override;\n  static std::string StaticType();\n  typedef ActionTraits<CleanupPreviousUpdateAction>::InputObjectType\n      InputObjectType;\n  typedef ActionTraits<CleanupPreviousUpdateAction>::OutputObjectType\n      OutputObjectType;\n\n private:\n  PrefsInterface* prefs_;\n  BootControlInterface* boot_control_;\n  android::snapshot::SnapshotManager* snapshot_;\n  CleanupPreviousUpdateActionDelegateInterface* delegate_;\n  bool running_{false};\n  bool cancel_failed_{false};\n  unsigned int last_percentage_{0};\n  android::snapshot::SnapshotMergeStats* merge_stats_;\n\n  void StartActionInternal();\n  void ScheduleWaitBootCompleted();\n  void WaitBootCompletedOrSchedule();\n  void ScheduleWaitMarkBootSuccessful();\n  void CheckSlotMarkedSuccessfulOrSchedule();\n  void ScheduleWaitForMerge();\n  void WaitForMergeOrSchedule();\n  void InitiateMergeAndWait();\n  void ReportMergeStats();\n\n  // Callbacks to ProcessUpdateState.\n  bool OnMergePercentageUpdate();\n  bool BeforeCancel();\n};\n\n}  // namespace chromeos_update_engine\n\n#endif  // UPDATE_ENGINE_CLEANUP_PREVIOUS_UPDATE_ACTION_H_",
        "lookback": "// Copyright (C) 2020 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 186,
        "merge_gen_region": null,
        "confidence": 0.8655778169631958,
        "hesitated": true
    }
]