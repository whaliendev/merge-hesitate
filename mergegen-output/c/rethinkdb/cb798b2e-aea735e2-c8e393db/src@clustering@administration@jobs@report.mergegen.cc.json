[
    {
        "a_contents": "        server_config_client_t *server_config_client,\n        table_meta_client_t *table_meta_client,",
        "b_contents": "        UNUSED server_config_client_t *server_config_client,",
        "base_contents": "        server_config_client_t *server_config_client,",
        "res_region": "        UNUSED server_config_client_t *server_config_client,\n        table_meta_client_t *table_meta_client,",
        "lookback": "        table_meta_client_t *table_meta_client,",
        "lookahead": "        cluster_semilattice_metadata_t const &metadata,",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 171,
        "end_line": 178,
        "merge_gen_region": null,
        "confidence": 0.6610918641090393,
        "hesitated": true
    },
    {
        "a_contents": "    ql::datum_array_builder_t servers_builder(ql::configured_limits_t::unlimited);\n    for (uuid_u const &server : servers) {\n        ql::datum_t server_name_or_uuid;\n        if (convert_server_id_to_datum(\n                server,\n                identifier_format,\n                server_config_client,\n                &server_name_or_uuid,\n                nullptr)) {\n            servers_builder.add(server_name_or_uuid);\n        }\n    }\n\n    ql::datum_object_builder_t info_builder;\n    if (!table.is_nil()) {\n        ql::datum_t table_name_or_uuid;\n        ql::datum_t db_name_or_uuid;\n        if (!convert_table_id_to_datums(\n                table,\n                identifier_format,\n                metadata,\n                table_meta_client,\n                &table_name_or_uuid,\n                nullptr,\n                &db_name_or_uuid,\n                nullptr)) {\n            return false;\n        }\n        info_builder.overwrite(\"table\", table_name_or_uuid);\n        info_builder.overwrite(\"db\", db_name_or_uuid);\n    }\n    if (type == \"index_construction\") {\n        info_builder.overwrite(\"index\", convert_string_to_datum(index));\n        info_builder.overwrite(\"progress\",\n            ql::datum_t(progress_numerator / progress_denominator));\n    } else if (type == \"query\") {\n        info_builder.overwrite(\"client_address\",\n            convert_string_to_datum(client_addr_port.ip().to_string()));\n        info_builder.overwrite(\"client_port\",\n            convert_port_to_datum(client_addr_port.port().value()));\n    } else if (type == \"backfill\") {\n        info_builder.overwrite(\"progress\",\n            ql::datum_t(progress_numerator / progress_denominator));\n\n        boost::optional<server_id_t> source_server =\n            server_config_client->get_server_id_for_peer_id(source_peer);\n        if (static_cast<bool>(source_server)) {\n            ql::datum_t source_server_name_or_uuid;\n            if (convert_server_id_to_datum(\n                    source_server.get(),\n                    identifier_format,\n                    server_config_client,\n                    &source_server_name_or_uuid,\n                    nullptr)) {\n                info_builder.overwrite(\"source_server\", source_server_name_or_uuid);\n\n                // Make sure the source server is also in the servers list.\n                if (servers.find(source_server.get()) == servers.end()) {\n                    servers_builder.add(source_server_name_or_uuid);\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n\n        ql::datum_t destination_server_name_or_uuid;\n        if (convert_server_id_to_datum(\n                destination_server,\n                identifier_format,\n                server_config_client,\n                &destination_server_name_or_uuid,\n                nullptr)) {\n            info_builder.overwrite(\"destination_server\", destination_server_name_or_uuid);\n\n            if (servers.find(destination_server) == servers.end()) {\n                servers_builder.add(destination_server_name_or_uuid);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    if (servers_builder.empty()) {",
        "b_contents": "    ql::datum_t table_name_or_uuid;\n    ql::datum_t db_name_or_uuid;\n    if (!convert_table_id_to_datums(\n            table,\n            identifier_format,\n            metadata,\n            &table_name_or_uuid,\n            nullptr,\n            &db_name_or_uuid,\n            nullptr)) {",
        "base_contents": "    ql::datum_array_builder_t servers_builder(ql::configured_limits_t::unlimited);\n    for (uuid_u const &server : servers) {\n        ql::datum_t server_name_or_uuid;\n        if (convert_server_id_to_datum(\n                server,\n                identifier_format,\n                server_config_client,\n                &server_name_or_uuid,\n                nullptr)) {\n            servers_builder.add(server_name_or_uuid);\n        }\n    }\n\n    ql::datum_object_builder_t info_builder;\n    if (!table.is_nil()) {\n        ql::datum_t table_name_or_uuid;\n        ql::datum_t db_name_or_uuid;\n        if (!convert_table_id_to_datums(\n                table,\n                identifier_format,\n                metadata,\n                &table_name_or_uuid,\n                nullptr,\n                &db_name_or_uuid,\n                nullptr)) {\n            return false;\n        }\n        info_builder.overwrite(\"table\", table_name_or_uuid);\n        info_builder.overwrite(\"db\", db_name_or_uuid);\n    }\n    if (type == \"index_construction\") {\n        info_builder.overwrite(\"index\", convert_string_to_datum(index));\n        info_builder.overwrite(\"progress\",\n            ql::datum_t(progress_numerator / progress_denominator));\n    } else if (type == \"query\") {\n        info_builder.overwrite(\"client_address\",\n            convert_string_to_datum(client_addr_port.ip().to_string()));\n        info_builder.overwrite(\"client_port\",\n            convert_port_to_datum(client_addr_port.port().value()));\n    } else if (type == \"backfill\") {\n        info_builder.overwrite(\"progress\",\n            ql::datum_t(progress_numerator / progress_denominator));\n\n        boost::optional<server_id_t> source_server =\n            server_config_client->get_server_id_for_peer_id(source_peer);\n        if (static_cast<bool>(source_server)) {\n            ql::datum_t source_server_name_or_uuid;\n            if (convert_server_id_to_datum(\n                    source_server.get(),\n                    identifier_format,\n                    server_config_client,\n                    &source_server_name_or_uuid,\n                    nullptr)) {\n                info_builder.overwrite(\"source_server\", source_server_name_or_uuid);\n\n                // Make sure the source server is also in the servers list.\n                if (servers.find(source_server.get()) == servers.end()) {\n                    servers_builder.add(source_server_name_or_uuid);\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n\n        ql::datum_t destination_server_name_or_uuid;\n        if (convert_server_id_to_datum(\n                destination_server,\n                identifier_format,\n                server_config_client,\n                &destination_server_name_or_uuid,\n                nullptr)) {\n            info_builder.overwrite(\"destination_server\", destination_server_name_or_uuid);\n\n            if (servers.find(destination_server) == servers.end()) {\n                servers_builder.add(destination_server_name_or_uuid);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    if (servers_builder.empty()) {",
        "res_region": "    ql::datum_t table_name_or_uuid;\n    ql::datum_t db_name_or_uuid;\n    if (!convert_table_id_to_datums(\n            table,\n            identifier_format,\n            metadata,\n            table_meta_client,\n            &table_name_or_uuid,\n            nullptr,\n            &db_name_or_uuid,\n            nullptr)) {",
        "lookback": "    ql::datum_t db_name_or_uuid;",
        "lookahead": "        return false;",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 185,
        "end_line": 367,
        "merge_gen_region": null,
        "confidence": 0.820146381855011,
        "hesitated": true
    }
]