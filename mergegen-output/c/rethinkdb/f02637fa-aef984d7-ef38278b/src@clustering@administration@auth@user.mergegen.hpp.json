[
    {
        "a_contents": "// Copyright 2010-2015 RethinkDB, all rights reserved.\n#ifndef CLUSTERING_ADMINISTRATION_AUTH_USER_HPP\n#define CLUSTERING_ADMINISTRATION_AUTH_USER_HPP\n\n#include <map>\n#include <string>\n\n#include \"errors.hpp\"\n#include <boost/optional.hpp>\n\n#include \"clustering/administration/auth/password.hpp\"\n#include \"clustering/administration/auth/permissions.hpp\"\n#include \"clustering/administration/auth/username.hpp\"\n#include \"containers/uuid.hpp\"\n#include \"rdb_protocol/context.hpp\"\n#include \"rpc/serialize_macros.hpp\"\n\nclass cluster_semilattice_metadata_t;\nclass table_basic_config_t;\nclass table_meta_client_t;\n\nnamespace auth {\n\n// When passed to the constructor of `user_t` it will set the defaults for an admin user\nclass admin_t {\n};\n\nclass user_t {\npublic:\n    user_t();\n    user_t(admin_t);\n    user_t(password_t password, permissions_t global_permissions);\n    user_t(ql::datum_t const &datum);\n\n    void merge(ql::datum_t const &datum);\n\n    bool has_password() const;\n    boost::optional<password_t> const &get_password() const;\n    void set_password(boost::optional<std::string> password);\n\n    permissions_t const &get_global_permissions() const;\n    permissions_t &get_global_permissions();\n    void set_global_permissions(permissions_t permissions);\n\n    std::map<database_id_t, permissions_t> const &get_database_permissions() const;\n    permissions_t get_database_permissions(database_id_t const &database_id) const;\n    permissions_t &get_database_permissions(database_id_t const &database_id);\n    void set_database_permissions(\n        database_id_t const &database_id,\n        permissions_t permissions);\n\n    std::map<namespace_id_t, permissions_t> const &get_table_permissions() const;\n    permissions_t get_table_permissions(namespace_id_t const &table_id) const;\n    permissions_t &get_table_permissions(namespace_id_t const &table_id);\n    void set_table_permissions(\n        namespace_id_t const &table_id,\n        permissions_t permissions);\n\n    bool has_read_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_write_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_config_permission() const;\n    bool has_config_permission(\n        database_id_t const &database_id) const;\n    bool has_config_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_connect_permission() const;\n\n    bool operator==(user_t const &rhs) const;\n\n    RDB_DECLARE_ME_SERIALIZABLE(user_t);\n\nprivate:\n    boost::optional<password_t> m_password;\n    permissions_t m_global_permissions;\n    std::map<database_id_t, permissions_t> m_database_permissions;\n    std::map<namespace_id_t, permissions_t> m_table_permissions;\n};\n\n}  // namespace auth\n\n#endif  // CLUSTERING_ADMINISTRATION_AUTH_USER_HPP",
        "b_contents": "// Copyright 2010-2015 RethinkDB, all rights reserved.\n#ifndef CLUSTERING_ADMINISTRATION_AUTH_USER_HPP\n#define CLUSTERING_ADMINISTRATION_AUTH_USER_HPP\n\n#include <map>\n#include <string>\n\n#include \"errors.hpp\"\n#include <boost/optional.hpp>\n\n#include \"clustering/administration/auth/password.hpp\"\n#include \"clustering/administration/auth/permissions.hpp\"\n#include \"clustering/administration/auth/username.hpp\"\n#include \"containers/uuid.hpp\"\n#include \"rdb_protocol/context.hpp\"\n#include \"rpc/serialize_macros.hpp\"\n\nclass cluster_semilattice_metadata_t;\nclass table_basic_config_t;\nclass table_meta_client_t;\n\nnamespace auth {\n\n// When passed to the constructor of `user_t` it will set the defaults for an admin user\nclass admin_t {\n};\n\nclass user_t {\npublic:\n    user_t();\n    user_t(admin_t);\n    user_t(ql::datum_t const &datum);\n\n    void merge(ql::datum_t const &datum);\n\n    bool has_password() const;\n    boost::optional<password_t> const &get_password() const;\n    void set_password(boost::optional<std::string> password);\n\n    permissions_t const &get_global_permissions() const;\n    permissions_t &get_global_permissions();\n    void set_global_permissions(permissions_t permissions);\n\n    std::map<database_id_t, permissions_t> const &get_database_permissions() const;\n    permissions_t get_database_permissions(database_id_t const &database_id) const;\n    permissions_t &get_database_permissions(database_id_t const &database_id);\n    void set_database_permissions(\n        database_id_t const &database_id,\n        permissions_t permissions);\n\n    std::map<namespace_id_t, permissions_t> const &get_table_permissions() const;\n    permissions_t get_table_permissions(namespace_id_t const &table_id) const;\n    permissions_t &get_table_permissions(namespace_id_t const &table_id);\n    void set_table_permissions(\n        namespace_id_t const &table_id,\n        permissions_t permissions);\n\n    bool has_read_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_write_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_config_permission() const;\n    bool has_config_permission(\n        database_id_t const &database_id) const;\n    bool has_config_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_connect_permission() const;\n\n    bool operator==(user_t const &rhs) const;\n\n    RDB_DECLARE_ME_SERIALIZABLE(user_t);\n\nprivate:\n    boost::optional<password_t> m_password;\n    permissions_t m_global_permissions;\n    std::map<database_id_t, permissions_t> m_database_permissions;\n    std::map<namespace_id_t, permissions_t> m_table_permissions;\n};\n\n}  // namespace auth\n\n#endif  // CLUSTERING_ADMINISTRATION_AUTH_USER_HPP",
        "base_contents": "",
        "res_region": "// Copyright 2010-2015 RethinkDB, all rights reserved.\n#ifndef CLUSTERING_ADMINISTRATION_AUTH_USER_HPP\n#define CLUSTERING_ADMINISTRATION_AUTH_USER_HPP\n\n#include <map>\n#include <string>\n\n#include \"errors.hpp\"\n#include <boost/optional.hpp>\n\n#include \"clustering/administration/auth/password.hpp\"\n#include \"clustering/administration/auth/permissions.hpp\"\n#include \"clustering/administration/auth/username.hpp\"\n#include \"containers/uuid.hpp\"\n#include \"rdb_protocol/context.hpp\"\n#include \"rpc/serialize_macros.hpp\"\n\nclass cluster_semilattice_metadata_t;\nclass table_basic_config_t;\nclass table_meta_client_t;\n\nnamespace auth {\n\n// When passed to the constructor of `user_t` it will set the defaults for an admin user\nclass admin_t {\n};\n\nclass user_t {\npublic:\n    user_t();\n    user_t(admin_t);\n    user_t(password_t password, permissions_t global_permissions);\n    user_t(ql::datum_t const &datum);\n\n    void merge(ql::datum_t const &datum);\n\n    bool has_password() const;\n    boost::optional<password_t> const &get_password() const;\n    void set_password(boost::optional<std::string> password);\n\n    permissions_t const &get_global_permissions() const;\n    permissions_t &get_global_permissions();\n    void set_global_permissions(permissions_t permissions);\n\n    std::map<database_id_t, permissions_t> const &get_database_permissions() const;\n    permissions_t get_database_permissions(database_id_t const &database_id) const;\n    permissions_t &get_database_permissions(database_id_t const &database_id);\n    void set_database_permissions(\n        database_id_t const &database_id,\n        permissions_t permissions);\n\n    std::map<namespace_id_t, permissions_t> const &get_table_permissions() const;\n    permissions_t get_table_permissions(namespace_id_t const &table_id) const;\n    permissions_t &get_table_permissions(namespace_id_t const &table_id);\n    void set_table_permissions(\n        namespace_id_t const &table_id,\n        permissions_t permissions);\n\n    bool has_read_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_write_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_config_permission() const;\n    bool has_config_permission(\n        database_id_t const &database_id) const;\n    bool has_config_permission(\n        database_id_t const &database_id,\n        namespace_id_t const &table_id) const;\n\n    bool has_connect_permission() const;\n\n    bool operator==(user_t const &rhs) const;\n\n    RDB_DECLARE_ME_SERIALIZABLE(user_t);\n\nprivate:\n    boost::optional<password_t> m_password;\n    permissions_t m_global_permissions;\n    std::map<database_id_t, permissions_t> m_database_permissions;\n    std::map<namespace_id_t, permissions_t> m_table_permissions;\n};\n\n}  // namespace auth\n\n#endif  // CLUSTERING_ADMINISTRATION_AUTH_USER_HPP",
        "lookback": "#ifndef CLUSTERING_ADMINISTRATION_AUTH_USER_HPP",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 180,
        "merge_gen_region": null,
        "confidence": 0.8780710697174072,
        "hesitated": true
    }
]