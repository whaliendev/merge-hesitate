[
    {
        "a_contents": "// Copyright 2010-2015 RethinkDB, all rights reserved.\n#include \"clustering/administration/auth/password.hpp\"\n\n#include <openssl/evp.h>\n#include <openssl/sha.h>\n\n#include \"clustering/administration/auth/crypto/pbkcs5_pbkdf2_hmac.hpp\"\n#include \"clustering/administration/auth/crypto/random.hpp\"\n#include \"containers/archive/stl_types.hpp\"\n\nnamespace auth {\n\npassword_t::password_t() {\n}\n\npassword_t::password_t(std::string const &password, uint32_t iteration_count)\n    : m_iteration_count(iteration_count) {\n    m_salt = crypto::random_bytes<16>();\n    m_hash = crypto::pbkcs5_pbkdf2_hmac_sha256(password, m_salt, iteration_count);\n}\n\nstd::array<unsigned char, 16> const &password_t::get_salt() const {\n    return m_salt;\n}\n\nstd::array<unsigned char, SHA256_DIGEST_LENGTH> const &password_t::get_hash() const {\n    return m_hash;\n}\n\nuint32_t password_t::get_iteration_count() const {\n    return m_iteration_count;\n}\n\nbool password_t::operator==(password_t const &rhs) const {\n    return\n        m_hash == rhs.m_hash &&\n        m_salt == rhs.m_salt &&\n        m_iteration_count == rhs.m_iteration_count;\n}\n\nRDB_IMPL_SERIALIZABLE_3(\n    password_t,\n    m_hash,\n    m_salt,\n    m_iteration_count);\nINSTANTIATE_SERIALIZABLE_SINCE_v2_3(password_t);\n\n}  // namespace auth",
        "b_contents": "// Copyright 2010-2015 RethinkDB, all rights reserved.\n#include \"clustering/administration/auth/password.hpp\"\n\n#include <openssl/evp.h>\n#include <openssl/rand.h>\n#include <openssl/sha.h>\n\n#include \"containers/archive/stl_types.hpp\"\n#include \"containers/archive/versioned.hpp\"\n\nnamespace auth {\n\npassword_t::password_t() {\n}\n\npassword_t::password_t(std::string const &password, uint32_t iteration_count)\n    : m_iteration_count(iteration_count) {\n    if (RAND_bytes(m_salt.data(), m_salt.size()) != 1) {\n        // FIXME, ERR_get_error\n    }\n\n    if (PKCS5_PBKDF2_HMAC(\n            password.data(),\n            password.size(),\n            m_salt.data(),\n            m_salt.size(),\n            m_iteration_count,\n            EVP_sha256(),\n            m_hash.size(),\n            m_hash.data()) != 1) {\n        // FIXME\n    }\n}\n\nbool password_t::operator==(password_t const &rhs) const {\n    return\n        m_hash == rhs.m_hash &&\n        m_salt == rhs.m_salt &&\n        m_iteration_count == rhs.m_iteration_count;\n}\n\nRDB_IMPL_SERIALIZABLE_3(\n    password_t,\n    m_hash,\n    m_salt,\n    m_iteration_count);\nINSTANTIATE_SERIALIZABLE_SINCE_v2_3(password_t);\n\n}  // namespace auth",
        "base_contents": "",
        "res_region": "// Copyright 2010-2015 RethinkDB, all rights reserved.\n#include \"clustering/administration/auth/password.hpp\"\n\n#include \"clustering/administration/auth/crypto/pbkcs5_pbkdf2_hmac.hpp\"\n#include \"clustering/administration/auth/crypto/random.hpp\"\n#include \"containers/archive/stl_types.hpp\"\n\nnamespace auth {\n\npassword_t::password_t() {\n}\n\npassword_t::password_t(std::string const &password, uint32_t iteration_count)\n    : m_iteration_count(iteration_count) {\n    m_salt = crypto::random_bytes<16>();\n    m_hash = crypto::pbkcs5_pbkdf2_hmac_sha256(password, m_salt, iteration_count);\n}\n\nstd::array<unsigned char, 16> const &password_t::get_salt() const {\n    return m_salt;\n}\n\nstd::array<unsigned char, SHA256_DIGEST_LENGTH> const &password_t::get_hash() const {\n    return m_hash;\n}\n\nuint32_t password_t::get_iteration_count() const {\n    return m_iteration_count;\n}\n\nbool password_t::operator==(password_t const &rhs) const {\n    return\n        m_hash == rhs.m_hash &&\n        m_salt == rhs.m_salt &&\n        m_iteration_count == rhs.m_iteration_count;\n}\n\nRDB_IMPL_SERIALIZABLE_3(\n    password_t,\n    m_hash,\n    m_salt,\n    m_iteration_count);\nINSTANTIATE_SERIALIZABLE_SINCE_v2_3(password_t);\n\n}  // namespace auth",
        "lookback": "#include \"clustering/administration/auth/password.hpp\"",
        "lookahead": "",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 100,
        "merge_gen_region": null,
        "confidence": 0.8154703378677368,
        "hesitated": true
    }
]