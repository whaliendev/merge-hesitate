[
    {
        "a_contents": "/*\n * Copyright (C) 2023 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#pragma once\n\n#include \"AudioHwDevice.h\"\n#include <media/audiohal/DeviceHalInterface.h>\n#include <media/audiohal/StreamHalInterface.h>\n\nnamespace android {\n\n// Abstraction for the Audio Source for the RecordThread (HAL or PassthruPatchRecord).\nstruct Source {\n    virtual ~Source() = default;\n    // The following methods have the same signatures as in StreamHalInterface.\n    virtual status_t read(void* buffer, size_t bytes, size_t* read) = 0;\n    virtual status_t getCapturePosition(int64_t* frames, int64_t* time) = 0;\n    virtual status_t standby() = 0;\n};\n\n// AudioStreamIn is immutable, so its fields are const.\n// The methods must not be const to match StreamHalInterface signature.\n\nstruct AudioStreamIn : public Source {\n    const AudioHwDevice* const audioHwDev;\n    const sp<StreamInHalInterface> stream;\n    const audio_input_flags_t flags;\n\n    AudioStreamIn(\n            const AudioHwDevice* dev, const sp<StreamInHalInterface>& in,\n            audio_input_flags_t flags)\n        : audioHwDev(dev), stream(in), flags(flags) {}\n\n    status_t read(void* buffer, size_t bytes, size_t* read) final {\n        return stream->read(buffer, bytes, read);\n    }\n\n    status_t getCapturePosition(int64_t* frames, int64_t* time) final {\n        return stream->getCapturePosition(frames, time);\n    }\n\n    status_t standby() final { return stream->standby(); }\n\n    sp<DeviceHalInterface> hwDev() const { return audioHwDev->hwDevice(); }\n};\n\n}  // namespace android",
        "b_contents": "/*\n * Copyright (C) 2023 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#pragma once\n\n#include <media/audiohal/DeviceHalInterface.h>\n#include <media/audiohal/StreamHalInterface.h>\n\nnamespace android {\n\n// Abstraction for the Audio Source for the RecordThread (HAL or PassthruPatchRecord).\nstruct Source {\n    virtual ~Source() = default;\n    // The following methods have the same signatures as in StreamHalInterface.\n    virtual status_t read(void* buffer, size_t bytes, size_t* read) = 0;\n    virtual status_t getCapturePosition(int64_t* frames, int64_t* time) = 0;\n    virtual status_t standby() = 0;\n};\n\n// AudioStreamIn is immutable, so its fields are const.\n// The methods must not be const to match StreamHalInterface signature.\n\nstruct AudioStreamIn : public Source {\n    const AudioHwDevice* const audioHwDev;\n    const sp<StreamInHalInterface> stream;\n    const audio_input_flags_t flags;\n\n    AudioStreamIn(\n            const AudioHwDevice* dev, const sp<StreamInHalInterface>& in,\n            audio_input_flags_t flags)\n        : audioHwDev(dev), stream(in), flags(flags) {}\n\n    status_t read(void* buffer, size_t bytes, size_t* read) final {\n        return stream->read(buffer, bytes, read);\n    }\n\n    status_t getCapturePosition(int64_t* frames, int64_t* time) final {\n        return stream->getCapturePosition(frames, time);\n    }\n\n    status_t standby() final { return stream->standby(); }\n\n    sp<DeviceHalInterface> hwDev() const { return audioHwDev->hwDevice(); }\n};\n\n}  // namespace android",
        "base_contents": "",
        "res_region": "/*\n * Copyright (C) 2023 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#pragma once\n\n#include \"AudioHwDevice.h\"\n#include <media/audiohal/DeviceHalInterface.h>\n#include <media/audiohal/StreamHalInterface.h>\n\nnamespace android {\n\n// Abstraction for the Audio Source for the RecordThread (HAL or PassthruPatchRecord).\nstruct Source {\n    virtual ~Source() = default;\n    // The following methods have the same signatures as in StreamHalInterface.\n    virtual status_t read(void* buffer, size_t bytes, size_t* read) = 0;\n    virtual status_t getCapturePosition(int64_t* frames, int64_t* time) = 0;\n    virtual status_t standby() = 0;\n};\n\n// AudioStreamIn is immutable, so its fields are const.\n// The methods must not be const to match StreamHalInterface signature.\n\nstruct AudioStreamIn : public Source {\n    const AudioHwDevice* const audioHwDev;\n    const sp<StreamInHalInterface> stream;\n    const audio_input_flags_t flags;\n\n    AudioStreamIn(\n            const AudioHwDevice* dev, const sp<StreamInHalInterface>& in,\n            audio_input_flags_t flags)\n        : audioHwDev(dev), stream(in), flags(flags) {}\n\n    status_t read(void* buffer, size_t bytes, size_t* read) final {\n        return stream->read(buffer, bytes, read);\n    }\n\n    status_t getCapturePosition(int64_t* frames, int64_t* time) final {\n        return stream->getCapturePosition(frames, time);\n    }\n\n    status_t standby() final { return stream->standby(); }\n\n    sp<DeviceHalInterface> hwDev() const { return audioHwDev->hwDevice(); }\n};\n\n}  // namespace android",
        "lookback": " * Copyright (C) 2023 The Android Open Source Project",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 0,
        "end_line": 122,
        "merge_gen_region": " CopyrightC 2 The Open Project * Licensed the Apache, 2. ( \"\"); you not this except in with the. * may a of License * * httpwwwapacheorglicensesLICENSE20 * Unless by law agreed in, * to writing software distributed the is on \" IS BASIS * WARRANTIES CONDITIONS ANY, either or. See License the for specific governing and limitations the License */pragma # onceincludeAudioDeviceh # </halDeviceInterfaceh # </halStreamHal.> android //straction the Audio for Record ( orsthPatch). struct { ~() default // following have sameatures inHal. statust(*,_ bytes sizet read =; statustCapture(64t frames int_* time =; statustCapture(64t frames int_* time =; statustby =; //Stream isutable so fields const // methods not const match StreamInterface. statust(*,_* read =; statustCapture(64t frames int_* time =; statustby =; //Stream isutable, its are. The methods not const matchHal signature structStream : Source constHw* audioDev const spStreamHal>;; audioinputflagst;Stream( AudioDevice dev const<InHal>&",
        "confidence": 0.9452639818191528,
        "hesitated": false,
        "resolved": false
    }
]