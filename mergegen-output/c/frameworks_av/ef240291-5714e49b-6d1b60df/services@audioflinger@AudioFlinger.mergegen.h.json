[
    {
        "a_contents": "// External classes\n#include <audio_utils/mutex.h>\n#include <audio_utils/FdToString.h>\n#include <audio_utils/SimpleLog.h>\n#include <media/IAudioFlinger.h>\n#include <media/MediaMetricsItem.h>\n#include <media/audiohal/DevicesFactoryHalInterface.h>\n#include <mediautils/ServiceUtilities.h>\n#include <mediautils/Synchronization.h>\n\n// not needed with the includes above, added to prevent transitive include dependency.\n#include <utils/KeyedVector.h>\n#include <utils/String16.h>\n#include <atomic>\n#include <functional>\n#include <map>\n#include <optional>\n#include <set>",
        "b_contents": "namespace android {\n\nclass AudioMixer;\nclass AudioBuffer;\nclass AudioResampler;\nclass DeviceHalInterface;\nclass DevicesFactoryHalCallback;\nclass DevicesFactoryHalInterface;\nclass EffectsFactoryHalInterface;\nclass FastMixer;\nclass IAudioManager;\nclass PassthruBufferProvider;\nclass ServerProxy;\n\n// ----------------------------------------------------------------------------\n\nusing android::content::AttributionSourceState;",
        "base_contents": "namespace android {\n\nclass AudioMixer;\nclass AudioBuffer;\nclass AudioResampler;\nclass DeviceHalInterface;\nclass DevicesFactoryHalCallback;\nclass DevicesFactoryHalInterface;\nclass EffectsFactoryHalInterface;\nclass FastMixer;\nclass IAudioManager;\nclass PassthruBufferProvider;\nclass ServerProxy;\n\n// ----------------------------------------------------------------------------\n\nstatic const nsecs_t kDefaultStandbyTimeInNsecs = seconds(3);\n\nusing android::content::AttributionSourceState;",
        "res_region": "// External classes\n#include <audio_utils/mutex.h>\n#include <audio_utils/FdToString.h>\n#include <audio_utils/SimpleLog.h>\n#include <media/IAudioFlinger.h>\n#include <media/MediaMetricsItem.h>\n#include <media/audiohal/DevicesFactoryHalInterface.h>\n#include <mediautils/ServiceUtilities.h>\n#include <mediautils/Synchronization.h>\n\n// not needed with the includes above, added to prevent transitive include dependency.\n#include <utils/KeyedVector.h>\n#include <utils/String16.h>\n#include <atomic>\n#include <functional>\n#include <map>\n#include <optional>\n#include <set>",
        "lookback": "#include <audio_utils/mutex.h>",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 30,
        "end_line": 87,
        "merge_gen_region": "outputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutput",
        "confidence": 0.9071592688560486,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "            audio_devices_t deviceType) REQUIRES(mutex());",
        "b_contents": "                                                audio_devices_t deviceType);\n\n    // Set kEnableExtendedChannels to true to enable greater than stereo output\n    // for the MixerThread and device sink.  Number of channels allowed is\n    // FCC_2 <= channels <= AudioMixer::MAX_NUM_CHANNELS.\n    static const bool kEnableExtendedChannels = true;\n\npublic:\n    // Remove this when Oboeservice is updated to obtain handle directly.\n    static inline std::atomic<AudioFlinger*> gAudioFlinger = nullptr;\n\n    // Returns true if channel mask is permitted for the PCM sink in the MixerThread\n    static inline bool isValidPcmSinkChannelMask(audio_channel_mask_t channelMask) {\n        switch (audio_channel_mask_get_representation(channelMask)) {\n        case AUDIO_CHANNEL_REPRESENTATION_POSITION: {\n            // Haptic channel mask is only applicable for channel position mask.\n            const uint32_t channelCount = audio_channel_count_from_out_mask(\n                    static_cast<audio_channel_mask_t>(channelMask & ~AUDIO_CHANNEL_HAPTIC_ALL));\n            const uint32_t maxChannelCount = kEnableExtendedChannels\n                    ? AudioMixer::MAX_NUM_CHANNELS : FCC_2;\n            if (channelCount < FCC_2 // mono is not supported at this time\n                    || channelCount > maxChannelCount) {\n                return false;\n            }\n            // check that channelMask is the \"canonical\" one we expect for the channelCount.\n            return audio_channel_position_mask_is_out_canonical(channelMask);\n            }\n        case AUDIO_CHANNEL_REPRESENTATION_INDEX:\n            if (kEnableExtendedChannels) {\n                const uint32_t channelCount = audio_channel_count_from_out_mask(channelMask);\n                if (channelCount >= FCC_2 // mono is not supported at this time\n                        && channelCount <= AudioMixer::MAX_NUM_CHANNELS) {\n                    return true;\n                }\n            }\n            return false;\n        default:\n            return false;\n        }\n    }\n\n    // Set kEnableExtendedPrecision to true to use extended precision in MixerThread\n    static const bool kEnableExtendedPrecision = true;\n\n    // Returns true if format is permitted for the PCM sink in the MixerThread\n    static inline bool isValidPcmSinkFormat(audio_format_t format) {\n        switch (format) {\n        case AUDIO_FORMAT_PCM_16_BIT:\n            return true;\n        case AUDIO_FORMAT_PCM_FLOAT:\n        case AUDIO_FORMAT_PCM_24_BIT_PACKED:\n        case AUDIO_FORMAT_PCM_32_BIT:\n        case AUDIO_FORMAT_PCM_8_24_BIT:\n            return kEnableExtendedPrecision;\n        default:\n            return false;\n        }\n    }\n\nprivate:",
        "base_contents": "                                                audio_devices_t deviceType);\n\n    // Set kEnableExtendedChannels to true to enable greater than stereo output\n    // for the MixerThread and device sink.  Number of channels allowed is\n    // FCC_2 <= channels <= AudioMixer::MAX_NUM_CHANNELS.\n    static const bool kEnableExtendedChannels = true;\n\npublic:\n    // Remove this when Oboeservice is updated to obtain handle directly.\n    static inline std::atomic<AudioFlinger*> gAudioFlinger = nullptr;\n\n    // Returns true if channel mask is permitted for the PCM sink in the MixerThread\n    static inline bool isValidPcmSinkChannelMask(audio_channel_mask_t channelMask) {\n        switch (audio_channel_mask_get_representation(channelMask)) {\n        case AUDIO_CHANNEL_REPRESENTATION_POSITION: {\n            // Haptic channel mask is only applicable for channel position mask.\n            const uint32_t channelCount = audio_channel_count_from_out_mask(\n                    static_cast<audio_channel_mask_t>(channelMask & ~AUDIO_CHANNEL_HAPTIC_ALL));\n            const uint32_t maxChannelCount = kEnableExtendedChannels\n                    ? AudioMixer::MAX_NUM_CHANNELS : FCC_2;\n            if (channelCount < FCC_2 // mono is not supported at this time\n                    || channelCount > maxChannelCount) {\n                return false;\n            }\n            // check that channelMask is the \"canonical\" one we expect for the channelCount.\n            return audio_channel_position_mask_is_out_canonical(channelMask);\n            }\n        case AUDIO_CHANNEL_REPRESENTATION_INDEX:\n            if (kEnableExtendedChannels) {\n                const uint32_t channelCount = audio_channel_count_from_out_mask(channelMask);\n                if (channelCount >= FCC_2 // mono is not supported at this time\n                        && channelCount <= AudioMixer::MAX_NUM_CHANNELS) {\n                    return true;\n                }\n            }\n            return false;\n        default:\n            return false;\n        }\n    }\n\n    // Set kEnableExtendedPrecision to true to use extended precision in MixerThread\n    static const bool kEnableExtendedPrecision = true;\n\n    // Returns true if format is permitted for the PCM sink in the MixerThread\n    static inline bool isValidPcmSinkFormat(audio_format_t format) {\n        switch (format) {\n        case AUDIO_FORMAT_PCM_16_BIT:\n            return true;\n        case AUDIO_FORMAT_PCM_FLOAT:\n        case AUDIO_FORMAT_PCM_24_BIT_PACKED:\n        case AUDIO_FORMAT_PCM_32_BIT:\n        case AUDIO_FORMAT_PCM_8_24_BIT:\n            return kEnableExtendedPrecision;\n        default:\n            return false;\n        }\n    }\n\n    // standby delay for MIXER and DUPLICATING playback threads is read from property\n    // ro.audio.flinger_standbytime_ms or defaults to kDefaultStandbyTimeInNsecs\n    static nsecs_t          mStandbyTimeInNsecs;\n\nprivate:",
        "res_region": "            audio_devices_t deviceType) REQUIRES(mutex());",
        "lookback": "",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 476,
        "end_line": 604,
        "merge_gen_region": null,
        "confidence": 0.44051340222358704,
        "hesitated": true
    }
]