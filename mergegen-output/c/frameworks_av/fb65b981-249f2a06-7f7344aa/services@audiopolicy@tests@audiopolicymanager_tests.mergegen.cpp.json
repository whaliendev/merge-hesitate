[
    {
        "a_contents": "\nclass AudioPolicyManagerInputPreemptionTest : public AudioPolicyManagerTestWithConfigurationFile {\n};\n\nTEST_F_WITH_FLAGS(\n        AudioPolicyManagerInputPreemptionTest,\n        SameSessionReusesInput,\n        REQUIRES_FLAGS_ENABLED(\n                ACONFIG_FLAG(com::android::media::audioserver, fix_input_sharing_logic))\n) {\n    mClient->resetInputApiCallsCounters();\n\n    audio_attributes_t attr = AUDIO_ATTRIBUTES_INITIALIZER;\n    attr.source = AUDIO_SOURCE_MIC;\n    audio_port_handle_t selectedDeviceId = AUDIO_PORT_HANDLE_NONE;\n    audio_io_handle_t input1 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input1, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                            AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                            k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n\n    audio_io_handle_t input2 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input2, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                        AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                        k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n    EXPECT_EQ(0, mClient->getCloseInputCallsCount());\n    EXPECT_EQ(input1, input2);\n}\n\nTEST_F_WITH_FLAGS(\n        AudioPolicyManagerInputPreemptionTest,\n        LesserPriorityReusesInput,\n        REQUIRES_FLAGS_ENABLED(\n                ACONFIG_FLAG(com::android::media::audioserver, fix_input_sharing_logic))\n) {\n    mClient->resetInputApiCallsCounters();\n\n    audio_attributes_t attr = AUDIO_ATTRIBUTES_INITIALIZER;\n    attr.source = AUDIO_SOURCE_MIC;\n    audio_port_handle_t selectedDeviceId = AUDIO_PORT_HANDLE_NONE;\n    audio_io_handle_t input1 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input1, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                            AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                            k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n\n    audio_io_handle_t input2 = AUDIO_PORT_HANDLE_NONE;\n    attr.source = AUDIO_SOURCE_VOICE_RECOGNITION;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input2, OTHER_SESSION_ID, 1, &selectedDeviceId,\n                                        AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                        k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n    EXPECT_EQ(0, mClient->getCloseInputCallsCount());\n    EXPECT_EQ(input1, input2);\n}\n\nTEST_F_WITH_FLAGS(\n        AudioPolicyManagerInputPreemptionTest,\n        HigherPriorityPreemptsInput,\n        REQUIRES_FLAGS_ENABLED(\n                ACONFIG_FLAG(com::android::media::audioserver, fix_input_sharing_logic))\n) {\n    mClient->resetInputApiCallsCounters();\n\n    audio_attributes_t attr = AUDIO_ATTRIBUTES_INITIALIZER;\n    attr.source = AUDIO_SOURCE_MIC;\n    audio_port_handle_t selectedDeviceId = AUDIO_PORT_HANDLE_NONE;\n    audio_io_handle_t input1 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input1, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                            AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                            k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n\n    audio_io_handle_t input2 = AUDIO_PORT_HANDLE_NONE;\n    attr.source = AUDIO_SOURCE_CAMCORDER;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input2, OTHER_SESSION_ID, 1, &selectedDeviceId,\n                                        AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                        k48000SamplingRate));\n\n    EXPECT_EQ(2, mClient->getOpenInputCallsCount());\n    EXPECT_EQ(1, mClient->getCloseInputCallsCount());\n    EXPECT_NE(input1, input2);\n}\n\nint main(int argc, char** argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    ::testing::UnitTest::GetInstance()->listeners().Append(new TestExecutionTracer());\n    return RUN_ALL_TESTS();\n}",
        "b_contents": "\nint main(int argc, char** argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    ::testing::UnitTest::GetInstance()->listeners().Append(new TestExecutionTracer());\n    return RUN_ALL_TESTS();\n}",
        "base_contents": "",
        "res_region": "\nclass AudioPolicyManagerInputPreemptionTest : public AudioPolicyManagerTestWithConfigurationFile {\n};\n\nTEST_F_WITH_FLAGS(\n        AudioPolicyManagerInputPreemptionTest,\n        SameSessionReusesInput,\n        REQUIRES_FLAGS_ENABLED(\n                ACONFIG_FLAG(com::android::media::audioserver, fix_input_sharing_logic))\n) {\n    mClient->resetInputApiCallsCounters();\n\n    audio_attributes_t attr = AUDIO_ATTRIBUTES_INITIALIZER;\n    attr.source = AUDIO_SOURCE_MIC;\n    audio_port_handle_t selectedDeviceId = AUDIO_PORT_HANDLE_NONE;\n    audio_io_handle_t input1 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input1, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                            AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                            k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n\n    audio_io_handle_t input2 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input2, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                        AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                        k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n    EXPECT_EQ(0, mClient->getCloseInputCallsCount());\n    EXPECT_EQ(input1, input2);\n}\n\nTEST_F_WITH_FLAGS(\n        AudioPolicyManagerInputPreemptionTest,\n        LesserPriorityReusesInput,\n        REQUIRES_FLAGS_ENABLED(\n                ACONFIG_FLAG(com::android::media::audioserver, fix_input_sharing_logic))\n) {\n    mClient->resetInputApiCallsCounters();\n\n    audio_attributes_t attr = AUDIO_ATTRIBUTES_INITIALIZER;\n    attr.source = AUDIO_SOURCE_MIC;\n    audio_port_handle_t selectedDeviceId = AUDIO_PORT_HANDLE_NONE;\n    audio_io_handle_t input1 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input1, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                            AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                            k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n\n    audio_io_handle_t input2 = AUDIO_PORT_HANDLE_NONE;\n    attr.source = AUDIO_SOURCE_VOICE_RECOGNITION;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input2, OTHER_SESSION_ID, 1, &selectedDeviceId,\n                                        AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                        k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n    EXPECT_EQ(0, mClient->getCloseInputCallsCount());\n    EXPECT_EQ(input1, input2);\n}\n\nTEST_F_WITH_FLAGS(\n        AudioPolicyManagerInputPreemptionTest,\n        HigherPriorityPreemptsInput,\n        REQUIRES_FLAGS_ENABLED(\n                ACONFIG_FLAG(com::android::media::audioserver, fix_input_sharing_logic))\n) {\n    mClient->resetInputApiCallsCounters();\n\n    audio_attributes_t attr = AUDIO_ATTRIBUTES_INITIALIZER;\n    attr.source = AUDIO_SOURCE_MIC;\n    audio_port_handle_t selectedDeviceId = AUDIO_PORT_HANDLE_NONE;\n    audio_io_handle_t input1 = AUDIO_PORT_HANDLE_NONE;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input1, TEST_SESSION_ID, 1, &selectedDeviceId,\n                                            AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                            k48000SamplingRate));\n\n    EXPECT_EQ(1, mClient->getOpenInputCallsCount());\n\n    audio_io_handle_t input2 = AUDIO_PORT_HANDLE_NONE;\n    attr.source = AUDIO_SOURCE_CAMCORDER;\n    ASSERT_NO_FATAL_FAILURE(getInputForAttr(attr, &input2, OTHER_SESSION_ID, 1, &selectedDeviceId,\n                                        AUDIO_FORMAT_PCM_16_BIT, AUDIO_CHANNEL_IN_STEREO,\n                                        k48000SamplingRate));\n\n    EXPECT_EQ(2, mClient->getOpenInputCallsCount());\n    EXPECT_EQ(1, mClient->getCloseInputCallsCount());\n    EXPECT_NE(input1, input2);\n}\n\nint main(int argc, char** argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    ::testing::UnitTest::GetInstance()->listeners().Append(new TestExecutionTracer());\n    return RUN_ALL_TESTS();\n}",
        "lookback": "class AudioPolicyManagerInputPreemptionTest : public AudioPolicyManagerTestWithConfigurationFile {",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 4151,
        "end_line": 4255,
        "merge_gen_region": null,
        "confidence": 0.8032686114311218,
        "hesitated": true
    }
]