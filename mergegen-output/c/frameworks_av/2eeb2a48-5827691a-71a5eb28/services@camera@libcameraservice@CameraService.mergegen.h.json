[
    {
        "a_contents": "    static const sp<IPermissionController>& getPermissionController() {\n        static const char* kPermissionControllerService = \"permission\";\n        static thread_local sp<IPermissionController> sPermissionController = nullptr;\n\n        if (sPermissionController == nullptr ||\n                !IInterface::asBinder(sPermissionController)->isBinderAlive()) {\n            sp<IServiceManager> sm = defaultServiceManager();\n            sp<IBinder> binder = sm->checkService(toString16(kPermissionControllerService));\n            if (binder == nullptr) {\n                ALOGE(\"%s: Could not get permission service\", __FUNCTION__);\n                sPermissionController = nullptr;\n            } else {\n                sPermissionController = interface_cast<IPermissionController>(binder);\n            }\n        }",
        "b_contents": "    static const sp<IPermissionController>& getPermissionController() {\n        static const char* kPermissionControllerService = \"permission\";\n        static thread_local sp<IPermissionController> sPermissionController = nullptr;\n\n        if (sPermissionController == nullptr ||\n                !IInterface::asBinder(sPermissionController)->isBinderAlive()) {\n            sp<IServiceManager> sm = defaultServiceManager();\n            sp<IBinder> binder = sm->checkService(toString16(kPermissionControllerService));\n            if (binder == nullptr) {\n                ALOGE(\"%s: Could not get permission service\", __FUNCTION__);\n                sPermissionController = nullptr;\n            } else {\n                sPermissionController = interface_cast<IPermissionController>(binder);\n            }\n        }\n\n        return sPermissionController;\n    }\n\n    /**\n     * Pre-grants the permission if the attribution source uid is for an automotive\n     * privileged client. Otherwise uses system service permission checker to check\n     * for the appropriate permission. If this function is called for accessing a specific\n     * camera,then the cameraID must not be empty. CameraId is used only in case of automotive\n     * privileged client so that permission is pre-granted only to access system camera device\n     * which is located outside of the vehicle body frame because camera located inside the vehicle\n     * cabin would need user permission.\n     */\n    bool checkPermission(const std::string& cameraId, const std::string& permission,\n            const content::AttributionSourceState& attributionSource, const std::string& message,\n            int32_t attributedOpCode) const;\n\n    bool hasPermissionsForSystemCamera(const std::string& cameraId, int callingPid, int callingUid)\n            const;\n\n    bool hasPermissionsForCameraHeadlessSystemUser(const std::string& cameraId, int callingPid,\n            int callingUid) const;\n\n    bool hasCameraPermissions() const;",
        "base_contents": "    /**\n     * Pre-grants the permission if the attribution source uid is for an automotive\n     * privileged client. Otherwise uses system service permission checker to check\n     * for the appropriate permission. If this function is called for accessing a specific\n     * camera,then the cameraID must not be empty. CameraId is used only in case of automotive\n     * privileged client so that permission is pre-granted only to access system camera device\n     * which is located outside of the vehicle body frame because camera located inside the vehicle\n     * cabin would need user permission.\n     */\n    bool checkPermission(const std::string& cameraId, const std::string& permission,\n            const content::AttributionSourceState& attributionSource, const std::string& message,\n            int32_t attributedOpCode) const;\n\n    bool hasPermissionsForSystemCamera(const std::string& cameraId, int callingPid, int callingUid)\n            const;\n\n    bool hasPermissionsForCameraHeadlessSystemUser(const std::string& cameraId, int callingPid,\n            int callingUid) const;\n\n    bool hasCameraPermissions() const;",
        "res_region": "    static const sp<IPermissionController>& getPermissionController() {\n        static const char* kPermissionControllerService = \"permission\";\n        static thread_local sp<IPermissionController> sPermissionController = nullptr;\n\n        if (sPermissionController == nullptr ||\n                !IInterface::asBinder(sPermissionController)->isBinderAlive()) {\n            sp<IServiceManager> sm = defaultServiceManager();\n            sp<IBinder> binder = sm->checkService(toString16(kPermissionControllerService));\n            if (binder == nullptr) {\n                ALOGE(\"%s: Could not get permission service\", __FUNCTION__);\n                sPermissionController = nullptr;\n            } else {\n                sPermissionController = interface_cast<IPermissionController>(binder);\n            }\n        }",
        "lookback": "        static const char* kPermissionControllerService = \"permission\";",
        "lookahead": "",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 688,
        "end_line": 765,
        "merge_gen_region": null,
        "confidence": 0.5474280714988708,
        "hesitated": true
    }
]