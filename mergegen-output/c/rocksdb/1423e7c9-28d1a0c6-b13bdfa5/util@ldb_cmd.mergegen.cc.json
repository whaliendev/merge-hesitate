[
    {
        "a_contents": "  TableCache tc(db_path_, &opt, soptions, 10);\n  const InternalKeyComparator cmp(opt.comparator);\n  VersionSet versions(db_path_, &opt, soptions, &tc, &cmp);\n  std::vector<ColumnFamilyDescriptor> dummy;\n  dummy.push_back(ColumnFamilyDescriptor());\n  // We rely the VersionSet::Recover to tell us the internal data structures\n  // in the db. And the Recover() should never do any change (like LogAndApply)\n  // to the manifest file.\n  st = versions.Recover(dummy);\n  if (!st.ok()) {\n    exec_state_ = LDBCommandExecuteResult::FAILED(st.ToString());\n    return;\n  }\n\n  port::Mutex mu;\n  mu.Lock();\n  st = versions.ReduceNumberOfLevels(new_levels_, &mu);\n  mu.Unlock();",
        "b_contents": "",
        "base_contents": "  TableCache tc(db_path_, &opt, soptions, 10);\n  const InternalKeyComparator cmp(opt.comparator);\n  VersionSet versions(db_path_, &opt, soptions, &tc, &cmp);\n  // We rely the VersionSet::Recover to tell us the internal data structures\n  // in the db. And the Recover() should never do any change (like LogAndApply)\n  // to the manifest file.\n  st = versions.Recover();\n  if (!st.ok()) {\n    exec_state_ = LDBCommandExecuteResult::FAILED(st.ToString());\n    return;\n  }\n\n  port::Mutex mu;\n  mu.Lock();\n  st = versions.ReduceNumberOfLevels(new_levels_, &mu);\n  mu.Unlock();",
        "res_region": "",
        "lookback": "  if (!st.ok()) {",
        "lookahead": "  st = VersionSet::ReduceNumberOfLevels(db_path_, &opt, soptions, new_levels_);",
        "label": [
            "base",
            "base_empty"
        ],
        "start_line": 1074,
        "end_line": 1111,
        "merge_gen_region": null,
        "confidence": 0.7286080121994019,
        "hesitated": true
    }
]