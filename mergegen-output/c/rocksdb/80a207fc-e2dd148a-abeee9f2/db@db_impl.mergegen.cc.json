[
    {
        "a_contents": "",
        "b_contents": "  if (is_manual) {\n    // another thread cannot pick up the same work\n    manual_compaction_->in_progress = true;\n  }\n\n  // TODO: remove memtable flush from formal compaction\n  while (imm_.IsFlushPending()) {\n    LogToBuffer(log_buffer,\n                \"BackgroundCompaction doing FlushMemTableToOutputFile, \"\n                \"compaction slots \"\n                \"available %d\",\n                options_.max_background_compactions - bg_compaction_scheduled_);\n    Status stat = FlushMemTableToOutputFile(madeProgress, deletion_state);\n    if (!stat.ok()) {\n      if (is_manual) {\n        manual_compaction_->status = stat;\n        manual_compaction_->done = true;\n        manual_compaction_->in_progress = false;\n        manual_compaction_ = nullptr;\n      }\n      return stat;\n    }\n  }\n\n  unique_ptr<Compaction> c;",
        "base_contents": "  if (is_manual) {\n    // another thread cannot pick up the same work\n    manual_compaction_->in_progress = true;\n  }\n\n  // TODO: remove memtable flush from formal compaction\n  while (imm_.IsFlushPending()) {\n    Log(options_.info_log,\n        \"BackgroundCompaction doing FlushMemTableToOutputFile, compaction slots \"\n        \"available %d\",\n        options_.max_background_compactions - bg_compaction_scheduled_);\n    Status stat = FlushMemTableToOutputFile(madeProgress, deletion_state);\n    if (!stat.ok()) {\n      if (is_manual) {\n        manual_compaction_->status = stat;\n        manual_compaction_->done = true;\n        manual_compaction_->in_progress = false;\n        manual_compaction_ = nullptr;\n      }\n      return stat;\n    }\n  }\n\n  unique_ptr<Compaction> c;",
        "res_region": "",
        "lookback": "  InternalKey* manual_end = &manual_end_storage;",
        "lookahead": "  InternalKey manual_end_storage;",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 1995,
        "end_line": 2047,
        "merge_gen_region": "Key__",
        "confidence": 0.9250794053077698,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "  } else {\n    // no need to refcount in iteration since it's always under a mutex\n    for (auto cfd : *versions_->GetColumnFamilySet()) {\n      if (!cfd->options()->disable_auto_compactions && !cfd->IsDropped()) {\n        c.reset(cfd->PickCompaction());\n        if (c != nullptr) {\n          // update statistics\n          MeasureTime(options_.statistics.get(), NUM_FILES_IN_SINGLE_COMPACTION,\n                      c->inputs(0)->size());\n          break;\n        }\n      }\n    }",
        "b_contents": "  } else if (!options_.disable_auto_compactions) {\n    c.reset(versions_->PickCompaction(log_buffer));",
        "base_contents": "  } else if (!options_.disable_auto_compactions) {\n    c.reset(versions_->PickCompaction());",
        "res_region": "  } else {\n    // no need to refcount in iteration since it's always under a mutex\n    for (auto cfd : *versions_->GetColumnFamilySet()) {\n      if (!cfd->options()->disable_auto_compactions && !cfd->IsDropped()) {\n        c.reset(cfd->PickCompaction(log_buffer));\n        if (c != nullptr) {\n          // update statistics\n          MeasureTime(options_.statistics.get(), NUM_FILES_IN_SINGLE_COMPACTION,\n                      c->inputs(0)->size());\n          break;\n        }\n      }\n    }",
        "lookback": "    // no need to refcount in iteration since it's always under a mutex",
        "lookahead": "  }",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 2068,
        "end_line": 2088,
        "merge_gen_region": null,
        "confidence": 0.8639695048332214,
        "hesitated": true
    },
    {
        "a_contents": "    Log(options_.info_log, \"Moved #%lld to level-%d %lld bytes %s: %s\\n\",\n        static_cast<unsigned long long>(f->number), c->level() + 1,\n        static_cast<unsigned long long>(f->file_size),\n        status.ToString().c_str(), c->input_version()->LevelSummary(&tmp));\n    c->ReleaseCompactionFiles(status);",
        "b_contents": "    LogToBuffer(log_buffer, \"Moved #%lld to level-%d %lld bytes %s: %s\\n\",\n                static_cast<unsigned long long>(f->number), c->level() + 1,\n                static_cast<unsigned long long>(f->file_size),\n                status.ToString().c_str(),\n                versions_->current()->LevelSummary(&tmp));\n    versions_->ReleaseCompactionFiles(c.get(), status);",
        "base_contents": "    Log(options_.info_log, \"Moved #%lld to level-%d %lld bytes %s: %s\\n\",\n        static_cast<unsigned long long>(f->number), c->level() + 1,\n        static_cast<unsigned long long>(f->file_size),\n        status.ToString().c_str(), versions_->current()->LevelSummary(&tmp));\n    versions_->ReleaseCompactionFiles(c.get(), status);",
        "res_region": "    LogToBuffer(log_buffer, \"Moved #%lld to level-%d %lld bytes %s: %s\\n\",\n        static_cast<unsigned long long>(f->number), c->level() + 1,\n        static_cast<unsigned long long>(f->file_size),\n        status.ToString().c_str(), c->input_version()->LevelSummary(&tmp));\n    c->ReleaseCompactionFiles(status);",
        "lookback": "        static_cast<unsigned long long>(f->number), c->level() + 1,",
        "lookahead": "    *madeProgress = true;",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 2111,
        "end_line": 2130,
        "merge_gen_region": null,
        "confidence": 0.8564184904098511,
        "hesitated": true
    }
]