[
    {
        "a_contents": "  { BLOCK_CACHE_MISS,                 \"rocksdb.block.cache.miss\"             },\n  { BLOCK_CACHE_HIT,                  \"rocksdb.block.cache.hit\"              },\n  { BLOCK_CACHE_ADD,                  \"rocksdb.block.cache.add\"              },\n  { BLOCK_CACHE_INDEX_MISS,           \"rocksdb.block.cache.index.miss\"       },\n  { BLOCK_CACHE_INDEX_HIT,            \"rocksdb.block.cache.index.hit\"        },\n  { BLOCK_CACHE_FILTER_MISS,          \"rocksdb.block.cache.filter.miss\"      },\n  { BLOCK_CACHE_FILTER_HIT,           \"rocksdb.block.cache.filter.hit\"       },\n  { BLOCK_CACHE_DATA_MISS,            \"rocksdb.block.cache.data.miss\"        },\n  { BLOCK_CACHE_DATA_HIT,             \"rocksdb.block.cache.data.hit\"         },\n  { BLOOM_FILTER_USEFUL,              \"rocksdb.bloom.filter.useful\"          },\n  { MEMTABLE_HIT,                     \"rocksdb.memtable.hit\"                 },\n  { MEMTABLE_MISS,                    \"rocksdb.memtable.miss\"                },\n  { COMPACTION_KEY_DROP_NEWER_ENTRY,  \"rocksdb.compaction.key.drop.new\"      },\n  { COMPACTION_KEY_DROP_OBSOLETE,     \"rocksdb.compaction.key.drop.obsolete\" },\n  { COMPACTION_KEY_DROP_USER,         \"rocksdb.compaction.key.drop.user\"     },\n  { NUMBER_KEYS_WRITTEN,              \"rocksdb.number.keys.written\"          },\n  { NUMBER_KEYS_READ,                 \"rocksdb.number.keys.read\"             },\n  { NUMBER_KEYS_UPDATED,              \"rocksdb.number.keys.updated\"          },\n  { BYTES_WRITTEN,                    \"rocksdb.bytes.written\"                },\n  { BYTES_READ,                       \"rocksdb.bytes.read\"                   },\n  { NO_FILE_CLOSES,                   \"rocksdb.no.file.closes\"               },\n  { NO_FILE_OPENS,                    \"rocksdb.no.file.opens\"                },\n  { NO_FILE_ERRORS,                   \"rocksdb.no.file.errors\"               },\n  { STALL_L0_SLOWDOWN_MICROS,         \"rocksdb.l0.slowdown.micros\"           },\n  { STALL_MEMTABLE_COMPACTION_MICROS, \"rocksdb.memtable.compaction.micros\"   },\n  { STALL_L0_NUM_FILES_MICROS,        \"rocksdb.l0.num.files.stall.micros\"    },\n  { RATE_LIMIT_DELAY_MILLIS,          \"rocksdb.rate.limit.delay.millis\"      },\n  { NO_ITERATORS,                     \"rocksdb.num.iterators\"                },\n  { NUMBER_MULTIGET_CALLS,            \"rocksdb.number.multiget.get\"          },\n  { NUMBER_MULTIGET_KEYS_READ,        \"rocksdb.number.multiget.keys.read\"    },\n  { NUMBER_MULTIGET_BYTES_READ,       \"rocksdb.number.multiget.bytes.read\"   },\n  { NUMBER_FILTERED_DELETES,          \"rocksdb.number.deletes.filtered\"      },\n  { NUMBER_MERGE_FAILURES,            \"rocksdb.number.merge.failures\"        },\n  { SEQUENCE_NUMBER,                  \"rocksdb.sequence.number\"              },\n  { BLOOM_FILTER_PREFIX_CHECKED,      \"rocksdb.bloom.filter.prefix.checked\"  },\n  { BLOOM_FILTER_PREFIX_USEFUL,       \"rocksdb.bloom.filter.prefix.useful\"   },\n  { NUMBER_OF_RESEEKS_IN_ITERATION,   \"rocksdb.number.reseeks.iteration\"     },\n  { GET_UPDATES_SINCE_CALLS,          \"rocksdb.getupdatessince.calls\"        },\n  { BLOCK_CACHE_COMPRESSED_MISS,      \"rocksdb.block.cachecompressed.miss\"   },\n  { BLOCK_CACHE_COMPRESSED_HIT,       \"rocksdb.block.cachecompressed.hit\"    },",
        "b_contents": "  { BLOCK_CACHE_MISS, \"rocksdb.block.cache.miss\" },\n  { BLOCK_CACHE_HIT, \"rocksdb.block.cache.hit\" },\n  { BLOCK_CACHE_ADD, \"rocksdb.block.cache.add\" },\n  { BLOCK_CACHE_INDEX_MISS, \"rocksdb.block.cache.index.miss\" },\n  { BLOCK_CACHE_INDEX_HIT, \"rocksdb.block.cache.index.hit\" },\n  { BLOCK_CACHE_FILTER_MISS, \"rocksdb.block.cache.filter.miss\" },\n  { BLOCK_CACHE_FILTER_HIT, \"rocksdb.block.cache.filter.hit\" },\n  { BLOCK_CACHE_DATA_MISS, \"rocksdb.block.cache.data.miss\" },\n  { BLOCK_CACHE_DATA_HIT, \"rocksdb.block.cache.data.hit\" },\n  { BLOOM_FILTER_USEFUL, \"rocksdb.bloom.filter.useful\" },\n  { MEMTABLE_HIT, \"rocksdb.memtable.hit\" },\n  { MEMTABLE_MISS, \"rocksdb.memtable.miss\" },\n  { COMPACTION_KEY_DROP_NEWER_ENTRY, \"rocksdb.compaction.key.drop.new\" },\n  { COMPACTION_KEY_DROP_OBSOLETE, \"rocksdb.compaction.key.drop.obsolete\" },\n  { COMPACTION_KEY_DROP_USER, \"rocksdb.compaction.key.drop.user\" },\n  { NUMBER_KEYS_WRITTEN, \"rocksdb.number.keys.written\" },\n  { NUMBER_KEYS_READ, \"rocksdb.number.keys.read\" },\n  { NUMBER_KEYS_UPDATED, \"rocksdb.number.keys.updated\" },\n  { BYTES_WRITTEN, \"rocksdb.bytes.written\" },\n  { BYTES_READ, \"rocksdb.bytes.read\" },\n  { NO_FILE_CLOSES, \"rocksdb.no.file.closes\" },\n  { NO_FILE_OPENS, \"rocksdb.no.file.opens\" },\n  { NO_FILE_ERRORS, \"rocksdb.no.file.errors\" },\n  { STALL_L0_SLOWDOWN_MICROS, \"rocksdb.l0.slowdown.micros\" },\n  { STALL_MEMTABLE_COMPACTION_MICROS, \"rocksdb.memtable.compaction.micros\" },\n  { STALL_L0_NUM_FILES_MICROS, \"rocksdb.l0.num.files.stall.micros\" },\n  { RATE_LIMIT_DELAY_MILLIS, \"rocksdb.rate.limit.delay.millis\" },\n  { NO_ITERATORS, \"rocksdb.num.iterators\" },\n  { NUMBER_MULTIGET_CALLS, \"rocksdb.number.multiget.get\" },\n  { NUMBER_MULTIGET_KEYS_READ, \"rocksdb.number.multiget.keys.read\" },\n  { NUMBER_MULTIGET_BYTES_READ, \"rocksdb.number.multiget.bytes.read\" },\n  { NUMBER_FILTERED_DELETES, \"rocksdb.number.deletes.filtered\" },\n  { NUMBER_MERGE_FAILURES, \"rocksdb.number.merge.failures\" },\n  { SEQUENCE_NUMBER, \"rocksdb.sequence.number\" },\n  { BLOOM_FILTER_PREFIX_CHECKED, \"rocksdb.bloom.filter.prefix.checked\" },\n  { BLOOM_FILTER_PREFIX_USEFUL, \"rocksdb.bloom.filter.prefix.useful\" },\n  { NUMBER_OF_RESEEKS_IN_ITERATION, \"rocksdb.number.reseeks.iteration\" },\n  { GET_UPDATES_SINCE_CALLS, \"rocksdb.getupdatessince.calls\" },\n  { BLOCK_CACHE_COMPRESSED_MISS, \"rocksdb.block.cachecompressed.miss\" },\n  { BLOCK_CACHE_COMPRESSED_HIT, \"rocksdb.block.cachecompressed.hit\" },\n  { WAL_FILE_SYNCED, \"rocksdb.wal.synced\" },\n  { WAL_FILE_BYTES, \"rocksdb.wal.bytes\" },\n  { WRITE_DONE_BY_SELF, \"rocksdb.write.self\" },\n  { WRITE_DONE_BY_OTHER, \"rocksdb.write.other\" },\n  { WRITE_WITH_WAL, \"rocksdb.write.wal\" },\n  { COMPACT_READ_BYTES, \"rocksdb.compact.read.bytes\" },\n  { COMPACT_WRITE_BYTES, \"rocksdb.compact.write.bytes\" },",
        "base_contents": "  { BLOCK_CACHE_MISS, \"rocksdb.block.cache.miss\" },\n  { BLOCK_CACHE_HIT, \"rocksdb.block.cache.hit\" },\n  { BLOCK_CACHE_ADD, \"rocksdb.block.cache.add\" },\n  { BLOCK_CACHE_INDEX_MISS, \"rocksdb.block.cache.index.miss\" },\n  { BLOCK_CACHE_INDEX_HIT, \"rocksdb.block.cache.index.hit\" },\n  { BLOCK_CACHE_FILTER_MISS, \"rocksdb.block.cache.filter.miss\" },\n  { BLOCK_CACHE_FILTER_HIT, \"rocksdb.block.cache.filter.hit\" },\n  { BLOCK_CACHE_DATA_MISS, \"rocksdb.block.cache.data.miss\" },\n  { BLOCK_CACHE_DATA_HIT, \"rocksdb.block.cache.data.hit\" },\n  { BLOOM_FILTER_USEFUL, \"rocksdb.bloom.filter.useful\" },\n  { MEMTABLE_HIT, \"rocksdb.memtable.hit\" },\n  { MEMTABLE_MISS, \"rocksdb.memtable.miss\" },\n  { COMPACTION_KEY_DROP_NEWER_ENTRY, \"rocksdb.compaction.key.drop.new\" },\n  { COMPACTION_KEY_DROP_OBSOLETE, \"rocksdb.compaction.key.drop.obsolete\" },\n  { COMPACTION_KEY_DROP_USER, \"rocksdb.compaction.key.drop.user\" },\n  { NUMBER_KEYS_WRITTEN, \"rocksdb.number.keys.written\" },\n  { NUMBER_KEYS_READ, \"rocksdb.number.keys.read\" },\n  { NUMBER_KEYS_UPDATED, \"rocksdb.number.keys.updated\" },\n  { BYTES_WRITTEN, \"rocksdb.bytes.written\" },\n  { BYTES_READ, \"rocksdb.bytes.read\" },\n  { NO_FILE_CLOSES, \"rocksdb.no.file.closes\" },\n  { NO_FILE_OPENS, \"rocksdb.no.file.opens\" },\n  { NO_FILE_ERRORS, \"rocksdb.no.file.errors\" },\n  { STALL_L0_SLOWDOWN_MICROS, \"rocksdb.l0.slowdown.micros\" },\n  { STALL_MEMTABLE_COMPACTION_MICROS, \"rocksdb.memtable.compaction.micros\" },\n  { STALL_L0_NUM_FILES_MICROS, \"rocksdb.l0.num.files.stall.micros\" },\n  { RATE_LIMIT_DELAY_MILLIS, \"rocksdb.rate.limit.delay.millis\" },\n  { NO_ITERATORS, \"rocksdb.num.iterators\" },\n  { NUMBER_MULTIGET_CALLS, \"rocksdb.number.multiget.get\" },\n  { NUMBER_MULTIGET_KEYS_READ, \"rocksdb.number.multiget.keys.read\" },\n  { NUMBER_MULTIGET_BYTES_READ, \"rocksdb.number.multiget.bytes.read\" },\n  { NUMBER_FILTERED_DELETES, \"rocksdb.number.deletes.filtered\" },\n  { NUMBER_MERGE_FAILURES, \"rocksdb.number.merge.failures\" },\n  { SEQUENCE_NUMBER, \"rocksdb.sequence.number\" },\n  { BLOOM_FILTER_PREFIX_CHECKED, \"rocksdb.bloom.filter.prefix.checked\" },\n  { BLOOM_FILTER_PREFIX_USEFUL, \"rocksdb.bloom.filter.prefix.useful\" },\n  { NUMBER_OF_RESEEKS_IN_ITERATION, \"rocksdb.number.reseeks.iteration\" },\n  { GET_UPDATES_SINCE_CALLS, \"rocksdb.getupdatessince.calls\" },\n  { BLOCK_CACHE_COMPRESSED_MISS, \"rocksdb.block.cachecompressed.miss\" },\n  { BLOCK_CACHE_COMPRESSED_HIT, \"rocksdb.block.cachecompressed.hit\" }",
        "res_region": "  { BLOCK_CACHE_MISS, \"rocksdb.block.cache.miss\" },\n  { BLOCK_CACHE_HIT, \"rocksdb.block.cache.hit\" },\n  { BLOCK_CACHE_ADD, \"rocksdb.block.cache.add\" },\n  { BLOCK_CACHE_INDEX_MISS, \"rocksdb.block.cache.index.miss\" },\n  { BLOCK_CACHE_INDEX_HIT, \"rocksdb.block.cache.index.hit\" },\n  { BLOCK_CACHE_FILTER_MISS, \"rocksdb.block.cache.filter.miss\" },\n  { BLOCK_CACHE_FILTER_HIT, \"rocksdb.block.cache.filter.hit\" },\n  { BLOCK_CACHE_DATA_MISS, \"rocksdb.block.cache.data.miss\" },\n  { BLOCK_CACHE_DATA_HIT, \"rocksdb.block.cache.data.hit\" },\n  { BLOOM_FILTER_USEFUL, \"rocksdb.bloom.filter.useful\" },\n  { MEMTABLE_HIT, \"rocksdb.memtable.hit\" },\n  { MEMTABLE_MISS, \"rocksdb.memtable.miss\" },\n  { COMPACTION_KEY_DROP_NEWER_ENTRY, \"rocksdb.compaction.key.drop.new\" },\n  { COMPACTION_KEY_DROP_OBSOLETE, \"rocksdb.compaction.key.drop.obsolete\" },\n  { COMPACTION_KEY_DROP_USER, \"rocksdb.compaction.key.drop.user\" },\n  { NUMBER_KEYS_WRITTEN, \"rocksdb.number.keys.written\" },\n  { NUMBER_KEYS_READ, \"rocksdb.number.keys.read\" },\n  { NUMBER_KEYS_UPDATED, \"rocksdb.number.keys.updated\" },\n  { BYTES_WRITTEN, \"rocksdb.bytes.written\" },\n  { BYTES_READ, \"rocksdb.bytes.read\" },\n  { NO_FILE_CLOSES, \"rocksdb.no.file.closes\" },\n  { NO_FILE_OPENS, \"rocksdb.no.file.opens\" },\n  { NO_FILE_ERRORS, \"rocksdb.no.file.errors\" },\n  { STALL_L0_SLOWDOWN_MICROS, \"rocksdb.l0.slowdown.micros\" },\n  { STALL_MEMTABLE_COMPACTION_MICROS, \"rocksdb.memtable.compaction.micros\" },\n  { STALL_L0_NUM_FILES_MICROS, \"rocksdb.l0.num.files.stall.micros\" },\n  { RATE_LIMIT_DELAY_MILLIS, \"rocksdb.rate.limit.delay.millis\" },\n  { NO_ITERATORS, \"rocksdb.num.iterators\" },\n  { NUMBER_MULTIGET_CALLS, \"rocksdb.number.multiget.get\" },\n  { NUMBER_MULTIGET_KEYS_READ, \"rocksdb.number.multiget.keys.read\" },\n  { NUMBER_MULTIGET_BYTES_READ, \"rocksdb.number.multiget.bytes.read\" },\n  { NUMBER_FILTERED_DELETES, \"rocksdb.number.deletes.filtered\" },\n  { NUMBER_MERGE_FAILURES, \"rocksdb.number.merge.failures\" },\n  { SEQUENCE_NUMBER, \"rocksdb.sequence.number\" },\n  { BLOOM_FILTER_PREFIX_CHECKED, \"rocksdb.bloom.filter.prefix.checked\" },\n  { BLOOM_FILTER_PREFIX_USEFUL, \"rocksdb.bloom.filter.prefix.useful\" },\n  { NUMBER_OF_RESEEKS_IN_ITERATION, \"rocksdb.number.reseeks.iteration\" },\n  { GET_UPDATES_SINCE_CALLS, \"rocksdb.getupdatessince.calls\" },\n  { BLOCK_CACHE_COMPRESSED_MISS, \"rocksdb.block.cachecompressed.miss\" },\n  { BLOCK_CACHE_COMPRESSED_HIT, \"rocksdb.block.cachecompressed.hit\" },\n  { WAL_FILE_SYNCED, \"rocksdb.wal.synced\" },\n  { WAL_FILE_BYTES, \"rocksdb.wal.bytes\" },\n  { WRITE_DONE_BY_SELF, \"rocksdb.write.self\" },\n  { WRITE_DONE_BY_OTHER, \"rocksdb.write.other\" },\n  { WRITE_WITH_WAL, \"rocksdb.write.wal\" },\n  { COMPACT_READ_BYTES, \"rocksdb.compact.read.bytes\" },\n  { COMPACT_WRITE_BYTES, \"rocksdb.compact.write.bytes\" },",
        "lookback": "  { BLOCK_CACHE_HIT, \"rocksdb.block.cache.hit\" },",
        "lookahead": "};",
        "label": [
            "base",
            "complex_conflict"
        ],
        "start_line": 132,
        "end_line": 262,
        "merge_gen_region": null,
        "confidence": 0.656143844127655,
        "hesitated": true
    }
]