[
    {
        "a_contents": "    /* The input could be very large (in zstdmt), so it must be broken up into\n     * chunks to enforce the maximmum distance and handle overflow correction.\n     */\n    assert(sequences->pos <= sequences->size);\n    assert(sequences->size <= sequences->capacity);\n    for (chunk = 0; chunk < nbChunks && sequences->size < sequences->capacity; ++chunk) {\n        size_t const chunkStart = chunk * kMaxChunkSize;\n        size_t const chunkEnd = MIN(chunkStart + kMaxChunkSize, srcSize);",
        "b_contents": "    for (chunk = 0; chunk < nbChunks; ++chunk) {\n        BYTE const* const chunkStart = istart + chunk * kMaxChunkSize;\n        size_t const remaining = (size_t)(iend - chunkStart);\n        BYTE const *const chunkEnd =\n            (remaining < kMaxChunkSize) ? iend : chunkStart + kMaxChunkSize;",
        "base_contents": "    for (chunk = 0; chunk < nbChunks; ++chunk) {\n        size_t const chunkStart = chunk * kMaxChunkSize;\n        size_t const chunkEnd = MIN(chunkStart + kMaxChunkSize, srcSize);",
        "res_region": "    /* The input could be very large (in zstdmt), so it must be broken up into\n     * chunks to enforce the maximmum distance and handle overflow correction.\n     */\n    assert(sequences->pos <= sequences->size);\n    assert(sequences->size <= sequences->capacity);\n    for (chunk = 0; chunk < nbChunks && sequences->size < sequences->capacity; ++chunk) {\n        BYTE const* const chunkStart = istart + chunk * kMaxChunkSize;\n        size_t const remaining = (size_t)(iend - chunkStart);\n        BYTE const *const chunkEnd =\n            (remaining < kMaxChunkSize) ? iend : chunkStart + kMaxChunkSize;",
        "lookback": "     * chunks to enforce the maximmum distance and handle overflow correction.",
        "lookahead": "        size_t const chunkSize = chunkEnd - chunkStart;",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 486,
        "end_line": 505,
        "merge_gen_region": null,
        "confidence": 0.8680406212806702,
        "hesitated": true
    },
    {
        "a_contents": "        assert(chunkStart < srcSize);\n        /* 1. Perform overflow correction if necessary. */\n        if (ZSTD_window_needOverflowCorrection(ldmState->window)) {",
        "b_contents": "        assert(chunkStart < iend);\n        if (ZSTD_window_needOverflowCorrection(ldmState->window, chunkEnd)) {",
        "base_contents": "        assert(chunkStart < srcSize);\n        if (ZSTD_window_needOverflowCorrection(ldmState->window)) {",
        "res_region": "        assert(chunkStart < iend);\n        /* 1. Perform overflow correction if necessary. */\n        if (ZSTD_window_needOverflowCorrection(ldmState->window, chunkEnd)) {",
        "lookback": "        /* 1. Perform overflow correction if necessary. */",
        "lookahead": "            U32 const ldmHSize = 1U << params->hashLog;",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 510,
        "end_line": 520,
        "merge_gen_region": null,
        "confidence": 0.8592863082885742,
        "hesitated": true
    },
    {
        "a_contents": "        ZSTD_window_enforceMaxDist(&ldmState->window, istart + chunkEnd,\n                                   maxDist);\n        /* 3. Generate the sequences for the chunk, and get newLeftoverSize. */\n        newLeftoverSize = ZSTD_ldm_generateSequences_internal(\n            ldmState, sequences, params, istart + chunkStart,\n            chunkSize);\n        if (ZSTD_isError(newLeftoverSize))\n            return newLeftoverSize;\n        /* 4. We add the leftover literals from previous iterations to the first\n         *    newly generated sequence, or add the `newLeftoverSize` if none are\n         *    generated.\n         */\n        /* Prepend the leftover literals from the last call */\n        if (prevSize < sequences->size) {\n            sequences->seq[prevSize].litLength += (U32)leftoverSize;\n            leftoverSize = newLeftoverSize;\n        } else {\n            assert(newLeftoverSize == chunkSize);\n            leftoverSize += chunkSize;\n        }",
        "b_contents": "        ZSTD_window_enforceMaxDist(&ldmState->window, chunkEnd, maxDist);\n        nbSeq += ZSTD_ldm_generateSequences_internal(\n            ldmState, sequences + nbSeq, params, chunkStart, chunkSize,\n            extDict);",
        "base_contents": "        ZSTD_window_enforceMaxDist(&ldmState->window, istart + chunkEnd,\n                                   maxDist);\n        nbSeq += ZSTD_ldm_generateSequences_internal(\n            ldmState, sequences + nbSeq, params, istart + chunkStart, chunkSize,\n            extDict);",
        "res_region": "        ZSTD_window_enforceMaxDist(&ldmState->window, chunkEnd, maxDist);\n        /* 3. Generate the sequences for the chunk, and get newLeftoverSize. */\n        newLeftoverSize = ZSTD_ldm_generateSequences_internal(\n            ldmState, sequences, params, chunkStart, chunkSize);\n        if (ZSTD_isError(newLeftoverSize))\n            return newLeftoverSize;\n        /* 4. We add the leftover literals from previous iterations to the first\n         *    newly generated sequence, or add the `newLeftoverSize` if none are\n         *    generated.\n         */\n        /* Prepend the leftover literals from the last call */\n        if (prevSize < sequences->size) {\n            sequences->seq[prevSize].litLength += (U32)leftoverSize;\n            leftoverSize = newLeftoverSize;\n        } else {\n            assert(newLeftoverSize == chunkSize);\n            leftoverSize += chunkSize;\n        }",
        "lookback": "        /* 3. Generate the sequences for the chunk, and get newLeftoverSize. */",
        "lookahead": "    }",
        "label": [
            "newcode",
            "complex_conflict"
        ],
        "start_line": 534,
        "end_line": 566,
        "merge_gen_region": null,
        "confidence": 0.8171386122703552,
        "hesitated": true
    }
]