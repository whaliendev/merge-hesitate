[
    {
        "a_contents": "",
        "b_contents": "class LayoutExecutant : public Ref\n{\npublic:\n    LayoutExecutant(){};\n    virtual ~LayoutExecutant(){};\n    static LayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container){};\n};\n\nclass LinearVerticalLayoutExecutant : public LayoutExecutant\n{\npublic:\n    LinearVerticalLayoutExecutant(){};\n    virtual ~LinearVerticalLayoutExecutant(){};\n    static LinearVerticalLayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container);\n};\n\nclass LinearHorizontalLayoutExecutant : public LayoutExecutant\n{\npublic:\n    LinearHorizontalLayoutExecutant(){};\n    virtual ~LinearHorizontalLayoutExecutant(){};\n    static LinearHorizontalLayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container);\n};\n\nclass RelativeLayoutExecutant : public LayoutExecutant\n{\npublic:\n    RelativeLayoutExecutant(){};\n    virtual ~RelativeLayoutExecutant(){};\n    static RelativeLayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container);\n};\n    \nLayoutExecutant* LayoutExecutant::create()\n{\n    LayoutExecutant* exe = new LayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n    \nLinearVerticalLayoutExecutant* LinearVerticalLayoutExecutant::create()\n{\n    LinearVerticalLayoutExecutant* exe = new LinearVerticalLayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n\nLinearHorizontalLayoutExecutant* LinearHorizontalLayoutExecutant::create()\n{\n    LinearHorizontalLayoutExecutant* exe = new LinearHorizontalLayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n\nRelativeLayoutExecutant* RelativeLayoutExecutant::create()\n{\n    RelativeLayoutExecutant* exe = new RelativeLayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n    \nvoid LinearVerticalLayoutExecutant::doLayout(const cocos2d::Size &layoutSize, Vector<cocos2d::Node *> container)\n{\n    float topBoundary = layoutSize.height;\n    \n    for (auto& subWidget : container)\n    {\n        Widget* child = dynamic_cast<Widget*>(subWidget);\n        if (child)\n        {\n            LinearLayoutParameter* layoutParameter = dynamic_cast<LinearLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::LINEAR));\n            \n            if (layoutParameter)\n            {\n                LinearLayoutParameter::LinearGravity childGravity = layoutParameter->getGravity();\n                Vec2 ap = child->getAnchorPoint();\n                Size cs = child->getSize();\n                float finalPosX = ap.x * cs.width;\n                float finalPosY = topBoundary - ((1.0f-ap.y) * cs.height);\n                switch (childGravity)\n                {\n                    case LinearLayoutParameter::LinearGravity::NONE:\n                    case LinearLayoutParameter::LinearGravity::LEFT:\n                        break;\n                    case LinearLayoutParameter::LinearGravity::RIGHT:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        break;\n                    case LinearLayoutParameter::LinearGravity::CENTER_HORIZONTAL:\n                        finalPosX = layoutSize.width / 2.0f - cs.width * (0.5f-ap.x);\n                        break;\n                    default:\n                        break;\n                }\n                Margin mg = layoutParameter->getMargin();\n                finalPosX += mg.left;\n                finalPosY -= mg.top;\n                child->setPosition(Vec2(finalPosX, finalPosY));\n                topBoundary = child->getBottomInParent() - mg.bottom;\n            }\n        }\n    }\n}\n    \nvoid LinearHorizontalLayoutExecutant::doLayout(const cocos2d::Size &layoutSize, Vector<cocos2d::Node *> container)\n{\n    float leftBoundary = 0.0f;\n    for (auto& subWidget : container)\n    {\n        Widget* child = dynamic_cast<Widget*>(subWidget);\n        if (child)\n        {\n            LinearLayoutParameter* layoutParameter = dynamic_cast<LinearLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::LINEAR));\n            if (layoutParameter)\n            {\n                LinearLayoutParameter::LinearGravity childGravity = layoutParameter->getGravity();\n                Vec2 ap = child->getAnchorPoint();\n                Size cs = child->getSize();\n                float finalPosX = leftBoundary + (ap.x * cs.width);\n                float finalPosY = layoutSize.height - (1.0f - ap.y) * cs.height;\n                switch (childGravity)\n                {\n                    case LinearLayoutParameter::LinearGravity::NONE:\n                    case LinearLayoutParameter::LinearGravity::TOP:\n                        break;\n                    case LinearLayoutParameter::LinearGravity::BOTTOM:\n                        finalPosY = ap.y * cs.height;\n                        break;\n                    case LinearLayoutParameter::LinearGravity::CENTER_VERTICAL:\n                        finalPosY = layoutSize.height / 2.0f - cs.height * (0.5f - ap.y);\n                        break;\n                    default:\n                        break;\n                }\n                Margin mg = layoutParameter->getMargin();\n                finalPosX += mg.left;\n                finalPosY -= mg.top;\n                child->setPosition(Vec2(finalPosX, finalPosY));\n                leftBoundary = child->getRightInParent() + mg.right;\n            }\n        }\n    }\n}\n\nvoid RelativeLayoutExecutant::doLayout(const cocos2d::Size &layoutSize, Vector<cocos2d::Node *> container)\n{\n    ssize_t unlayoutChildCount = 0;\n    Vector<Widget*> widgetChildren;\n    for (auto& subWidget : container)\n    {\n        Widget* child = dynamic_cast<Widget*>(subWidget);\n        if (child)\n        {\n            RelativeLayoutParameter* layoutParameter = dynamic_cast<RelativeLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::RELATIVE));\n            layoutParameter->_put = false;\n            unlayoutChildCount++;\n            widgetChildren.pushBack(child);\n        }\n    }\n    while (unlayoutChildCount > 0)\n    {\n        for (auto& subWidget : widgetChildren)\n        {\n            Widget* child = static_cast<Widget*>(subWidget);\n            RelativeLayoutParameter* layoutParameter = dynamic_cast<RelativeLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::RELATIVE));\n            \n            if (layoutParameter)\n            {\n                if (layoutParameter->_put)\n                {\n                    continue;\n                }\n                Vec2 ap = child->getAnchorPoint();\n                Size cs = child->getSize();\n                RelativeLayoutParameter::RelativeAlign align = layoutParameter->getAlign();\n                const std::string relativeName = layoutParameter->getRelativeToWidgetName();\n                Widget* relativeWidget = nullptr;\n                RelativeLayoutParameter* relativeWidgetLP = nullptr;\n                float finalPosX = 0.0f;\n                float finalPosY = 0.0f;\n                if (!relativeName.empty())\n                {\n                    for (auto& sWidget : widgetChildren)\n                    {\n                        if (sWidget)\n                        {\n                            RelativeLayoutParameter* rlayoutParameter = dynamic_cast<RelativeLayoutParameter*>(sWidget->getLayoutParameter(LayoutParameter::Type::RELATIVE));\n                            if (rlayoutParameter &&  rlayoutParameter->getRelativeName() == relativeName)\n                            {\n                                relativeWidget = sWidget;\n                                relativeWidgetLP = rlayoutParameter;\n                                break;\n                            }\n                        }\n                    }\n                }\n                switch (align)\n                {\n                    case RelativeLayoutParameter::RelativeAlign::NONE:\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_LEFT:\n                        finalPosX = ap.x * cs.width;\n                        finalPosY = layoutSize.height - ((1.0f - ap.y) * cs.height);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_CENTER_HORIZONTAL:\n                        finalPosX = layoutSize.width * 0.5f - cs.width * (0.5f - ap.x);\n                        finalPosY = layoutSize.height - ((1.0f - ap.y) * cs.height);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_RIGHT:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        finalPosY = layoutSize.height - ((1.0f - ap.y) * cs.height);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_CENTER_VERTICAL:\n                        finalPosX = ap.x * cs.width;\n                        finalPosY = layoutSize.height * 0.5f - cs.height * (0.5f - ap.y);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::CENTER_IN_PARENT:\n                        finalPosX = layoutSize.width * 0.5f - cs.width * (0.5f - ap.x);\n                        finalPosY = layoutSize.height * 0.5f - cs.height * (0.5f - ap.y);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_CENTER_VERTICAL:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        finalPosY = layoutSize.height * 0.5f - cs.height * (0.5f - ap.y);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_BOTTOM:\n                        finalPosX = ap.x * cs.width;\n                        finalPosY = ap.y * cs.height;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_BOTTOM_CENTER_HORIZONTAL:\n                        finalPosX = layoutSize.width * 0.5f - cs.width * (0.5f - ap.x);\n                        finalPosY = ap.y * cs.height;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_BOTTOM:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        finalPosY = ap.y * cs.height;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_LEFTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getTopInParent();\n                            float locationLeft = relativeWidget->getLeftInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationBottom = relativeWidget->getTopInParent();\n                            \n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = relativeWidget->getLeftInParent() + rbs.width * 0.5f + ap.x * cs.width - cs.width * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_RIGHTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getTopInParent();\n                            float locationRight = relativeWidget->getRightInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_TOPALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getTopInParent();\n                            float locationRight = relativeWidget->getLeftInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationRight = relativeWidget->getLeftInParent();\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                            \n                            finalPosY = relativeWidget->getBottomInParent() + rbs.height * 0.5f + ap.y * cs.height - cs.height * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_BOTTOMALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getBottomInParent();\n                            float locationRight = relativeWidget->getLeftInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_TOPALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getTopInParent();\n                            float locationLeft = relativeWidget->getRightInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationLeft = relativeWidget->getRightInParent();\n                            finalPosX = locationLeft + ap.x * cs.width;\n                            \n                            finalPosY = relativeWidget->getBottomInParent() + rbs.height * 0.5f + ap.y * cs.height - cs.height * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_BOTTOMALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getBottomInParent();\n                            float locationLeft = relativeWidget->getRightInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_LEFTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getBottomInParent();\n                            float locationLeft = relativeWidget->getLeftInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationTop = relativeWidget->getBottomInParent();\n                            \n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = relativeWidget->getLeftInParent() + rbs.width * 0.5f + ap.x * cs.width - cs.width * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_RIGHTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getBottomInParent();\n                            float locationRight = relativeWidget->getRightInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                Margin relativeWidgetMargin;\n                Margin mg = layoutParameter->getMargin();\n                if (relativeWidgetLP)\n                {\n                    relativeWidgetMargin = relativeWidgetLP->getMargin();\n                }\n                //handle margin\n                switch (align)\n                {\n                    case RelativeLayoutParameter::RelativeAlign::NONE:\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_LEFT:\n                        finalPosX += mg.left;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_CENTER_HORIZONTAL:\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_RIGHT:\n                        finalPosX -= mg.right;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_CENTER_VERTICAL:\n                        finalPosX += mg.left;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::CENTER_IN_PARENT:\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_CENTER_VERTICAL:\n                        finalPosX -= mg.right;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_BOTTOM:\n                        finalPosX += mg.left;\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_BOTTOM_CENTER_HORIZONTAL:\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_BOTTOM:\n                        finalPosX -= mg.right;\n                        finalPosY += mg.bottom;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_LEFTALIGN:\n                        finalPosY += mg.bottom;\n                        finalPosX += mg.left;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_RIGHTALIGN:\n                        finalPosY += mg.bottom;\n                        finalPosX -= mg.right;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_CENTER:\n                        finalPosY += mg.bottom;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_TOPALIGN:\n                        finalPosX -= mg.right;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_BOTTOMALIGN:\n                        finalPosX -= mg.right;\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_CENTER:\n                        finalPosX -= mg.right;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_TOPALIGN:\n                        finalPosX += mg.left;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_BOTTOMALIGN:\n                        finalPosX += mg.left;\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_CENTER:\n                        finalPosX += mg.left;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_LEFTALIGN:\n                        finalPosY -= mg.top;\n                        finalPosX += mg.left;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_RIGHTALIGN:\n                        finalPosY -= mg.top;\n                        finalPosX -= mg.right;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_CENTER:\n                        finalPosY -= mg.top;\n                        break;\n                    default:\n                        break;\n                }\n                child->setPosition(Vec2(finalPosX, finalPosY));\n                layoutParameter->_put = true;\n                unlayoutChildCount--;\n            }\n        }\n    }\n    widgetChildren.clear();\n}\n    ",
        "base_contents": "class LayoutExecutant : public Ref\n{\npublic:\n    LayoutExecutant(){};\n    virtual ~LayoutExecutant(){};\n    static LayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container){};\n};\n\nclass LinearVerticalLayoutExecutant : public LayoutExecutant\n{\npublic:\n    LinearVerticalLayoutExecutant(){};\n    virtual ~LinearVerticalLayoutExecutant(){};\n    static LinearVerticalLayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container);\n};\n\nclass LinearHorizontalLayoutExecutant : public LayoutExecutant\n{\npublic:\n    LinearHorizontalLayoutExecutant(){};\n    virtual ~LinearHorizontalLayoutExecutant(){};\n    static LinearHorizontalLayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container);\n};\n\nclass RelativeLayoutExecutant : public LayoutExecutant\n{\npublic:\n    RelativeLayoutExecutant(){};\n    virtual ~RelativeLayoutExecutant(){};\n    static RelativeLayoutExecutant* create();\n    virtual void doLayout(const Size& layoutSize, Vector<Node*> container);\n};\n    \nLayoutExecutant* LayoutExecutant::create()\n{\n    LayoutExecutant* exe = new LayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n    \nLinearVerticalLayoutExecutant* LinearVerticalLayoutExecutant::create()\n{\n    LinearVerticalLayoutExecutant* exe = new LinearVerticalLayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n\nLinearHorizontalLayoutExecutant* LinearHorizontalLayoutExecutant::create()\n{\n    LinearHorizontalLayoutExecutant* exe = new LinearHorizontalLayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n\nRelativeLayoutExecutant* RelativeLayoutExecutant::create()\n{\n    RelativeLayoutExecutant* exe = new RelativeLayoutExecutant();\n    if (exe)\n    {\n        exe->autorelease();\n        return exe;\n    }\n    CC_SAFE_DELETE(exe);\n    return nullptr;\n}\n    \nvoid LinearVerticalLayoutExecutant::doLayout(const cocos2d::Size &layoutSize, Vector<cocos2d::Node *> container)\n{\n    float topBoundary = layoutSize.height;\n    \n    for (auto& subWidget : container)\n    {\n        Widget* child = dynamic_cast<Widget*>(subWidget);\n        if (child)\n        {\n            LinearLayoutParameter* layoutParameter = dynamic_cast<LinearLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::LINEAR));\n            \n            if (layoutParameter)\n            {\n                LinearLayoutParameter::LinearGravity childGravity = layoutParameter->getGravity();\n                Vector2 ap = child->getAnchorPoint();\n                Size cs = child->getSize();\n                float finalPosX = ap.x * cs.width;\n                float finalPosY = topBoundary - ((1.0f-ap.y) * cs.height);\n                switch (childGravity)\n                {\n                    case LinearLayoutParameter::LinearGravity::NONE:\n                    case LinearLayoutParameter::LinearGravity::LEFT:\n                        break;\n                    case LinearLayoutParameter::LinearGravity::RIGHT:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        break;\n                    case LinearLayoutParameter::LinearGravity::CENTER_HORIZONTAL:\n                        finalPosX = layoutSize.width / 2.0f - cs.width * (0.5f-ap.x);\n                        break;\n                    default:\n                        break;\n                }\n                Margin mg = layoutParameter->getMargin();\n                finalPosX += mg.left;\n                finalPosY -= mg.top;\n                child->setPosition(Vector2(finalPosX, finalPosY));\n                topBoundary = child->getBottomInParent() - mg.bottom;\n            }\n        }\n    }\n}\n    \nvoid LinearHorizontalLayoutExecutant::doLayout(const cocos2d::Size &layoutSize, Vector<cocos2d::Node *> container)\n{\n    float leftBoundary = 0.0f;\n    for (auto& subWidget : container)\n    {\n        Widget* child = dynamic_cast<Widget*>(subWidget);\n        if (child)\n        {\n            LinearLayoutParameter* layoutParameter = dynamic_cast<LinearLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::LINEAR));\n            if (layoutParameter)\n            {\n                LinearLayoutParameter::LinearGravity childGravity = layoutParameter->getGravity();\n                Vector2 ap = child->getAnchorPoint();\n                Size cs = child->getSize();\n                float finalPosX = leftBoundary + (ap.x * cs.width);\n                float finalPosY = layoutSize.height - (1.0f - ap.y) * cs.height;\n                switch (childGravity)\n                {\n                    case LinearLayoutParameter::LinearGravity::NONE:\n                    case LinearLayoutParameter::LinearGravity::TOP:\n                        break;\n                    case LinearLayoutParameter::LinearGravity::BOTTOM:\n                        finalPosY = ap.y * cs.height;\n                        break;\n                    case LinearLayoutParameter::LinearGravity::CENTER_VERTICAL:\n                        finalPosY = layoutSize.height / 2.0f - cs.height * (0.5f - ap.y);\n                        break;\n                    default:\n                        break;\n                }\n                Margin mg = layoutParameter->getMargin();\n                finalPosX += mg.left;\n                finalPosY -= mg.top;\n                child->setPosition(Vector2(finalPosX, finalPosY));\n                leftBoundary = child->getRightInParent() + mg.right;\n            }\n        }\n    }\n}\n\nvoid RelativeLayoutExecutant::doLayout(const cocos2d::Size &layoutSize, Vector<cocos2d::Node *> container)\n{\n    ssize_t unlayoutChildCount = 0;\n    Vector<Widget*> widgetChildren;\n    for (auto& subWidget : container)\n    {\n        Widget* child = dynamic_cast<Widget*>(subWidget);\n        if (child)\n        {\n            RelativeLayoutParameter* layoutParameter = dynamic_cast<RelativeLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::RELATIVE));\n            layoutParameter->_put = false;\n            unlayoutChildCount++;\n            widgetChildren.pushBack(child);\n        }\n    }\n    while (unlayoutChildCount > 0)\n    {\n        for (auto& subWidget : widgetChildren)\n        {\n            Widget* child = static_cast<Widget*>(subWidget);\n            RelativeLayoutParameter* layoutParameter = dynamic_cast<RelativeLayoutParameter*>(child->getLayoutParameter(LayoutParameter::Type::RELATIVE));\n            \n            if (layoutParameter)\n            {\n                if (layoutParameter->_put)\n                {\n                    continue;\n                }\n                Vector2 ap = child->getAnchorPoint();\n                Size cs = child->getSize();\n                RelativeLayoutParameter::RelativeAlign align = layoutParameter->getAlign();\n                const std::string relativeName = layoutParameter->getRelativeToWidgetName();\n                Widget* relativeWidget = nullptr;\n                RelativeLayoutParameter* relativeWidgetLP = nullptr;\n                float finalPosX = 0.0f;\n                float finalPosY = 0.0f;\n                if (!relativeName.empty())\n                {\n                    for (auto& sWidget : widgetChildren)\n                    {\n                        if (sWidget)\n                        {\n                            RelativeLayoutParameter* rlayoutParameter = dynamic_cast<RelativeLayoutParameter*>(sWidget->getLayoutParameter(LayoutParameter::Type::RELATIVE));\n                            if (rlayoutParameter &&  rlayoutParameter->getRelativeName() == relativeName)\n                            {\n                                relativeWidget = sWidget;\n                                relativeWidgetLP = rlayoutParameter;\n                                break;\n                            }\n                        }\n                    }\n                }\n                switch (align)\n                {\n                    case RelativeLayoutParameter::RelativeAlign::NONE:\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_LEFT:\n                        finalPosX = ap.x * cs.width;\n                        finalPosY = layoutSize.height - ((1.0f - ap.y) * cs.height);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_CENTER_HORIZONTAL:\n                        finalPosX = layoutSize.width * 0.5f - cs.width * (0.5f - ap.x);\n                        finalPosY = layoutSize.height - ((1.0f - ap.y) * cs.height);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_RIGHT:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        finalPosY = layoutSize.height - ((1.0f - ap.y) * cs.height);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_CENTER_VERTICAL:\n                        finalPosX = ap.x * cs.width;\n                        finalPosY = layoutSize.height * 0.5f - cs.height * (0.5f - ap.y);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::CENTER_IN_PARENT:\n                        finalPosX = layoutSize.width * 0.5f - cs.width * (0.5f - ap.x);\n                        finalPosY = layoutSize.height * 0.5f - cs.height * (0.5f - ap.y);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_CENTER_VERTICAL:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        finalPosY = layoutSize.height * 0.5f - cs.height * (0.5f - ap.y);\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_BOTTOM:\n                        finalPosX = ap.x * cs.width;\n                        finalPosY = ap.y * cs.height;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_BOTTOM_CENTER_HORIZONTAL:\n                        finalPosX = layoutSize.width * 0.5f - cs.width * (0.5f - ap.x);\n                        finalPosY = ap.y * cs.height;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_BOTTOM:\n                        finalPosX = layoutSize.width - ((1.0f - ap.x) * cs.width);\n                        finalPosY = ap.y * cs.height;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_LEFTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getTopInParent();\n                            float locationLeft = relativeWidget->getLeftInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationBottom = relativeWidget->getTopInParent();\n                            \n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = relativeWidget->getLeftInParent() + rbs.width * 0.5f + ap.x * cs.width - cs.width * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_RIGHTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getTopInParent();\n                            float locationRight = relativeWidget->getRightInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_TOPALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getTopInParent();\n                            float locationRight = relativeWidget->getLeftInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationRight = relativeWidget->getLeftInParent();\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                            \n                            finalPosY = relativeWidget->getBottomInParent() + rbs.height * 0.5f + ap.y * cs.height - cs.height * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_BOTTOMALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getBottomInParent();\n                            float locationRight = relativeWidget->getLeftInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_TOPALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getTopInParent();\n                            float locationLeft = relativeWidget->getRightInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationLeft = relativeWidget->getRightInParent();\n                            finalPosX = locationLeft + ap.x * cs.width;\n                            \n                            finalPosY = relativeWidget->getBottomInParent() + rbs.height * 0.5f + ap.y * cs.height - cs.height * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_BOTTOMALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationBottom = relativeWidget->getBottomInParent();\n                            float locationLeft = relativeWidget->getRightInParent();\n                            finalPosY = locationBottom + ap.y * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_LEFTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getBottomInParent();\n                            float locationLeft = relativeWidget->getLeftInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationLeft + ap.x * cs.width;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_CENTER:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            Size rbs = relativeWidget->getSize();\n                            float locationTop = relativeWidget->getBottomInParent();\n                            \n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = relativeWidget->getLeftInParent() + rbs.width * 0.5f + ap.x * cs.width - cs.width * 0.5f;\n                        }\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_RIGHTALIGN:\n                        if (relativeWidget)\n                        {\n                            if (relativeWidgetLP && !relativeWidgetLP->_put)\n                            {\n                                continue;\n                            }\n                            float locationTop = relativeWidget->getBottomInParent();\n                            float locationRight = relativeWidget->getRightInParent();\n                            finalPosY = locationTop - (1.0f - ap.y) * cs.height;\n                            finalPosX = locationRight - (1.0f - ap.x) * cs.width;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                Margin relativeWidgetMargin;\n                Margin mg = layoutParameter->getMargin();\n                if (relativeWidgetLP)\n                {\n                    relativeWidgetMargin = relativeWidgetLP->getMargin();\n                }\n                //handle margin\n                switch (align)\n                {\n                    case RelativeLayoutParameter::RelativeAlign::NONE:\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_LEFT:\n                        finalPosX += mg.left;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_CENTER_HORIZONTAL:\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_TOP_RIGHT:\n                        finalPosX -= mg.right;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_CENTER_VERTICAL:\n                        finalPosX += mg.left;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::CENTER_IN_PARENT:\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_CENTER_VERTICAL:\n                        finalPosX -= mg.right;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_LEFT_BOTTOM:\n                        finalPosX += mg.left;\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_BOTTOM_CENTER_HORIZONTAL:\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::PARENT_RIGHT_BOTTOM:\n                        finalPosX -= mg.right;\n                        finalPosY += mg.bottom;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_LEFTALIGN:\n                        finalPosY += mg.bottom;\n                        finalPosX += mg.left;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_RIGHTALIGN:\n                        finalPosY += mg.bottom;\n                        finalPosX -= mg.right;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_ABOVE_CENTER:\n                        finalPosY += mg.bottom;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_TOPALIGN:\n                        finalPosX -= mg.right;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_BOTTOMALIGN:\n                        finalPosX -= mg.right;\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_LEFT_OF_CENTER:\n                        finalPosX -= mg.right;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_TOPALIGN:\n                        finalPosX += mg.left;\n                        finalPosY -= mg.top;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_BOTTOMALIGN:\n                        finalPosX += mg.left;\n                        finalPosY += mg.bottom;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_RIGHT_OF_CENTER:\n                        finalPosX += mg.left;\n                        break;\n                        \n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_LEFTALIGN:\n                        finalPosY -= mg.top;\n                        finalPosX += mg.left;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_RIGHTALIGN:\n                        finalPosY -= mg.top;\n                        finalPosX -= mg.right;\n                        break;\n                    case RelativeLayoutParameter::RelativeAlign::LOCATION_BELOW_CENTER:\n                        finalPosY -= mg.top;\n                        break;\n                    default:\n                        break;\n                }\n                child->setPosition(Vector2(finalPosX, finalPosY));\n                layoutParameter->_put = true;\n                unlayoutChildCount--;\n            }\n        }\n    }\n    widgetChildren.clear();\n}\n    ",
        "res_region": "",
        "lookback": "static const int BCAKGROUNDCOLORRENDERER_Z = (-2);",
        "lookahead": "static const int BACKGROUNDIMAGE_Z = (-1);",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 40,
        "end_line": 1085,
        "merge_gen_region": null,
        "confidence": 0.6783082485198975,
        "hesitated": true
    }
]