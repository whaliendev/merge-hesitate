[
    {
        "a_contents": "\nvoid deleteValueForKeyJNI(const char* key)\n{\n    JniMethodInfo t;\n    \n    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, \"deleteValueForKey\", \"(Ljava/lang/String;)V\")) {\n        jstring stringArg1 = t.env->NewStringUTF(key);\n        t.env->CallStaticVoidMethod(t.classID, t.methodID, stringArg1);\n        \n        t.env->DeleteLocalRef(t.classID);\n        t.env->DeleteLocalRef(stringArg1);\n    }\n}\n\nvoid conversionEncodingJNI(const char* src, int byteSize, const char* fromCharset, char* dst, const char* newCharset)\n{\n    JniMethodInfo methodInfo;\n\n    if (JniHelper::getStaticMethodInfo(methodInfo, CLASS_NAME, \"conversionEncoding\", \"([BLjava/lang/String;Ljava/lang/String;)[B\")) {\n        jbyteArray strArray = methodInfo.env->NewByteArray(byteSize);\n        methodInfo.env->SetByteArrayRegion(strArray, 0, byteSize, reinterpret_cast<const jbyte*>(src));\n\n        jstring stringArg1 = methodInfo.env->NewStringUTF(fromCharset);\n        jstring stringArg2 = methodInfo.env->NewStringUTF(newCharset);\n\n        jbyteArray newArray = (jbyteArray)methodInfo.env->CallStaticObjectMethod(methodInfo.classID, methodInfo.methodID, strArray, stringArg1, stringArg2);\n        jsize theArrayLen = methodInfo.env->GetArrayLength(newArray);\n        methodInfo.env->GetByteArrayRegion(newArray, 0, theArrayLen, (jbyte*)dst);\n\n        methodInfo.env->DeleteLocalRef(strArray);\n        methodInfo.env->DeleteLocalRef(stringArg1);\n        methodInfo.env->DeleteLocalRef(stringArg2);\n        methodInfo.env->DeleteLocalRef(methodInfo.classID);\n    }\n}",
        "b_contents": "\nvoid conversionEncodingJNI(const char* src, int byteSize, const char* fromCharset, char* dst, const char* newCharset)\n{\n    JniMethodInfo methodInfo;\n\n    if (JniHelper::getStaticMethodInfo(methodInfo, CLASS_NAME, \"conversionEncoding\", \"([BLjava/lang/String;Ljava/lang/String;)[B\")) {\n        jbyteArray strArray = methodInfo.env->NewByteArray(byteSize);\n        methodInfo.env->SetByteArrayRegion(strArray, 0, byteSize, reinterpret_cast<const jbyte*>(src));\n\n        jstring stringArg1 = methodInfo.env->NewStringUTF(fromCharset);\n        jstring stringArg2 = methodInfo.env->NewStringUTF(newCharset);\n\n        jbyteArray newArray = (jbyteArray)methodInfo.env->CallStaticObjectMethod(methodInfo.classID, methodInfo.methodID, strArray, stringArg1, stringArg2);\n        jsize theArrayLen = methodInfo.env->GetArrayLength(newArray);\n        methodInfo.env->GetByteArrayRegion(newArray, 0, theArrayLen, (jbyte*)dst);\n\n        methodInfo.env->DeleteLocalRef(strArray);\n        methodInfo.env->DeleteLocalRef(stringArg1);\n        methodInfo.env->DeleteLocalRef(stringArg2);\n        methodInfo.env->DeleteLocalRef(methodInfo.classID);\n    }\n}",
        "base_contents": "",
        "res_region": "\nvoid deleteValueForKeyJNI(const char* key)\n{\n    JniMethodInfo t;\n    \n    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, \"deleteValueForKey\", \"(Ljava/lang/String;)V\")) {\n        jstring stringArg1 = t.env->NewStringUTF(key);\n        t.env->CallStaticVoidMethod(t.classID, t.methodID, stringArg1);\n        \n        t.env->DeleteLocalRef(t.classID);\n        t.env->DeleteLocalRef(stringArg1);\n    }\n}\n\nvoid conversionEncodingJNI(const char* src, int byteSize, const char* fromCharset, char* dst, const char* newCharset)\n{\n    JniMethodInfo methodInfo;\n\n    if (JniHelper::getStaticMethodInfo(methodInfo, CLASS_NAME, \"conversionEncoding\", \"([BLjava/lang/String;Ljava/lang/String;)[B\")) {\n        jbyteArray strArray = methodInfo.env->NewByteArray(byteSize);\n        methodInfo.env->SetByteArrayRegion(strArray, 0, byteSize, reinterpret_cast<const jbyte*>(src));\n\n        jstring stringArg1 = methodInfo.env->NewStringUTF(fromCharset);\n        jstring stringArg2 = methodInfo.env->NewStringUTF(newCharset);\n\n        jbyteArray newArray = (jbyteArray)methodInfo.env->CallStaticObjectMethod(methodInfo.classID, methodInfo.methodID, strArray, stringArg1, stringArg2);\n        jsize theArrayLen = methodInfo.env->GetArrayLength(newArray);\n        methodInfo.env->GetByteArrayRegion(newArray, 0, theArrayLen, (jbyte*)dst);\n\n        methodInfo.env->DeleteLocalRef(strArray);\n        methodInfo.env->DeleteLocalRef(stringArg1);\n        methodInfo.env->DeleteLocalRef(stringArg2);\n        methodInfo.env->DeleteLocalRef(methodInfo.classID);\n    }\n}",
        "lookback": "void deleteValueForKeyJNI(const char* key)",
        "lookahead": "",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 402,
        "end_line": 462,
        "merge_gen_region": " deleteValueJNIconst*) deleteValueJNIconst*) JMethodInfo; (ni::Static(,,ValueForKey \"(//;)\")) jstringArg = =.->String(); tenvCallVoid(.ID tmethodID string1 t tenvDeleteRefttclass);.->DeleteRefstring1); } voidEncoding( char src intSize, char from, char dst const* new) JMethodInfo; (JHelpergetMethodInfomethodInfo CLASSNAME \"Encoding\",[javalangStringLjavalangString)[\")) jbyte strArray methodInfoenvNew(Sizebyte);.->ByteArrayRegionstr,,,Size reinterpretcastconstbytesrc*>()); stringArg =.->StringUTFfrom); stringArg =.->NSUTFnew);byte new =jArraymethodInfoenvCallObject(Infoclass,.,,Array string1 string2 j theLen methodInfoenvGetLengthnew);.->ByteArray(Array 0 theLen (bytedst);.->Local(Array methodInfoenvDeleteRefstring1);.->Local(Arg);.->Local(2 methodInfoenvDeleteRefmethod.ID); }",
        "confidence": 0.909634530544281,
        "hesitated": false,
        "resolved": false
    }
]