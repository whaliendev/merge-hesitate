[
    {
        "a_contents": "Animate3DCallbackTest::Animate3DCallbackTest()\n{\n    auto s = Director::getInstance()->getWinSize();\n    auto sprite3d = Sprite3D::create(\"Sprite3DTest/orc.c3b\");\n    sprite3d->setPosition(Vec2(s.width / 2.0f, s.height / 2.0f));\n    sprite3d->setScale(3.0f);\n    sprite3d->setRotation3D(Vec3(0.0f, 180.0f, 0.0f));\n    this->addChild(sprite3d);\n\n    //test attach\n    auto weapon = Sprite3D::create(\"Sprite3DTest/axe.c3b\");\n    sprite3d->getAttachNode(\"Bip001 R Hand\")->addChild(weapon);\n\n    auto animation = Animation3D::create(\"Sprite3DTest/orc.c3b\");\n    if (animation)\n    {\n        auto animate = Animate3D::create(animation);\n        animate->setSpeed(-animate->getSpeed());\n        sprite3d->runAction(RepeatForever::create(animate));\n\n        ValueMap *valuemap0 = new ValueMap;\n        (*valuemap0)[\"state\"] = Value(false);\n        _userInfoList.push_back(new Animate3D::DisplayedEventInfo{ weapon, valuemap0 });\n        animate->setKeyFrameUserInfo(10, _userInfoList.back());\n\n        ValueMap *valuemap1 = new ValueMap;\n        (*valuemap1)[\"state\"] = Value(true);\n        _userInfoList.push_back(new Animate3D::DisplayedEventInfo{ weapon, valuemap1 });\n        animate->setKeyFrameUserInfo(50, _userInfoList.back());\n\n        animate->keyFrameCallback = [=](int keyFrame, const Animate3D::DisplayedEventInfo *deInfo){\n            auto vmap = deInfo->userInfo;\n            auto val = vmap->at(\"state\");\n            deInfo->target->setVisible(val.asBool());\n        };\n    }\n}\n\nAnimate3DCallbackTest::~Animate3DCallbackTest()\n{\n    for (auto iter : _userInfoList){\n        delete iter->userInfo;\n        delete iter;\n    }\n}\n\nstd::string Animate3DCallbackTest::title() const\n{\n    return \"Testing Animate3DCallback\";\n}\n\nstd::string Animate3DCallbackTest::subtitle() const\n{\n    return \"\";\n}",
        "b_contents": "Sprite3DClippingTest::Sprite3DClippingTest()\n{\n    auto size = Director::getInstance()->getWinSize();\n    auto stencil = Sprite::create(\"Images/close.png\");\n    auto clipSprite3D = ClippingNode::create();\n    clipSprite3D->setStencil(stencil);\n    this->addChild(clipSprite3D);\n    clipSprite3D->setScale(3.0f);\n    \n    auto sprite3D = Sprite3D::create(\"Sprite3DTest/orc.c3b\");\n    sprite3D->setScale(1.0f);\n    sprite3D->setRotation3D(Vec3(0.0f, 180.0f, 0.0f));\n    clipSprite3D->addChild(sprite3D);//5\n    \n    clipSprite3D->setPosition(Vec2(size.width / 2, size.height / 2));\n    \n    auto seq = Sequence::create(ScaleTo::create(2.f, 3), ScaleTo::create(2.f, 0.5f), NULL);\n    sprite3D->runAction(RepeatForever::create(seq));\n    auto animation = Animation3D::create(\"Sprite3DTest/orc.c3b\");\n    auto animate = Animate3D::create(animation);\n    sprite3D->runAction(RepeatForever::create(animate));\n    sprite3D->setForce2DQueue(true);\n}\n\nSprite3DClippingTest::~Sprite3DClippingTest()\n{\n    \n}\n\nstd::string Sprite3DClippingTest::title() const\n{\n    return \"Sprite3D Clipping Test\";\n}\n\nstd::string Sprite3DClippingTest::subtitle() const\n{\n    return \"\";\n}",
        "base_contents": "",
        "res_region": "Sprite3DClippingTest::Sprite3DClippingTest()\n{\n    auto size = Director::getInstance()->getWinSize();\n    auto stencil = Sprite::create(\"Images/close.png\");\n    auto clipSprite3D = ClippingNode::create();\n    clipSprite3D->setStencil(stencil);\n    this->addChild(clipSprite3D);\n    clipSprite3D->setScale(3.0f);\n    \n    auto sprite3D = Sprite3D::create(\"Sprite3DTest/orc.c3b\");\n    sprite3D->setScale(1.0f);\n    sprite3D->setRotation3D(Vec3(0.0f, 180.0f, 0.0f));\n    clipSprite3D->addChild(sprite3D);//5\n    \n    clipSprite3D->setPosition(Vec2(size.width / 2, size.height / 2));\n    \n    auto seq = Sequence::create(ScaleTo::create(2.f, 3), ScaleTo::create(2.f, 0.5f), NULL);\n    sprite3D->runAction(RepeatForever::create(seq));\n    auto animation = Animation3D::create(\"Sprite3DTest/orc.c3b\");\n    auto animate = Animate3D::create(animation);\n    sprite3D->runAction(RepeatForever::create(animate));\n    sprite3D->setForce2DQueue(true);\n}\n\nSprite3DClippingTest::~Sprite3DClippingTest()\n{\n    \n}\n\nstd::string Sprite3DClippingTest::title() const\n{\n    return \"Sprite3D Clipping Test\";\n}\n\nstd::string Sprite3DClippingTest::subtitle() const\n{\n    return \"\";\n}\nAnimate3DCallbackTest::Animate3DCallbackTest()\n{\n    auto s = Director::getInstance()->getWinSize();\n    auto sprite3d = Sprite3D::create(\"Sprite3DTest/orc.c3b\");\n    sprite3d->setPosition(Vec2(s.width / 2.0f, s.height / 2.0f));\n    sprite3d->setScale(3.0f);\n    sprite3d->setRotation3D(Vec3(0.0f, 180.0f, 0.0f));\n    this->addChild(sprite3d);\n\n    //test attach\n    auto weapon = Sprite3D::create(\"Sprite3DTest/axe.c3b\");\n    sprite3d->getAttachNode(\"Bip001 R Hand\")->addChild(weapon);\n\n    auto animation = Animation3D::create(\"Sprite3DTest/orc.c3b\");\n    if (animation)\n    {\n        auto animate = Animate3D::create(animation);\n        animate->setSpeed(-animate->getSpeed());\n        sprite3d->runAction(RepeatForever::create(animate));\n\n        ValueMap *valuemap0 = new ValueMap;\n        (*valuemap0)[\"state\"] = Value(false);\n        _userInfoList.push_back(new Animate3D::DisplayedEventInfo{ weapon, valuemap0 });\n        animate->setKeyFrameUserInfo(10, _userInfoList.back());\n\n        ValueMap *valuemap1 = new ValueMap;\n        (*valuemap1)[\"state\"] = Value(true);\n        _userInfoList.push_back(new Animate3D::DisplayedEventInfo{ weapon, valuemap1 });\n        animate->setKeyFrameUserInfo(50, _userInfoList.back());\n\n        animate->keyFrameCallback = [=](int keyFrame, const Animate3D::DisplayedEventInfo *deInfo){\n            auto vmap = deInfo->userInfo;\n            auto val = vmap->at(\"state\");\n            deInfo->target->setVisible(val.asBool());\n        };\n    }\n}\n\nAnimate3DCallbackTest::~Animate3DCallbackTest()\n{\n    for (auto iter : _userInfoList){\n        delete iter->userInfo;\n        delete iter;\n    }\n}\n\nstd::string Animate3DCallbackTest::title() const\n{\n    return \"Testing Animate3DCallback\";\n}\n\nstd::string Animate3DCallbackTest::subtitle() const\n{\n    return \"\";\n}",
        "lookback": "{",
        "lookahead": "",
        "label": [
            "interleave",
            "one_side_deletion"
        ],
        "start_line": 2576,
        "end_line": 2672,
        "merge_gen_region": null,
        "confidence": 0.7136470675468445,
        "hesitated": true
    }
]