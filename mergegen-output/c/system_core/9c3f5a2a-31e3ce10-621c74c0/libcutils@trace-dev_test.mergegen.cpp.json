[
    {
        "a_contents": "    std::string expected = android::base::StringPrintf(\"H|%d|fake_track|12345\", getpid());",
        "b_contents": "    std::string expected = android::base::StringPrintf(\"H|%d|fake_track|fake_name|12345\", getpid());",
        "base_contents": "    std::string expected = android::base::StringPrintf(\"U|%d|fake_track|fake_name|12345\", getpid());",
        "res_region": "    std::string expected = android::base::StringPrintf(\"H|%d|fake_track|12345\", getpid());",
        "lookback": "    ASSERT_STREQ(expected.c_str(), actual.c_str());",
        "lookahead": "    ASSERT_STREQ(expected.c_str(), actual.c_str());",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 314,
        "end_line": 320,
        "merge_gen_region": ":::: expected androidbaseStringPrintfH%|dfaketrack1234\", get());_stdstdstdstdDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDoDo",
        "confidence": 0.927346408367157,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_exact) {\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "b_contents": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_exact_track_name) {\n    const int name_size = 5;\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "base_contents": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_exact_track_name) {\n    const int name_size = 5;\n    std::string expected = android::base::StringPrintf(\"U|%d|\", getpid());",
        "res_region": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_exact) {\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "lookback": "    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "lookahead": "    std::string track_name =",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 324,
        "end_line": 335,
        "merge_gen_region": "_(DevTest at___(TESTFTraceTest,raceasyncforforTESTFTraceTest,raceasyncforcTESTFcB::TESTFcB::TESTFcB::::TESTFcB::::TESTFTraceTest,raceasyncforTest at__TESTFoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutputoutput",
        "confidence": 0.9204104542732239,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    atrace_async_for_track_end_body(track_name.c_str(), 12345);",
        "b_contents": "    expected = android::base::StringPrintf(\"H|%d|\", getpid());\n    expected += track_name + \"|nam|12345\";\n    atrace_async_for_track_end_body(track_name.c_str(), \"name\", 12345);",
        "base_contents": "    expected = android::base::StringPrintf(\"U|%d|\", getpid());\n    expected += track_name + \"|nam|12345\";\n    atrace_async_for_track_end_body(track_name.c_str(), \"name\", 12345);",
        "res_region": "    atrace_async_for_track_end_body(track_name.c_str(), 12345);",
        "lookback": "    EXPECT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));",
        "lookahead": "    EXPECT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 351,
        "end_line": 361,
        "merge_gen_region": null,
        "confidence": 0.4196280539035797,
        "hesitated": true
    },
    {
        "a_contents": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated) {\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "b_contents": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated_track_name) {\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "base_contents": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated_track_name) {\n    std::string expected = android::base::StringPrintf(\"U|%d|\", getpid());",
        "res_region": "TEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated) {\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "lookback": "    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());",
        "lookahead": "    std::string track_name = MakeName(2 * ATRACE_MESSAGE_LENGTH);",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 368,
        "end_line": 377,
        "merge_gen_region": "_(DevTest at___(,Test at__,,::&_,,::&_,,::&_,,::&_,,::&_,,::&,,&_,,__);",
        "confidence": 0.9172584414482117,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "    atrace_async_for_track_end_body(track_name.c_str(), 12345);",
        "b_contents": "    atrace_async_for_track_end_body(track_name.c_str(), \"name\", 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 9;\n    expected += android::base::StringPrintf(\"%.*s|n|12345\", expected_len, track_name.c_str());\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n}\n\nTEST_F(TraceDevTest, atrace_async_for_track_end_body_exact_name) {\n    const int track_name_size = 11;\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());\n    std::string name =\n            MakeName(ATRACE_MESSAGE_LENGTH - expected.length() - 1 - track_name_size - 6);\n    atrace_async_for_track_end_body(\"track_name\", name.c_str(), 12345);",
        "base_contents": "    atrace_async_for_track_end_body(track_name.c_str(), \"name\", 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 9;\n    expected += android::base::StringPrintf(\"%.*s|n|12345\", expected_len, track_name.c_str());\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n}\n\nTEST_F(TraceDevTest, atrace_async_for_track_end_body_exact_name) {\n    const int track_name_size = 11;\n    std::string expected = android::base::StringPrintf(\"U|%d|\", getpid());\n    std::string name =\n            MakeName(ATRACE_MESSAGE_LENGTH - expected.length() - 1 - track_name_size - 6);\n    atrace_async_for_track_end_body(\"track_name\", name.c_str(), 12345);",
        "res_region": "    atrace_async_for_track_end_body(track_name.c_str(), 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));",
        "lookback": "",
        "lookahead": "    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 7;",
        "label": [
            "interleave",
            "complex_conflict"
        ],
        "start_line": 379,
        "end_line": 419,
        "merge_gen_region": null,
        "confidence": 0.23907096683979034,
        "hesitated": true
    },
    {
        "a_contents": "    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 7;\n    expected += android::base::StringPrintf(\"%.*s|12345\", expected_len, track_name.c_str());",
        "b_contents": "    expected += \"track_name|\" + name + \"|12345\";\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n\n    // Add a single character and verify we get the same value as before.\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n    name += '*';\n    atrace_async_for_track_end_body(\"track_name\", name.c_str(), 12345);\n    EXPECT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n}\n\nTEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated_name) {\n    std::string expected = android::base::StringPrintf(\"H|%d|track_name|\", getpid());\n    std::string name = MakeName(2 * ATRACE_MESSAGE_LENGTH);\n    atrace_async_for_track_end_body(\"track_name\", name.c_str(), 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 1 - 6;\n    expected += android::base::StringPrintf(\"%.*s|12345\", expected_len, name.c_str());\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n}\n\nTEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated_both) {\n    std::string expected = android::base::StringPrintf(\"H|%d|\", getpid());\n    std::string name = MakeName(2 * ATRACE_MESSAGE_LENGTH);\n    std::string track_name = MakeName(2 * ATRACE_MESSAGE_LENGTH);\n    atrace_async_for_track_end_body(track_name.c_str(), name.c_str(), 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 3 - 6;\n    expected += android::base::StringPrintf(\"%.*s|%.1s|12345\", expected_len, track_name.c_str(),\n                                            name.c_str());",
        "base_contents": "    expected += \"track_name|\" + name + \"|12345\";\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n\n    // Add a single character and verify we get the same value as before.\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n    name += '*';\n    atrace_async_for_track_end_body(\"track_name\", name.c_str(), 12345);\n    EXPECT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n}\n\nTEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated_name) {\n    std::string expected = android::base::StringPrintf(\"U|%d|track_name|\", getpid());\n    std::string name = MakeName(2 * ATRACE_MESSAGE_LENGTH);\n    atrace_async_for_track_end_body(\"track_name\", name.c_str(), 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 1 - 6;\n    expected += android::base::StringPrintf(\"%.*s|12345\", expected_len, name.c_str());\n    ASSERT_STREQ(expected.c_str(), actual.c_str());\n}\n\nTEST_F(TraceDevTest, atrace_async_for_track_end_body_truncated_both) {\n    std::string expected = android::base::StringPrintf(\"U|%d|\", getpid());\n    std::string name = MakeName(2 * ATRACE_MESSAGE_LENGTH);\n    std::string track_name = MakeName(2 * ATRACE_MESSAGE_LENGTH);\n    atrace_async_for_track_end_body(track_name.c_str(), name.c_str(), 12345);\n\n    ASSERT_EQ(ATRACE_MESSAGE_LENGTH - 1, lseek(atrace_marker_fd, 0, SEEK_CUR));\n    ASSERT_EQ(0, lseek(atrace_marker_fd, 0, SEEK_SET));\n\n    std::string actual;\n    ASSERT_TRUE(android::base::ReadFdToString(atrace_marker_fd, &actual));\n    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 3 - 6;\n    expected += android::base::StringPrintf(\"%.*s|%.1s|12345\", expected_len, track_name.c_str(),\n                                            name.c_str());",
        "res_region": "    int expected_len = ATRACE_MESSAGE_LENGTH - expected.length() - 7;\n    expected += android::base::StringPrintf(\"%.*s|12345\", expected_len, track_name.c_str());",
        "lookback": "    expected += android::base::StringPrintf(\"%.*s|12345\", expected_len, track_name.c_str());",
        "lookahead": "    ASSERT_STREQ(expected.c_str(), actual.c_str());",
        "label": [
            "ours",
            "complex_conflict"
        ],
        "start_line": 426,
        "end_line": 515,
        "merge_gen_region": null,
        "confidence": 0.27967938780784607,
        "hesitated": true
    }
]