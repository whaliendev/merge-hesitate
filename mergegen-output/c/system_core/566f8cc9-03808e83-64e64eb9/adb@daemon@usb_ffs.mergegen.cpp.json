[
    {
        "a_contents": "const char* ffs_event_to_string(enum usb_functionfs_event_type type) {\n    switch (type) {\n        case FUNCTIONFS_BIND:\n            return \"FUNCTIONFS_BIND\";\n        case FUNCTIONFS_UNBIND:\n            return \"FUNCTIONFS_UNBIND\";\n        case FUNCTIONFS_ENABLE:\n            return \"FUNCTIONFS_ENABLE\";\n        case FUNCTIONFS_DISABLE:\n            return \"FUNCTIONFS_DISABLE\";\n        case FUNCTIONFS_SETUP:\n            return \"FUNCTIONFS_SETUP\";\n        case FUNCTIONFS_SUSPEND:\n            return \"FUNCTIONFS_SUSPEND\";\n        case FUNCTIONFS_RESUME:\n            return \"FUNCTIONFS_RESUME\";\n    }\n}\n\nbool read_functionfs_setup(borrowed_fd fd, usb_functionfs_event* event) {\n    LOG(INFO) << \"received FUNCTIONFS_SETUP control transfer: bRequestType = \"\n              << static_cast<int>(event->u.setup.bRequestType)\n              << \", bRequest = \" << static_cast<int>(event->u.setup.bRequest)\n              << \", wValue = \" << static_cast<int>(event->u.setup.wValue)\n              << \", wIndex = \" << static_cast<int>(event->u.setup.wIndex)\n              << \", wLength = \" << static_cast<int>(event->u.setup.wLength);\n\n    if ((event->u.setup.bRequestType & USB_DIR_IN)) {\n        LOG(INFO) << \"acking device-to-host control transfer\";\n        ssize_t rc = adb_write(fd.get(), \"\", 0);\n        if (rc != 0) {\n            PLOG(ERROR) << \"failed to write empty packet to host\";\n            return false;\n        }\n    } else {\n        std::string buf;\n        buf.resize(event->u.setup.wLength + 1);\n\n        ssize_t rc = adb_read(fd.get(), buf.data(), buf.size());\n        if (rc != event->u.setup.wLength) {\n            LOG(ERROR) << \"read \" << rc << \" bytes when trying to read control request, expected \"\n                       << event->u.setup.wLength;\n        }\n\n        LOG(INFO) << \"control request contents: \" << buf;\n    }\n\n    return true;\n}\n",
        "b_contents": "const char* ffs_event_to_string(enum usb_functionfs_event_type type) {\n    switch (type) {\n        case FUNCTIONFS_BIND:\n            return \"FUNCTIONFS_BIND\";\n        case FUNCTIONFS_UNBIND:\n            return \"FUNCTIONFS_UNBIND\";\n        case FUNCTIONFS_ENABLE:\n            return \"FUNCTIONFS_ENABLE\";\n        case FUNCTIONFS_DISABLE:\n            return \"FUNCTIONFS_DISABLE\";\n        case FUNCTIONFS_SETUP:\n            return \"FUNCTIONFS_SETUP\";\n        case FUNCTIONFS_SUSPEND:\n            return \"FUNCTIONFS_SUSPEND\";\n        case FUNCTIONFS_RESUME:\n            return \"FUNCTIONFS_RESUME\";\n    }\n}\n\nbool read_functionfs_setup(int fd, usb_functionfs_event* event) {\n    LOG(INFO) << \"received FUNCTIONFS_SETUP control transfer: bRequestType = \"\n              << static_cast<int>(event->u.setup.bRequestType)\n              << \", bRequest = \" << static_cast<int>(event->u.setup.bRequest)\n              << \", wValue = \" << static_cast<int>(event->u.setup.wValue)\n              << \", wIndex = \" << static_cast<int>(event->u.setup.wIndex)\n              << \", wLength = \" << static_cast<int>(event->u.setup.wLength);\n\n    if ((event->u.setup.bRequestType & USB_DIR_IN)) {\n        LOG(INFO) << \"acking device-to-host control transfer\";\n        ssize_t rc = adb_write(fd, \"\", 0);\n        if (rc != 0) {\n            PLOG(ERROR) << \"failed to write empty packet to host\";\n            return false;\n        }\n    } else {\n        std::string buf;\n        buf.resize(event->u.setup.wLength + 1);\n\n        ssize_t rc = adb_read(fd, buf.data(), buf.size());\n        if (rc != event->u.setup.wLength) {\n            LOG(ERROR) << \"read \" << rc << \" bytes when trying to read control request, expected \"\n                       << event->u.setup.wLength;\n        }\n\n        LOG(INFO) << \"control request contents: \" << buf;\n    }\n\n    return true;\n}\n",
        "base_contents": "",
        "res_region": "const char* ffs_event_to_string(enum usb_functionfs_event_type type) {\n    switch (type) {\n        case FUNCTIONFS_BIND:\n            return \"FUNCTIONFS_BIND\";\n        case FUNCTIONFS_UNBIND:\n            return \"FUNCTIONFS_UNBIND\";\n        case FUNCTIONFS_ENABLE:\n            return \"FUNCTIONFS_ENABLE\";\n        case FUNCTIONFS_DISABLE:\n            return \"FUNCTIONFS_DISABLE\";\n        case FUNCTIONFS_SETUP:\n            return \"FUNCTIONFS_SETUP\";\n        case FUNCTIONFS_SUSPEND:\n            return \"FUNCTIONFS_SUSPEND\";\n        case FUNCTIONFS_RESUME:\n            return \"FUNCTIONFS_RESUME\";\n    }\n}\n\nbool read_functionfs_setup(borrowed_fd fd, usb_functionfs_event* event) {\n    LOG(INFO) << \"received FUNCTIONFS_SETUP control transfer: bRequestType = \"\n              << static_cast<int>(event->u.setup.bRequestType)\n              << \", bRequest = \" << static_cast<int>(event->u.setup.bRequest)\n              << \", wValue = \" << static_cast<int>(event->u.setup.wValue)\n              << \", wIndex = \" << static_cast<int>(event->u.setup.wIndex)\n              << \", wLength = \" << static_cast<int>(event->u.setup.wLength);\n\n    if ((event->u.setup.bRequestType & USB_DIR_IN)) {\n        LOG(INFO) << \"acking device-to-host control transfer\";\n        ssize_t rc = adb_write(fd.get(), \"\", 0);\n        if (rc != 0) {\n            PLOG(ERROR) << \"failed to write empty packet to host\";\n            return false;\n        }\n    } else {\n        std::string buf;\n        buf.resize(event->u.setup.wLength + 1);\n\n        ssize_t rc = adb_read(fd.get(), buf.data(), buf.size());\n        if (rc != event->u.setup.wLength) {\n            LOG(ERROR) << \"read \" << rc << \" bytes when trying to read control request, expected \"\n                       << event->u.setup.wLength;\n        }\n\n        LOG(INFO) << \"control request contents: \" << buf;\n    }\n\n    return true;\n}\n",
        "lookback": "    switch (type) {",
        "lookahead": "bool open_functionfs(android::base::unique_fd* out_control, android::base::unique_fd* out_bulk_out,",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 250,
        "end_line": 353,
        "merge_gen_region": " char ffseventtostringenum_fseventtype) switchtype { FUNCTION_: returnFUNCTIONFSBIND case FUNCTION_BIND returnFUNCTIONFSUN\"; FUNCTION_BIND returnFUNCTION_BIND caseFSENABLE returnFUNCTION_ENABLE case FUNCTION_: returnFUNCTION_\"; FUNCTIONFSDISABLE return \"FSDISABLE case FUNCTION_: returnFUNCTIONFSSETUP caseFSSUSPEND returnFUNCTIONFSSUSPEND case FUNCTION_: returnFUNCTIONFSRESUME returnFUNCTION_\"; } bool_fsfunction_(orrow_ fd usbfunction_fsevent event { LOGINFO <<receivedFS_ control:RequestTypeRequestType \" <<_<>(->->..)) b b = <<_<>(->->..RequestType << b = <<_<>(->..Request << \",Value = <<_<>(_<>(->..Value) \",Index = <<_<>(->->..Index << w = <<_<inteventusetupw) \",Length = <<_<>(->->..Length ifeventeventusetupb &___)) LOGINFO <<ack devicetohost transfer ssizet = adbwritefdget \"\",); ( !=) P(ERROR <<failed write packet host return; } else stdstring;.(->.Length 1 ssizet = adb",
        "confidence": 0.9022377729415894,
        "hesitated": false,
        "resolved": false
    },
    {
        "a_contents": "        *out_control = std::move(control);\n    }\n\n    // Read until we get FUNCTIONFS_BIND from the control endpoint.\n    while (true) {\n        struct usb_functionfs_event event;\n        ssize_t rc = TEMP_FAILURE_RETRY(adb_read(*out_control, &event, sizeof(event)));\n\n        if (rc == -1) {\n            PLOG(FATAL) << \"failed to read from FFS control fd\";\n        } else if (rc == 0) {\n            LOG(WARNING) << \"hit EOF on functionfs control fd during initialization\";\n        } else if (rc != sizeof(event)) {\n            LOG(FATAL) << \"read functionfs event of unexpected size, expected \" << sizeof(event)\n                       << \", got \" << rc;\n        }\n\n        LOG(INFO) << \"USB event: \"\n                  << ffs_event_to_string(static_cast<usb_functionfs_event_type>(event.type));\n        if (event.type == FUNCTIONFS_BIND) {\n            break;\n        } else if (event.type == FUNCTIONFS_SETUP) {\n            read_functionfs_setup(*out_control, &event);\n        } else {\n            continue;\n        }",
        "b_contents": "        *out_control = std::move(control);\n    }\n\n    // Read until we get FUNCTIONFS_BIND from the control endpoint.\n    while (true) {\n        struct usb_functionfs_event event;\n        ssize_t rc = TEMP_FAILURE_RETRY(adb_read(*out_control, &event, sizeof(event)));\n\n        if (rc == -1) {\n            PLOG(FATAL) << \"failed to read from FFS control fd\";\n        } else if (rc == 0) {\n            LOG(WARNING) << \"hit EOF on functionfs control fd during initialization\";\n        } else if (rc != sizeof(event)) {\n            LOG(FATAL) << \"read functionfs event of unexpected size, expected \" << sizeof(event)\n                       << \", got \" << rc;\n        }\n\n        LOG(INFO) << \"USB event: \"\n                  << ffs_event_to_string(static_cast<usb_functionfs_event_type>(event.type));\n        if (event.type == FUNCTIONFS_BIND) {\n            break;\n        } else if (event.type == FUNCTIONFS_SETUP) {\n            read_functionfs_setup(out_control->get(), &event);\n        } else {\n            continue;\n        }",
        "base_contents": "",
        "res_region": "        *out_control = std::move(control);\n    }\n\n    // Read until we get FUNCTIONFS_BIND from the control endpoint.\n    while (true) {\n        struct usb_functionfs_event event;\n        ssize_t rc = TEMP_FAILURE_RETRY(adb_read(*out_control, &event, sizeof(event)));\n\n        if (rc == -1) {\n            PLOG(FATAL) << \"failed to read from FFS control fd\";\n        } else if (rc == 0) {\n            LOG(WARNING) << \"hit EOF on functionfs control fd during initialization\";\n        } else if (rc != sizeof(event)) {\n            LOG(FATAL) << \"read functionfs event of unexpected size, expected \" << sizeof(event)\n                       << \", got \" << rc;\n        }\n\n        LOG(INFO) << \"USB event: \"\n                  << ffs_event_to_string(static_cast<usb_functionfs_event_type>(event.type));\n        if (event.type == FUNCTIONFS_BIND) {\n            break;\n        } else if (event.type == FUNCTIONFS_SETUP) {\n            read_functionfs_setup(*out_control, &event);\n        } else {\n            continue;\n        }",
        "lookback": "    }",
        "lookahead": "    }",
        "label": [
            "ours",
            "one_side_deletion"
        ],
        "start_line": 406,
        "end_line": 461,
        "merge_gen_region": "outcontrol stdmovecontrol } Read we FUNCTION_BIND the endpoint whiletrue { usbfunction_fsevent;_ rc TEMPFAILURERETRYadbreadoutcontrol &, sizeofevent if ( ==1 {LOGFATAL <<failed to fromFS fd } ifrc 0 {() LOGWARNING <<hit onfs control during\"; else ( !=()) LOGFATAL <<read function event unexpected, \" sizeofevent << got \" rc }() <<USB: <<_____(_<usbfunction___>(.)); (. ==FSBIND { break } ifeventtype FUNCTIONFSSETUP {_fssetupoutcontrol &); else continue }",
        "confidence": 0.9255003929138184,
        "hesitated": false,
        "resolved": false
    }
]